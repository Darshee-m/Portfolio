/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bidi-js";
exports.ids = ["vendor-chunks/bidi-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/bidi-js/dist/bidi.js":
/*!*******************************************!*\
  !*** ./node_modules/bidi-js/dist/bidi.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  function bidiFactory() {\n  var bidi = (function (exports) {\n\n    // Bidi character types data, auto generated\n    var DATA = {\n      \"R\": \"13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73\",\n      \"EN\": \"1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9\",\n      \"ES\": \"17,2,6dp+1,f+1,av,16vr,mx+1,4o,2\",\n      \"ET\": \"z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj\",\n      \"AN\": \"16o+5,2j+9,2+1,35,ed,1ff2+9,87+u\",\n      \"CS\": \"18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b\",\n      \"B\": \"a,3,f+2,2v,690\",\n      \"S\": \"9,2,k\",\n      \"WS\": \"c,k,4f4,1vk+a,u,1j,335\",\n      \"ON\": \"x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i\",\n      \"BN\": \"0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1\",\n      \"NSM\": \"lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n\",\n      \"AL\": \"16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d\",\n      \"LRO\": \"6ct\",\n      \"RLO\": \"6cu\",\n      \"LRE\": \"6cq\",\n      \"RLE\": \"6cr\",\n      \"PDF\": \"6cs\",\n      \"LRI\": \"6ee\",\n      \"RLI\": \"6ef\",\n      \"FSI\": \"6eg\",\n      \"PDI\": \"6eh\"\n    };\n\n    var TYPES = {};\n    var TYPES_TO_NAMES = {};\n    TYPES.L = 1; //L is the default\n    TYPES_TO_NAMES[1] = 'L';\n    Object.keys(DATA).forEach(function (type, i) {\n      TYPES[type] = 1 << (i + 1);\n      TYPES_TO_NAMES[TYPES[type]] = type;\n    });\n    Object.freeze(TYPES);\n\n    var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;\n    var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;\n    var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;\n    var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;\n    var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;\n\n    var map = null;\n\n    function parseData () {\n      if (!map) {\n        //const start = performance.now()\n        map = new Map();\n        var loop = function ( type ) {\n          if (DATA.hasOwnProperty(type)) {\n            var lastCode = 0;\n            DATA[type].split(',').forEach(function (range) {\n              var ref = range.split('+');\n              var skip = ref[0];\n              var step = ref[1];\n              skip = parseInt(skip, 36);\n              step = step ? parseInt(step, 36) : 0;\n              map.set(lastCode += skip, TYPES[type]);\n              for (var i = 0; i < step; i++) {\n                map.set(++lastCode, TYPES[type]);\n              }\n            });\n          }\n        };\n\n        for (var type in DATA) loop( type );\n        //console.log(`char types parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    /**\n     * @param {string} char\n     * @return {number}\n     */\n    function getBidiCharType (char) {\n      parseData();\n      return map.get(char.codePointAt(0)) || TYPES.L\n    }\n\n    function getBidiCharTypeName(char) {\n      return TYPES_TO_NAMES[getBidiCharType(char)]\n    }\n\n    // Bidi bracket pairs data, auto generated\n    var data$1 = {\n      \"pairs\": \"14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1\",\n      \"canonical\": \"6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye\"\n    };\n\n    /**\n     * Parses an string that holds encoded codepoint mappings, e.g. for bracket pairs or\n     * mirroring characters, as encoded by scripts/generateBidiData.js. Returns an object\n     * holding the `map`, and optionally a `reverseMap` if `includeReverse:true`.\n     * @param {string} encodedString\n     * @param {boolean} includeReverse - true if you want reverseMap in the output\n     * @return {{map: Map<number, number>, reverseMap?: Map<number, number>}}\n     */\n    function parseCharacterMap (encodedString, includeReverse) {\n      var radix = 36;\n      var lastCode = 0;\n      var map = new Map();\n      var reverseMap = includeReverse && new Map();\n      var prevPair;\n      encodedString.split(',').forEach(function visit(entry) {\n        if (entry.indexOf('+') !== -1) {\n          for (var i = +entry; i--;) {\n            visit(prevPair);\n          }\n        } else {\n          prevPair = entry;\n          var ref = entry.split('>');\n          var a = ref[0];\n          var b = ref[1];\n          a = String.fromCodePoint(lastCode += parseInt(a, radix));\n          b = String.fromCodePoint(lastCode += parseInt(b, radix));\n          map.set(a, b);\n          includeReverse && reverseMap.set(b, a);\n        }\n      });\n      return { map: map, reverseMap: reverseMap }\n    }\n\n    var openToClose, closeToOpen, canonical;\n\n    function parse$1 () {\n      if (!openToClose) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data$1.pairs, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap;\n        openToClose = map;\n        closeToOpen = reverseMap;\n        canonical = parseCharacterMap(data$1.canonical, false).map;\n        //console.log(`brackets parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function openingToClosingBracket (char) {\n      parse$1();\n      return openToClose.get(char) || null\n    }\n\n    function closingToOpeningBracket (char) {\n      parse$1();\n      return closeToOpen.get(char) || null\n    }\n\n    function getCanonicalBracket (char) {\n      parse$1();\n      return canonical.get(char) || null\n    }\n\n    // Local type aliases\n    var TYPE_L = TYPES.L;\n    var TYPE_R = TYPES.R;\n    var TYPE_EN = TYPES.EN;\n    var TYPE_ES = TYPES.ES;\n    var TYPE_ET = TYPES.ET;\n    var TYPE_AN = TYPES.AN;\n    var TYPE_CS = TYPES.CS;\n    var TYPE_B = TYPES.B;\n    var TYPE_S = TYPES.S;\n    var TYPE_ON = TYPES.ON;\n    var TYPE_BN = TYPES.BN;\n    var TYPE_NSM = TYPES.NSM;\n    var TYPE_AL = TYPES.AL;\n    var TYPE_LRO = TYPES.LRO;\n    var TYPE_RLO = TYPES.RLO;\n    var TYPE_LRE = TYPES.LRE;\n    var TYPE_RLE = TYPES.RLE;\n    var TYPE_PDF = TYPES.PDF;\n    var TYPE_LRI = TYPES.LRI;\n    var TYPE_RLI = TYPES.RLI;\n    var TYPE_FSI = TYPES.FSI;\n    var TYPE_PDI = TYPES.PDI;\n\n    /**\n     * @typedef {object} GetEmbeddingLevelsResult\n     * @property {{start, end, level}[]} paragraphs\n     * @property {Uint8Array} levels\n     */\n\n    /**\n     * This function applies the Bidirectional Algorithm to a string, returning the resolved embedding levels\n     * in a single Uint8Array plus a list of objects holding each paragraph's start and end indices and resolved\n     * base embedding level.\n     *\n     * @param {string} string - The input string\n     * @param {\"ltr\"|\"rtl\"|\"auto\"} [baseDirection] - Use \"ltr\" or \"rtl\" to force a base paragraph direction,\n     *        otherwise a direction will be chosen automatically from each paragraph's contents.\n     * @return {GetEmbeddingLevelsResult}\n     */\n    function getEmbeddingLevels (string, baseDirection) {\n      var MAX_DEPTH = 125;\n\n      // Start by mapping all characters to their unicode type, as a bitmask integer\n      var charTypes = new Uint32Array(string.length);\n      for (var i = 0; i < string.length; i++) {\n        charTypes[i] = getBidiCharType(string[i]);\n      }\n\n      var charTypeCounts = new Map(); //will be cleared at start of each paragraph\n      function changeCharType(i, type) {\n        var oldType = charTypes[i];\n        charTypes[i] = type;\n        charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);\n        if (oldType & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);\n        }\n        charTypeCounts.set(type, (charTypeCounts.get(type) || 0) + 1);\n        if (type & NEUTRAL_ISOLATE_TYPES) {\n          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n        }\n      }\n\n      var embedLevels = new Uint8Array(string.length);\n      var isolationPairs = new Map(); //init->pdi and pdi->init\n\n      // === 3.3.1 The Paragraph Level ===\n      // 3.3.1 P1: Split the text into paragraphs\n      var paragraphs = []; // [{start, end, level}, ...]\n      var paragraph = null;\n      for (var i$1 = 0; i$1 < string.length; i$1++) {\n        if (!paragraph) {\n          paragraphs.push(paragraph = {\n            start: i$1,\n            end: string.length - 1,\n            // 3.3.1 P2-P3: Determine the paragraph level\n            level: baseDirection === 'rtl' ? 1 : baseDirection === 'ltr' ? 0 : determineAutoEmbedLevel(i$1, false)\n          });\n        }\n        if (charTypes[i$1] & TYPE_B) {\n          paragraph.end = i$1;\n          paragraph = null;\n        }\n      }\n\n      var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;\n      var nextEven = function (n) { return n + ((n & 1) ? 1 : 2); };\n      var nextOdd = function (n) { return n + ((n & 1) ? 2 : 1); };\n\n      // Everything from here on will operate per paragraph.\n      for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {\n        paragraph = paragraphs[paraIdx];\n        var statusStack = [{\n          _level: paragraph.level,\n          _override: 0, //0=neutral, 1=L, 2=R\n          _isolate: 0 //bool\n        }];\n        var stackTop = (void 0);\n        var overflowIsolateCount = 0;\n        var overflowEmbeddingCount = 0;\n        var validIsolateCount = 0;\n        charTypeCounts.clear();\n\n        // === 3.3.2 Explicit Levels and Directions ===\n        for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {\n          var charType = charTypes[i$2];\n          stackTop = statusStack[statusStack.length - 1];\n\n          // Set initial counts\n          charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);\n          if (charType & NEUTRAL_ISOLATE_TYPES) {\n            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);\n          }\n\n          // Explicit Embeddings: 3.3.2 X2 - X3\n          if (charType & FORMATTING_TYPES) { //prefilter all formatters\n            if (charType & (TYPE_RLE | TYPE_LRE)) {\n              embedLevels[i$2] = stackTop._level; // 5.2\n              var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);\n              if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                statusStack.push({\n                  _level: level,\n                  _override: 0,\n                  _isolate: 0\n                });\n              } else if (!overflowIsolateCount) {\n                overflowEmbeddingCount++;\n              }\n            }\n\n            // Explicit Overrides: 3.3.2 X4 - X5\n            else if (charType & (TYPE_RLO | TYPE_LRO)) {\n              embedLevels[i$2] = stackTop._level; // 5.2\n              var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);\n              if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {\n                statusStack.push({\n                  _level: level$1,\n                  _override: (charType & TYPE_RLO) ? TYPE_R : TYPE_L,\n                  _isolate: 0\n                });\n              } else if (!overflowIsolateCount) {\n                overflowEmbeddingCount++;\n              }\n            }\n\n            // Isolates: 3.3.2 X5a - X5c\n            else if (charType & ISOLATE_INIT_TYPES) {\n              // X5c - FSI becomes either RLI or LRI\n              if (charType & TYPE_FSI) {\n                charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;\n              }\n\n              embedLevels[i$2] = stackTop._level;\n              if (stackTop._override) {\n                changeCharType(i$2, stackTop._override);\n              }\n              var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);\n              if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {\n                validIsolateCount++;\n                statusStack.push({\n                  _level: level$2,\n                  _override: 0,\n                  _isolate: 1,\n                  _isolInitIndex: i$2\n                });\n              } else {\n                overflowIsolateCount++;\n              }\n            }\n\n            // Terminating Isolates: 3.3.2 X6a\n            else if (charType & TYPE_PDI) {\n              if (overflowIsolateCount > 0) {\n                overflowIsolateCount--;\n              } else if (validIsolateCount > 0) {\n                overflowEmbeddingCount = 0;\n                while (!statusStack[statusStack.length - 1]._isolate) {\n                  statusStack.pop();\n                }\n                // Add to isolation pairs bidirectional mapping:\n                var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;\n                if (isolInitIndex != null) {\n                  isolationPairs.set(isolInitIndex, i$2);\n                  isolationPairs.set(i$2, isolInitIndex);\n                }\n                statusStack.pop();\n                validIsolateCount--;\n              }\n              stackTop = statusStack[statusStack.length - 1];\n              embedLevels[i$2] = stackTop._level;\n              if (stackTop._override) {\n                changeCharType(i$2, stackTop._override);\n              }\n            }\n\n\n            // Terminating Embeddings and Overrides: 3.3.2 X7\n            else if (charType & TYPE_PDF) {\n              if (overflowIsolateCount === 0) {\n                if (overflowEmbeddingCount > 0) {\n                  overflowEmbeddingCount--;\n                } else if (!stackTop._isolate && statusStack.length > 1) {\n                  statusStack.pop();\n                  stackTop = statusStack[statusStack.length - 1];\n                }\n              }\n              embedLevels[i$2] = stackTop._level; // 5.2\n            }\n\n            // End of Paragraph: 3.3.2 X8\n            else if (charType & TYPE_B) {\n              embedLevels[i$2] = paragraph.level;\n            }\n          }\n\n          // Non-formatting characters: 3.3.2 X6\n          else {\n            embedLevels[i$2] = stackTop._level;\n            // NOTE: This exclusion of BN seems to go against what section 5.2 says, but is required for test passage\n            if (stackTop._override && charType !== TYPE_BN) {\n              changeCharType(i$2, stackTop._override);\n            }\n          }\n        }\n\n        // === 3.3.3 Preparations for Implicit Processing ===\n\n        // Remove all RLE, LRE, RLO, LRO, PDF, and BN characters: 3.3.3 X9\n        // Note: Due to section 5.2, we won't remove them, but we'll use the BN_LIKE_TYPES bitset to\n        // easily ignore them all from here on out.\n\n        // 3.3.3 X10\n        // Compute the set of isolating run sequences as specified by BD13\n        var levelRuns = [];\n        var currentRun = null;\n        for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {\n          var charType$1 = charTypes[i$3];\n          if (!(charType$1 & BN_LIKE_TYPES)) {\n            var lvl = embedLevels[i$3];\n            var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;\n            var isPDI = charType$1 === TYPE_PDI;\n            if (currentRun && lvl === currentRun._level) {\n              currentRun._end = i$3;\n              currentRun._endsWithIsolInit = isIsolInit;\n            } else {\n              levelRuns.push(currentRun = {\n                _start: i$3,\n                _end: i$3,\n                _level: lvl,\n                _startsWithPDI: isPDI,\n                _endsWithIsolInit: isIsolInit\n              });\n            }\n          }\n        }\n        var isolatingRunSeqs = []; // [{seqIndices: [], sosType: L|R, eosType: L|R}]\n        for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {\n          var run = levelRuns[runIdx];\n          if (!run._startsWithPDI || (run._startsWithPDI && !isolationPairs.has(run._start))) {\n            var seqRuns = [currentRun = run];\n            for (var pdiIndex = (void 0); currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null;) {\n              for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {\n                if (levelRuns[i$4]._start === pdiIndex) {\n                  seqRuns.push(currentRun = levelRuns[i$4]);\n                  break\n                }\n              }\n            }\n            // build flat list of indices across all runs:\n            var seqIndices = [];\n            for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {\n              var run$1 = seqRuns[i$5];\n              for (var j = run$1._start; j <= run$1._end; j++) {\n                seqIndices.push(j);\n              }\n            }\n            // determine the sos/eos types:\n            var firstLevel = embedLevels[seqIndices[0]];\n            var prevLevel = paragraph.level;\n            for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {\n              if (!(charTypes[i$6] & BN_LIKE_TYPES)) { //5.2\n                prevLevel = embedLevels[i$6];\n                break\n              }\n            }\n            var lastIndex = seqIndices[seqIndices.length - 1];\n            var lastLevel = embedLevels[lastIndex];\n            var nextLevel = paragraph.level;\n            if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {\n              for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {\n                if (!(charTypes[i$7] & BN_LIKE_TYPES)) { //5.2\n                  nextLevel = embedLevels[i$7];\n                  break\n                }\n              }\n            }\n            isolatingRunSeqs.push({\n              _seqIndices: seqIndices,\n              _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,\n              _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L\n            });\n          }\n        }\n\n        // The next steps are done per isolating run sequence\n        for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {\n          var ref = isolatingRunSeqs[seqIdx];\n          var seqIndices$1 = ref._seqIndices;\n          var sosType = ref._sosType;\n          var eosType = ref._eosType;\n\n          // === 3.3.4 Resolving Weak Types ===\n\n          // W1 + 5.2. Search backward from each NSM to the first character in the isolating run sequence whose\n          // bidirectional type is not BN, and set the NSM to ON if it is an isolate initiator or PDI, and to its\n          // type otherwise. If the NSM is the first non-BN character, change the NSM to the type of sos.\n          if (charTypeCounts.get(TYPE_NSM)) {\n            for (var si = 0; si < seqIndices$1.length; si++) {\n              var i$8 = seqIndices$1[si];\n              if (charTypes[i$8] & TYPE_NSM) {\n                var prevType = sosType;\n                for (var sj = si - 1; sj >= 0; sj--) {\n                  if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) { //5.2 scan back to first non-BN\n                    prevType = charTypes[seqIndices$1[sj]];\n                    break\n                  }\n                }\n                changeCharType(i$8, (prevType & (ISOLATE_INIT_TYPES | TYPE_PDI)) ? TYPE_ON : prevType);\n              }\n            }\n          }\n\n          // W2. Search backward from each instance of a European number until the first strong type (R, L, AL, or sos)\n          // is found. If an AL is found, change the type of the European number to Arabic number.\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {\n              var i$9 = seqIndices$1[si$1];\n              if (charTypes[i$9] & TYPE_EN) {\n                for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {\n                  var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];\n                  if (prevCharType & STRONG_TYPES) {\n                    if (prevCharType === TYPE_AL) {\n                      changeCharType(i$9, TYPE_AN);\n                    }\n                    break\n                  }\n                }\n              }\n            }\n          }\n\n          // W3. Change all ALs to R\n          if (charTypeCounts.get(TYPE_AL)) {\n            for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {\n              var i$10 = seqIndices$1[si$2];\n              if (charTypes[i$10] & TYPE_AL) {\n                changeCharType(i$10, TYPE_R);\n              }\n            }\n          }\n\n          // W4. A single European separator between two European numbers changes to a European number. A single common\n          // separator between two numbers of the same type changes to that type.\n          if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {\n              var i$11 = seqIndices$1[si$3];\n              if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {\n                var prevType$1 = 0, nextType = 0;\n                for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {\n                  prevType$1 = charTypes[seqIndices$1[sj$2]];\n                  if (!(prevType$1 & BN_LIKE_TYPES)) { //5.2\n                    break\n                  }\n                }\n                for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {\n                  nextType = charTypes[seqIndices$1[sj$3]];\n                  if (!(nextType & BN_LIKE_TYPES)) { //5.2\n                    break\n                  }\n                }\n                if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : (prevType$1 & (TYPE_EN | TYPE_AN)))) {\n                  changeCharType(i$11, prevType$1);\n                }\n              }\n            }\n          }\n\n          // W5. A sequence of European terminators adjacent to European numbers changes to all European numbers.\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {\n              var i$12 = seqIndices$1[si$4];\n              if (charTypes[i$12] & TYPE_EN) {\n                for (var sj$4 = si$4 - 1; sj$4 >= 0 && (charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES)); sj$4--) {\n                  changeCharType(seqIndices$1[sj$4], TYPE_EN);\n                }\n                for (var sj$5 = si$4 + 1; sj$5 < seqIndices$1.length && (charTypes[seqIndices$1[sj$5]] & (TYPE_ET | BN_LIKE_TYPES)); sj$5++) {\n                  changeCharType(seqIndices$1[sj$5], TYPE_EN);\n                }\n              }\n            }\n          }\n\n          // W6. Otherwise, separators and terminators change to Other Neutral.\n          if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {\n            for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {\n              var i$13 = seqIndices$1[si$5];\n              if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {\n                changeCharType(i$13, TYPE_ON);\n                // 5.2 transform adjacent BNs too:\n                for (var sj$6 = si$5 - 1; sj$6 >= 0 && (charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES); sj$6--) {\n                  changeCharType(seqIndices$1[sj$6], TYPE_ON);\n                }\n                for (var sj$7 = si$5 + 1; sj$7 < seqIndices$1.length && (charTypes[seqIndices$1[sj$7]] & BN_LIKE_TYPES); sj$7++) {\n                  changeCharType(seqIndices$1[sj$7], TYPE_ON);\n                }\n              }\n            }\n          }\n\n          // W7. Search backward from each instance of a European number until the first strong type (R, L, or sos)\n          // is found. If an L is found, then change the type of the European number to L.\n          // NOTE: implemented in single forward pass for efficiency\n          if (charTypeCounts.get(TYPE_EN)) {\n            for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {\n              var i$14 = seqIndices$1[si$6];\n              var type = charTypes[i$14];\n              if (type & TYPE_EN) {\n                if (prevStrongType === TYPE_L) {\n                  changeCharType(i$14, TYPE_L);\n                }\n              } else if (type & STRONG_TYPES) {\n                prevStrongType = type;\n              }\n            }\n          }\n\n          // === 3.3.5 Resolving Neutral and Isolate Formatting Types ===\n\n          if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {\n            // N0. Process bracket pairs in an isolating run sequence sequentially in the logical order of the text\n            // positions of the opening paired brackets using the logic given below. Within this scope, bidirectional\n            // types EN and AN are treated as R.\n            var R_TYPES_FOR_N_STEPS = (TYPE_R | TYPE_EN | TYPE_AN);\n            var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;\n\n            // * Identify the bracket pairs in the current isolating run sequence according to BD16.\n            var bracketPairs = [];\n            {\n              var openerStack = [];\n              for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {\n                // NOTE: for any potential bracket character we also test that it still carries a NI\n                // type, as that may have been changed earlier. This doesn't seem to be explicitly\n                // called out in the spec, but is required for passage of certain tests.\n                if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {\n                  var char = string[seqIndices$1[si$7]];\n                  var oppositeBracket = (void 0);\n                  // Opening bracket\n                  if (openingToClosingBracket(char) !== null) {\n                    if (openerStack.length < 63) {\n                      openerStack.push({ char: char, seqIndex: si$7 });\n                    } else {\n                      break\n                    }\n                  }\n                  // Closing bracket\n                  else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {\n                    for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {\n                      var stackChar = openerStack[stackIdx].char;\n                      if (stackChar === oppositeBracket ||\n                        stackChar === closingToOpeningBracket(getCanonicalBracket(char)) ||\n                        openingToClosingBracket(getCanonicalBracket(stackChar)) === char\n                      ) {\n                        bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);\n                        openerStack.length = stackIdx; //pop the matching bracket and all following\n                        break\n                      }\n                    }\n                  }\n                }\n              }\n              bracketPairs.sort(function (a, b) { return a[0] - b[0]; });\n            }\n            // * For each bracket-pair element in the list of pairs of text positions\n            for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {\n              var ref$1 = bracketPairs[pairIdx];\n              var openSeqIdx = ref$1[0];\n              var closeSeqIdx = ref$1[1];\n              // a. Inspect the bidirectional types of the characters enclosed within the bracket pair.\n              // b. If any strong type (either L or R) matching the embedding direction is found, set the type for both\n              // brackets in the pair to match the embedding direction.\n              var foundStrongType = false;\n              var useStrongType = 0;\n              for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {\n                var i$15 = seqIndices$1[si$8];\n                if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {\n                  foundStrongType = true;\n                  var lr = (charTypes[i$15] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                  if (lr === getEmbedDirection(i$15)) {\n                    useStrongType = lr;\n                    break\n                  }\n                }\n              }\n              // c. Otherwise, if there is a strong type it must be opposite the embedding direction. Therefore, test\n              // for an established context with a preceding strong type by checking backwards before the opening paired\n              // bracket until the first strong type (L, R, or sos) is found.\n              //    1. If the preceding strong type is also opposite the embedding direction, context is established, so\n              //    set the type for both brackets in the pair to that direction.\n              //    2. Otherwise set the type for both brackets in the pair to the embedding direction.\n              if (foundStrongType && !useStrongType) {\n                useStrongType = sosType;\n                for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {\n                  var i$16 = seqIndices$1[si$9];\n                  if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {\n                    var lr$1 = (charTypes[i$16] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    if (lr$1 !== getEmbedDirection(i$16)) {\n                      useStrongType = lr$1;\n                    } else {\n                      useStrongType = getEmbedDirection(i$16);\n                    }\n                    break\n                  }\n                }\n              }\n              if (useStrongType) {\n                charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;\n                // * Any number of characters that had original bidirectional character type NSM prior to the application\n                // of W1 that immediately follow a paired bracket which changed to L or R under N0 should change to match\n                // the type of their preceding bracket.\n                if (useStrongType !== getEmbedDirection(seqIndices$1[openSeqIdx])) {\n                  for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {\n                    if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$10]] = useStrongType;\n                      }\n                      break\n                    }\n                  }\n                }\n                if (useStrongType !== getEmbedDirection(seqIndices$1[closeSeqIdx])) {\n                  for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {\n                    if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {\n                      if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {\n                        charTypes[seqIndices$1[si$11]] = useStrongType;\n                      }\n                      break\n                    }\n                  }\n                }\n              }\n            }\n\n            // N1. A sequence of NIs takes the direction of the surrounding strong text if the text on both sides has the\n            // same direction.\n            // N2. Any remaining NIs take the embedding direction.\n            for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {\n              if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {\n                var niRunStart = si$12, niRunEnd = si$12;\n                var prevType$2 = sosType; //si === 0 ? sosType : (charTypes[seqIndices[si - 1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L\n                for (var si2 = si$12 - 1; si2 >= 0; si2--) {\n                  if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {\n                    niRunStart = si2; //5.2 treat BNs adjacent to NIs as NIs\n                  } else {\n                    prevType$2 = (charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    break\n                  }\n                }\n                var nextType$1 = eosType;\n                for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {\n                  if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {\n                    niRunEnd = si2$1;\n                  } else {\n                    nextType$1 = (charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS) ? TYPE_R : TYPE_L;\n                    break\n                  }\n                }\n                for (var sj$8 = niRunStart; sj$8 <= niRunEnd; sj$8++) {\n                  charTypes[seqIndices$1[sj$8]] = prevType$2 === nextType$1 ? prevType$2 : getEmbedDirection(seqIndices$1[sj$8]);\n                }\n                si$12 = niRunEnd;\n              }\n            }\n          }\n        }\n\n        // === 3.3.6 Resolving Implicit Levels ===\n\n        for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {\n          var level$3 = embedLevels[i$17];\n          var type$1 = charTypes[i$17];\n          // I2. For all characters with an odd (right-to-left) embedding level, those of type L, EN or AN go up one level.\n          if (level$3 & 1) {\n            if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {\n              embedLevels[i$17]++;\n            }\n          }\n            // I1. For all characters with an even (left-to-right) embedding level, those of type R go up one level\n          // and those of type AN or EN go up two levels.\n          else {\n            if (type$1 & TYPE_R) {\n              embedLevels[i$17]++;\n            } else if (type$1 & (TYPE_AN | TYPE_EN)) {\n              embedLevels[i$17] += 2;\n            }\n          }\n\n          // 5.2: Resolve any LRE, RLE, LRO, RLO, PDF, or BN to the level of the preceding character if there is one,\n          // and otherwise to the base level.\n          if (type$1 & BN_LIKE_TYPES) {\n            embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];\n          }\n\n          // 3.4 L1.1-4: Reset the embedding level of segment/paragraph separators, and any sequence of whitespace or\n          // isolate formatting characters preceding them or the end of the paragraph, to the paragraph level.\n          // NOTE: this will also need to be applied to each individual line ending after line wrapping occurs.\n          if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {\n            for (var j$1 = i$17; j$1 >= 0 && (getBidiCharType(string[j$1]) & TRAILING_TYPES); j$1--) {\n              embedLevels[j$1] = paragraph.level;\n            }\n          }\n        }\n      }\n\n      // DONE! The resolved levels can then be used, after line wrapping, to flip runs of characters\n      // according to section 3.4 Reordering Resolved Levels\n      return {\n        levels: embedLevels,\n        paragraphs: paragraphs\n      }\n\n      function determineAutoEmbedLevel (start, isFSI) {\n        // 3.3.1 P2 - P3\n        for (var i = start; i < string.length; i++) {\n          var charType = charTypes[i];\n          if (charType & (TYPE_R | TYPE_AL)) {\n            return 1\n          }\n          if ((charType & (TYPE_B | TYPE_L)) || (isFSI && charType === TYPE_PDI)) {\n            return 0\n          }\n          if (charType & ISOLATE_INIT_TYPES) {\n            var pdi = indexOfMatchingPDI(i);\n            i = pdi === -1 ? string.length : pdi;\n          }\n        }\n        return 0\n      }\n\n      function indexOfMatchingPDI (isolateStart) {\n        // 3.1.2 BD9\n        var isolationLevel = 1;\n        for (var i = isolateStart + 1; i < string.length; i++) {\n          var charType = charTypes[i];\n          if (charType & TYPE_B) {\n            break\n          }\n          if (charType & TYPE_PDI) {\n            if (--isolationLevel === 0) {\n              return i\n            }\n          } else if (charType & ISOLATE_INIT_TYPES) {\n            isolationLevel++;\n          }\n        }\n        return -1\n      }\n\n      function getEmbedDirection (i) {\n        return (embedLevels[i] & 1) ? TYPE_R : TYPE_L\n      }\n\n    }\n\n    // Bidi mirrored chars data, auto generated\n    var data = \"14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1\";\n\n    var mirrorMap;\n\n    function parse () {\n      if (!mirrorMap) {\n        //const start = performance.now()\n        var ref = parseCharacterMap(data, true);\n        var map = ref.map;\n        var reverseMap = ref.reverseMap;\n        // Combine both maps into one\n        reverseMap.forEach(function (value, key) {\n          map.set(key, value);\n        });\n        mirrorMap = map;\n        //console.log(`mirrored chars parsed in ${performance.now() - start}ms`)\n      }\n    }\n\n    function getMirroredCharacter (char) {\n      parse();\n      return mirrorMap.get(char) || null\n    }\n\n    /**\n     * Given a string and its resolved embedding levels, build a map of indices to replacement chars\n     * for any characters in right-to-left segments that have defined mirrored characters.\n     * @param string\n     * @param embeddingLevels\n     * @param [start]\n     * @param [end]\n     * @return {Map<number, string>}\n     */\n    function getMirroredCharactersMap(string, embeddingLevels, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n\n      var map = new Map();\n      for (var i = start; i <= end; i++) {\n        if (embeddingLevels[i] & 1) { //only odd (rtl) levels\n          var mirror = getMirroredCharacter(string[i]);\n          if (mirror !== null) {\n            map.set(i, mirror);\n          }\n        }\n      }\n      return map\n    }\n\n    /**\n     * Given a start and end denoting a single line within a string, and a set of precalculated\n     * bidi embedding levels, produce a list of segments whose ordering should be flipped, in sequence.\n     * @param {string} string - the full input string\n     * @param {GetEmbeddingLevelsResult} embeddingLevelsResult - the result object from getEmbeddingLevels\n     * @param {number} [start] - first character in a subset of the full string\n     * @param {number} [end] - last character in a subset of the full string\n     * @return {number[][]} - the list of start/end segments that should be flipped, in order.\n     */\n    function getReorderSegments(string, embeddingLevelsResult, start, end) {\n      var strLen = string.length;\n      start = Math.max(0, start == null ? 0 : +start);\n      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);\n\n      var segments = [];\n      embeddingLevelsResult.paragraphs.forEach(function (paragraph) {\n        var lineStart = Math.max(start, paragraph.start);\n        var lineEnd = Math.min(end, paragraph.end);\n        if (lineStart < lineEnd) {\n          // Local slice for mutation\n          var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);\n\n          // 3.4 L1.4: Reset any sequence of whitespace characters and/or isolate formatting characters at the\n          // end of the line to the paragraph level.\n          for (var i = lineEnd; i >= lineStart && (getBidiCharType(string[i]) & TRAILING_TYPES); i--) {\n            lineLevels[i] = paragraph.level;\n          }\n\n          // L2. From the highest level found in the text to the lowest odd level on each line, including intermediate levels\n          // not actually present in the text, reverse any contiguous sequence of characters that are at that level or higher.\n          var maxLevel = paragraph.level;\n          var minOddLevel = Infinity;\n          for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {\n            var level = lineLevels[i$1];\n            if (level > maxLevel) { maxLevel = level; }\n            if (level < minOddLevel) { minOddLevel = level | 1; }\n          }\n          for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {\n            for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {\n              if (lineLevels[i$2] >= lvl) {\n                var segStart = i$2;\n                while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {\n                  i$2++;\n                }\n                if (i$2 > segStart) {\n                  segments.push([segStart + start, i$2 + start]);\n                }\n              }\n            }\n          }\n        }\n      });\n      return segments\n    }\n\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {string} the new string with bidi segments reordered\n     */\n    function getReorderedString(string, embedLevelsResult, start, end) {\n      var indices = getReorderedIndices(string, embedLevelsResult, start, end);\n      var chars = [].concat( string );\n      indices.forEach(function (charIndex, i) {\n        chars[i] = (\n          (embedLevelsResult.levels[charIndex] & 1) ? getMirroredCharacter(string[charIndex]) : null\n        ) || string[charIndex];\n      });\n      return chars.join('')\n    }\n\n    /**\n     * @param {string} string\n     * @param {GetEmbeddingLevelsResult} embedLevelsResult\n     * @param {number} [start]\n     * @param {number} [end]\n     * @return {number[]} an array with character indices in their new bidi order\n     */\n    function getReorderedIndices(string, embedLevelsResult, start, end) {\n      var segments = getReorderSegments(string, embedLevelsResult, start, end);\n      // Fill an array with indices\n      var indices = [];\n      for (var i = 0; i < string.length; i++) {\n        indices[i] = i;\n      }\n      // Reverse each segment in order\n      segments.forEach(function (ref) {\n        var start = ref[0];\n        var end = ref[1];\n\n        var slice = indices.slice(start, end + 1);\n        for (var i = slice.length; i--;) {\n          indices[end - i] = slice[i];\n        }\n      });\n      return indices\n    }\n\n    exports.closingToOpeningBracket = closingToOpeningBracket;\n    exports.getBidiCharType = getBidiCharType;\n    exports.getBidiCharTypeName = getBidiCharTypeName;\n    exports.getCanonicalBracket = getCanonicalBracket;\n    exports.getEmbeddingLevels = getEmbeddingLevels;\n    exports.getMirroredCharacter = getMirroredCharacter;\n    exports.getMirroredCharactersMap = getMirroredCharactersMap;\n    exports.getReorderSegments = getReorderSegments;\n    exports.getReorderedIndices = getReorderedIndices;\n    exports.getReorderedString = getReorderedString;\n    exports.openingToClosingBracket = openingToClosingBracket;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n    return exports;\n\n  }({}));\n  return bidi}\n\n  return bidiFactory;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmlkaS1qcy9kaXN0L2JpZGkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxFQUFFLEtBQTREO0FBQzlELEVBQUUsQ0FDc0c7QUFDeEcsQ0FBQyxzQkFBc0I7O0FBRXZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEMsMEJBQTBCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSTtBQUNuQztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxlQUFlO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRD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QTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtREFBbUQsYUFBYTs7QUFFaEU7O0FBRUEsR0FBRyxHQUFHO0FBQ047O0FBRUE7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvYmlkaS1qcy9kaXN0L2JpZGkuanM/YmE0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5iaWRpX2pzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIGJpZGlGYWN0b3J5KCkge1xuICB2YXIgYmlkaSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuXG4gICAgLy8gQmlkaSBjaGFyYWN0ZXIgdHlwZXMgZGF0YSwgYXV0byBnZW5lcmF0ZWRcbiAgICB2YXIgREFUQSA9IHtcbiAgICAgIFwiUlwiOiBcIjEzaywxYSwyLDMsMywyKzFqLGNoKzE2LGErMSw1KzIsMituLDUsYSw0LDYrMTYsNCszLGgrMWIsNG1vLDE3OXEsMis5LDIrMTEsMmk5Kzd5LDIrNjgsNCwzKzQsNSsxMyw0KzMsMis0aywzKzI5LDgrY2YsMXQrN3osdysxNywzKzNtLDF0KzN6LDE2bzErNXIsOCszMCw4K21jLDI5KzFyLDI5KzR2LDc1KzczXCIsXG4gICAgICBcIkVOXCI6IFwiMWMrOSwzZCsxLDYsMTg3KzksNTEzLDQrNSw3Kzksc2YraiwxNzVoKzkscXcrcSwxNjFmKzFkLDR4dCthLDI1aSs5XCIsXG4gICAgICBcIkVTXCI6IFwiMTcsMiw2ZHArMSxmKzEsYXYsMTZ2cixteCsxLDRvLDJcIixcbiAgICAgIFwiRVRcIjogXCJ6KzIsM2grMyxiKzEseW0sM2UrMSwybyxwNCsxLDgsNnUsN2MsZzYsMXdjLDFuOSs0LDMwKzFiLDJuLDZkLHFoeCsxLGgwbSxhKzEsNDkrMiw2MysxLDQrMSw2YmIrMywxMmpqXCIsXG4gICAgICBcIkFOXCI6IFwiMTZvKzUsMmorOSwyKzEsMzUsZWQsMWZmMis5LDg3K3VcIixcbiAgICAgIFwiQ1NcIjogXCIxOCwyKzEsYiwydSwxMmssNTV2LGwsMTd2MCwyLDMsNTMsMisxLGJcIixcbiAgICAgIFwiQlwiOiBcImEsMyxmKzIsMnYsNjkwXCIsXG4gICAgICBcIlNcIjogXCI5LDIsa1wiLFxuICAgICAgXCJXU1wiOiBcImMsayw0ZjQsMXZrK2EsdSwxaiwzMzVcIixcbiAgICAgIFwiT05cIjogXCJ4KzEsNCs0LGgrNSxyKzUsciszLHosNSszLDIrMSwyKzEsNSwyKzIsMys0LG8sdyxjaSsxLDgrZCwzK2QsNis4LDIrZywzOSsxLDksNisxLDIsMzMsYjgsMysxLDNjKzEsNysxLDVyLGIsN2grMyxzYSs1LDIsM2krNixqZyszLHVyKzksMnYsaWorMSw5Zys5LDcrYSw4bSw0KzEsNDkreCwxNHUsMisyLGMrMixlKzIsZSsyLGUrMSxpK24sZStlLDIrcCx1KzIsZSsyLDM2KzEsMiszLDIrMSxiLDIrMiw2KzUsMiwyLDIsaCsxLDUrNCw2KzMsMytmLDE2KzIsNSszbCwzKzgxLDF5K3AsMis0MCxxK2EsbSsxMywycitjaCwyKzllLDc1K2hmLDMrdiwyKzJ3LDZlKzUsZis2LDc1KzJhLDFhK3AsMisyZyxkKzV4LHIrYiw2KzMsNCtvLGcsNisxLDYrMiwyaysxLDQsMmosNWgreiwxbSsxLDFlK2YsdCsyLDFmK2UsZCszLDRvKzMsMnMrMSx3LDUzNSsxcixoM2wrMWksOTMrMiwycyxiKzEsM2wreCwydiw0ZyszLDIxKzMsa3orMSxnNXYrMSw1YSxqKzksbit2LDIsMywyKzgsMisxLDMrMiwyLDMsNDYrMSw0KzQsaCs1LHIrNSxyK2EsM2grMiw0KzYsYis0LDc4LDFyKzI0LDQrYyw0LDFoYixleSs2LDEwMytqLDE2aitjLDF1eCs3LDUrZyxmc2gsamRxKzF0LDQsNTcrMmUscDEsMW0sMW0sMW0sMW0sNGt0KzEsN2orMTcsNSsycixkK2UsMytlLDIrZSwyKzEwLG0rNCx3LDFuKzUsMXEsNHorNSw0YityYiw5K2MsNCtjLDQrMzcsZCsyZyw4K2IsbCtiLDUrMWosOSs5LDcrMTMsOSt0LDMrMSwyNyszYywyKzI5LDIrM3EsZCtkLDMrNCw0KzIsNis2LGErbyw4KzYsYSsyLGUrNiwxNis0MiwyKzFpXCIsXG4gICAgICBcIkJOXCI6IFwiMCs4LDYrZCwycys1LDIrcCxlLDRtOSwxa3QrMiwyYis1LDUrNSwxN3E5K3YsN2ssNnArOCw2KzEsMTE5ZCszLDQ0MCs3LDk2cysxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZisxLDFla2YrMSwxZWtmKzEsMWVrZis3NSw2cCsycnosMWJlbisxLDFla2YrMSwxZWtmKzFcIixcbiAgICAgIFwiTlNNXCI6IFwibGMrMzMsN28rNiw3YysxOCwyLDIrMSwyKzEsMiwyMSthLDFkK2ssaCwydSs2LDMrNSwzKzEsMiszLDEwLHYrcSwyaythLDFuKzgsYSxwKzMsMis4LDIrMiwyKzQsMTgrMiwzYytlLDIrdiwxaywyLDUrNyw1LDQrNixiKzEsdSwxbiw1KzMsOSxsKzEsciwzKzEsMW0sNSsxLDUrMSwzKzIsNCx2KzEsNCxjKzEsMW0sNSs0LDIrMSw1LGwrMSxuKzUsMiwxbiwzLDIrMyw5LDgrMSxjKzEsdiwxcSxkLDFmLDQsMW0rMiw2KzIsMiszLDgrMSxjKzEsdSwxbixnKzEsbCsxLHQrMSwxbSsxLDUrMyw5LGwrMSx1LDIxLDgrMiwyLDJqLDMrNixkKzcsMnIsMys4LGMrNSwyMysxLHMsMiwyLDFrK2QsMis0LDIrMSw2K2EsMit6LGEsMnYrMywyKzUsMisxLDMrMSxxKzEsNSsyLGgrMyxlLDMrMSw3LGcsamsrMixxYisyLHUrMix1KzEsdisxLDF0KzEsMis2LDksMythLGEsMWErMiwzYysxLHosM2IrMiw1KzEsYSw3KzIsNjQrMSwzLDFuLDIrNiwyLDIsMys3LDcrOSwzLDFkK2csMXMrMywxZCwyKzQsMiw2LDE1KzgsZCsxLHgrMywzKzEsMisyLDFsLDIrMSw0LDIrMiwxbis3LDMrMSw0OSsyLDIrYywyKzYsNSw3LDQrMSw1aisxbCwyKzQsazErdywyZGIrMiwzeSwycCt2LGZmKzMsMzArMSxuOXgrMywyKzkseCsxLDI5KzEsN2wsNCw1LHErMSw2LDQ4KzEscitoLGUsMTMrNyxxK2EsMWIrMiwxZCwzKzMsMysxLDE0LDF3KzUsMysxLDMrMSxkLDksMWMsMWcsMisyLDMrMSw2KzEsMiwxNysxLDksNm4sMyw1LGZuNSxraStmLGgrZixyMiw2Yiw0Nis0LDFhZisyLDIrMSw2KzMsMTUrMiw1LDRtKzEsZnkrMyxhcysxLDRhK2EsNHgsMWorZSwxbCsyLDFlKzMsMysxLDF5KzIsMTErNCwyKzcsMXIsZCsxLDFoKzgsYiszLDMsMm8rMiwzLDIrMSw3LDRoLDQrNyxtKzEsMW0rMSw0LDEyKzYsNCs0LDVnKzcsMysyLDIsbywyZCs1LDIsNSsxLDIrMSw2biszLDcrMSwyKzEscysxLDJlKzcsMywyKzEsMnosMiwzKzUsMiwydSsyLDMrMywyKzQsNzgrOCwyKzEsNzUrMSwyLDUsNDErMywzKzEsNSx4KzUsMysxLDE1KzUsMyszLDksYSs1LDMrMiwxYitjLDIrMSxiYis2LDIrNSwyZCtsLDMrNiwyKzEsMisxLDNmKzUsNCwyKzEsMis2LDIsMjErMSw0LDIsOW8rMSxmMGMrNCwxbys2LHQ1LDFzKzMsMmEsZjVsKzEsNDN0KzIsaSs3LDMrNix2KzMsNDUrMiwxajArMWksNSsxZCw5LGYsbis0LDIrZSwxMXQrNiwyK2csMys2LDIrMSwyKzQsN2ErNixjNiszLDE1dCs2LDMyKzYsZ3poeSs2blwiLFxuICAgICAgXCJBTFwiOiBcIjE2dywzLDIsZSsxYix6KzIsMisycyxnKzEsOCsxLGIrbSwyK3QscysyaSxjK2UsNGgrZiwxZCsxZSwxYndlK2RwLDMrM3oseCtjLDIrMSwzNSszeSwycm0reiw1KzcsYis1LGR0K2wsYyt1LDE3bmwrMjcsMXQrMjcsNHgrNm4sMytkXCIsXG4gICAgICBcIkxST1wiOiBcIjZjdFwiLFxuICAgICAgXCJSTE9cIjogXCI2Y3VcIixcbiAgICAgIFwiTFJFXCI6IFwiNmNxXCIsXG4gICAgICBcIlJMRVwiOiBcIjZjclwiLFxuICAgICAgXCJQREZcIjogXCI2Y3NcIixcbiAgICAgIFwiTFJJXCI6IFwiNmVlXCIsXG4gICAgICBcIlJMSVwiOiBcIjZlZlwiLFxuICAgICAgXCJGU0lcIjogXCI2ZWdcIixcbiAgICAgIFwiUERJXCI6IFwiNmVoXCJcbiAgICB9O1xuXG4gICAgdmFyIFRZUEVTID0ge307XG4gICAgdmFyIFRZUEVTX1RPX05BTUVTID0ge307XG4gICAgVFlQRVMuTCA9IDE7IC8vTCBpcyB0aGUgZGVmYXVsdFxuICAgIFRZUEVTX1RPX05BTUVTWzFdID0gJ0wnO1xuICAgIE9iamVjdC5rZXlzKERBVEEpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGkpIHtcbiAgICAgIFRZUEVTW3R5cGVdID0gMSA8PCAoaSArIDEpO1xuICAgICAgVFlQRVNfVE9fTkFNRVNbVFlQRVNbdHlwZV1dID0gdHlwZTtcbiAgICB9KTtcbiAgICBPYmplY3QuZnJlZXplKFRZUEVTKTtcblxuICAgIHZhciBJU09MQVRFX0lOSVRfVFlQRVMgPSBUWVBFUy5MUkkgfCBUWVBFUy5STEkgfCBUWVBFUy5GU0k7XG4gICAgdmFyIFNUUk9OR19UWVBFUyA9IFRZUEVTLkwgfCBUWVBFUy5SIHwgVFlQRVMuQUw7XG4gICAgdmFyIE5FVVRSQUxfSVNPTEFURV9UWVBFUyA9IFRZUEVTLkIgfCBUWVBFUy5TIHwgVFlQRVMuV1MgfCBUWVBFUy5PTiB8IFRZUEVTLkZTSSB8IFRZUEVTLkxSSSB8IFRZUEVTLlJMSSB8IFRZUEVTLlBESTtcbiAgICB2YXIgQk5fTElLRV9UWVBFUyA9IFRZUEVTLkJOIHwgVFlQRVMuUkxFIHwgVFlQRVMuTFJFIHwgVFlQRVMuUkxPIHwgVFlQRVMuTFJPIHwgVFlQRVMuUERGO1xuICAgIHZhciBUUkFJTElOR19UWVBFUyA9IFRZUEVTLlMgfCBUWVBFUy5XUyB8IFRZUEVTLkIgfCBJU09MQVRFX0lOSVRfVFlQRVMgfCBUWVBFUy5QREkgfCBCTl9MSUtFX1RZUEVTO1xuXG4gICAgdmFyIG1hcCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBwYXJzZURhdGEgKCkge1xuICAgICAgaWYgKCFtYXApIHtcbiAgICAgICAgLy9jb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIHR5cGUgKSB7XG4gICAgICAgICAgaWYgKERBVEEuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgICAgIHZhciBsYXN0Q29kZSA9IDA7XG4gICAgICAgICAgICBEQVRBW3R5cGVdLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IHJhbmdlLnNwbGl0KCcrJyk7XG4gICAgICAgICAgICAgIHZhciBza2lwID0gcmVmWzBdO1xuICAgICAgICAgICAgICB2YXIgc3RlcCA9IHJlZlsxXTtcbiAgICAgICAgICAgICAgc2tpcCA9IHBhcnNlSW50KHNraXAsIDM2KTtcbiAgICAgICAgICAgICAgc3RlcCA9IHN0ZXAgPyBwYXJzZUludChzdGVwLCAzNikgOiAwO1xuICAgICAgICAgICAgICBtYXAuc2V0KGxhc3RDb2RlICs9IHNraXAsIFRZUEVTW3R5cGVdKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXAuc2V0KCsrbGFzdENvZGUsIFRZUEVTW3R5cGVdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gREFUQSkgbG9vcCggdHlwZSApO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBjaGFyIHR5cGVzIHBhcnNlZCBpbiAke3BlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnR9bXNgKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEJpZGlDaGFyVHlwZSAoY2hhcikge1xuICAgICAgcGFyc2VEYXRhKCk7XG4gICAgICByZXR1cm4gbWFwLmdldChjaGFyLmNvZGVQb2ludEF0KDApKSB8fCBUWVBFUy5MXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QmlkaUNoYXJUeXBlTmFtZShjaGFyKSB7XG4gICAgICByZXR1cm4gVFlQRVNfVE9fTkFNRVNbZ2V0QmlkaUNoYXJUeXBlKGNoYXIpXVxuICAgIH1cblxuICAgIC8vIEJpZGkgYnJhY2tldCBwYWlycyBkYXRhLCBhdXRvIGdlbmVyYXRlZFxuICAgIHZhciBkYXRhJDEgPSB7XG4gICAgICBcInBhaXJzXCI6IFwiMTQ+MSwxZT4yLHU+Miwyd3Q+MSwxPjEsMWdlPjEsMXdwPjEsMWo+MSxmPjEsaG0+MSwxPjEsdT4xLHU2PjEsMT4xLCs1LDI4PjEsdz4xLDE+MSwrMyxiOD4xLDE+MSwrMywxPjMsLTE+LTEsMz4xLDE+MSwrMiwxcz4xLDE+MSx4PjEsdGg+MSwxPjEsKzIsZGI+MSwxPjEsKzMsMz4xLDE+MSwrMiwxNHFtPjEsMT4xLCsxLDRxPjEsMWU+Mix1PjIsMj4xLCsxXCIsXG4gICAgICBcImNhbm9uaWNhbFwiOiBcIjZmMT4tNmR4LDZkeT4tNmR4LDZlYz4tNmVkLDZlZT4tNmVkLDZ3dz4yamosLTJqaT4yamosMTRyND4tMWU3bCwxZTdtPi0xZTdsLDFlN20+LTFlNWMsMWU1ZD4tMWU1YiwxZTVjPi0xNHF4LDE0cXk+LTE0cXgsMTR2bj4tMWVjZywxZWNoPi0xZWNnLDFlZHU+LTFlY2csMWVjaT4tMWVjZywxZWRhPi0xZWNnLDFlY2k+LTFlY2csMWVjaT4tMTY4cSwxNjhyPi0xNjhxLDE2OHM+LTE0eWUsMTR5Zj4tMTR5ZVwiXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhbiBzdHJpbmcgdGhhdCBob2xkcyBlbmNvZGVkIGNvZGVwb2ludCBtYXBwaW5ncywgZS5nLiBmb3IgYnJhY2tldCBwYWlycyBvclxuICAgICAqIG1pcnJvcmluZyBjaGFyYWN0ZXJzLCBhcyBlbmNvZGVkIGJ5IHNjcmlwdHMvZ2VuZXJhdGVCaWRpRGF0YS5qcy4gUmV0dXJucyBhbiBvYmplY3RcbiAgICAgKiBob2xkaW5nIHRoZSBgbWFwYCwgYW5kIG9wdGlvbmFsbHkgYSBgcmV2ZXJzZU1hcGAgaWYgYGluY2x1ZGVSZXZlcnNlOnRydWVgLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGVkU3RyaW5nXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlUmV2ZXJzZSAtIHRydWUgaWYgeW91IHdhbnQgcmV2ZXJzZU1hcCBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7e21hcDogTWFwPG51bWJlciwgbnVtYmVyPiwgcmV2ZXJzZU1hcD86IE1hcDxudW1iZXIsIG51bWJlcj59fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlQ2hhcmFjdGVyTWFwIChlbmNvZGVkU3RyaW5nLCBpbmNsdWRlUmV2ZXJzZSkge1xuICAgICAgdmFyIHJhZGl4ID0gMzY7XG4gICAgICB2YXIgbGFzdENvZGUgPSAwO1xuICAgICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIHZhciByZXZlcnNlTWFwID0gaW5jbHVkZVJldmVyc2UgJiYgbmV3IE1hcCgpO1xuICAgICAgdmFyIHByZXZQYWlyO1xuICAgICAgZW5jb2RlZFN0cmluZy5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gdmlzaXQoZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5LmluZGV4T2YoJysnKSAhPT0gLTEpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gK2VudHJ5OyBpLS07KSB7XG4gICAgICAgICAgICB2aXNpdChwcmV2UGFpcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZQYWlyID0gZW50cnk7XG4gICAgICAgICAgdmFyIHJlZiA9IGVudHJ5LnNwbGl0KCc+Jyk7XG4gICAgICAgICAgdmFyIGEgPSByZWZbMF07XG4gICAgICAgICAgdmFyIGIgPSByZWZbMV07XG4gICAgICAgICAgYSA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGxhc3RDb2RlICs9IHBhcnNlSW50KGEsIHJhZGl4KSk7XG4gICAgICAgICAgYiA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGxhc3RDb2RlICs9IHBhcnNlSW50KGIsIHJhZGl4KSk7XG4gICAgICAgICAgbWFwLnNldChhLCBiKTtcbiAgICAgICAgICBpbmNsdWRlUmV2ZXJzZSAmJiByZXZlcnNlTWFwLnNldChiLCBhKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4geyBtYXA6IG1hcCwgcmV2ZXJzZU1hcDogcmV2ZXJzZU1hcCB9XG4gICAgfVxuXG4gICAgdmFyIG9wZW5Ub0Nsb3NlLCBjbG9zZVRvT3BlbiwgY2Fub25pY2FsO1xuXG4gICAgZnVuY3Rpb24gcGFyc2UkMSAoKSB7XG4gICAgICBpZiAoIW9wZW5Ub0Nsb3NlKSB7XG4gICAgICAgIC8vY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICB2YXIgcmVmID0gcGFyc2VDaGFyYWN0ZXJNYXAoZGF0YSQxLnBhaXJzLCB0cnVlKTtcbiAgICAgICAgdmFyIG1hcCA9IHJlZi5tYXA7XG4gICAgICAgIHZhciByZXZlcnNlTWFwID0gcmVmLnJldmVyc2VNYXA7XG4gICAgICAgIG9wZW5Ub0Nsb3NlID0gbWFwO1xuICAgICAgICBjbG9zZVRvT3BlbiA9IHJldmVyc2VNYXA7XG4gICAgICAgIGNhbm9uaWNhbCA9IHBhcnNlQ2hhcmFjdGVyTWFwKGRhdGEkMS5jYW5vbmljYWwsIGZhbHNlKS5tYXA7XG4gICAgICAgIC8vY29uc29sZS5sb2coYGJyYWNrZXRzIHBhcnNlZCBpbiAke3BlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnR9bXNgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9wZW5pbmdUb0Nsb3NpbmdCcmFja2V0IChjaGFyKSB7XG4gICAgICBwYXJzZSQxKCk7XG4gICAgICByZXR1cm4gb3BlblRvQ2xvc2UuZ2V0KGNoYXIpIHx8IG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zaW5nVG9PcGVuaW5nQnJhY2tldCAoY2hhcikge1xuICAgICAgcGFyc2UkMSgpO1xuICAgICAgcmV0dXJuIGNsb3NlVG9PcGVuLmdldChjaGFyKSB8fCBudWxsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2Fub25pY2FsQnJhY2tldCAoY2hhcikge1xuICAgICAgcGFyc2UkMSgpO1xuICAgICAgcmV0dXJuIGNhbm9uaWNhbC5nZXQoY2hhcikgfHwgbnVsbFxuICAgIH1cblxuICAgIC8vIExvY2FsIHR5cGUgYWxpYXNlc1xuICAgIHZhciBUWVBFX0wgPSBUWVBFUy5MO1xuICAgIHZhciBUWVBFX1IgPSBUWVBFUy5SO1xuICAgIHZhciBUWVBFX0VOID0gVFlQRVMuRU47XG4gICAgdmFyIFRZUEVfRVMgPSBUWVBFUy5FUztcbiAgICB2YXIgVFlQRV9FVCA9IFRZUEVTLkVUO1xuICAgIHZhciBUWVBFX0FOID0gVFlQRVMuQU47XG4gICAgdmFyIFRZUEVfQ1MgPSBUWVBFUy5DUztcbiAgICB2YXIgVFlQRV9CID0gVFlQRVMuQjtcbiAgICB2YXIgVFlQRV9TID0gVFlQRVMuUztcbiAgICB2YXIgVFlQRV9PTiA9IFRZUEVTLk9OO1xuICAgIHZhciBUWVBFX0JOID0gVFlQRVMuQk47XG4gICAgdmFyIFRZUEVfTlNNID0gVFlQRVMuTlNNO1xuICAgIHZhciBUWVBFX0FMID0gVFlQRVMuQUw7XG4gICAgdmFyIFRZUEVfTFJPID0gVFlQRVMuTFJPO1xuICAgIHZhciBUWVBFX1JMTyA9IFRZUEVTLlJMTztcbiAgICB2YXIgVFlQRV9MUkUgPSBUWVBFUy5MUkU7XG4gICAgdmFyIFRZUEVfUkxFID0gVFlQRVMuUkxFO1xuICAgIHZhciBUWVBFX1BERiA9IFRZUEVTLlBERjtcbiAgICB2YXIgVFlQRV9MUkkgPSBUWVBFUy5MUkk7XG4gICAgdmFyIFRZUEVfUkxJID0gVFlQRVMuUkxJO1xuICAgIHZhciBUWVBFX0ZTSSA9IFRZUEVTLkZTSTtcbiAgICB2YXIgVFlQRV9QREkgPSBUWVBFUy5QREk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBHZXRFbWJlZGRpbmdMZXZlbHNSZXN1bHRcbiAgICAgKiBAcHJvcGVydHkge3tzdGFydCwgZW5kLCBsZXZlbH1bXX0gcGFyYWdyYXBoc1xuICAgICAqIEBwcm9wZXJ0eSB7VWludDhBcnJheX0gbGV2ZWxzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGFwcGxpZXMgdGhlIEJpZGlyZWN0aW9uYWwgQWxnb3JpdGhtIHRvIGEgc3RyaW5nLCByZXR1cm5pbmcgdGhlIHJlc29sdmVkIGVtYmVkZGluZyBsZXZlbHNcbiAgICAgKiBpbiBhIHNpbmdsZSBVaW50OEFycmF5IHBsdXMgYSBsaXN0IG9mIG9iamVjdHMgaG9sZGluZyBlYWNoIHBhcmFncmFwaCdzIHN0YXJ0IGFuZCBlbmQgaW5kaWNlcyBhbmQgcmVzb2x2ZWRcbiAgICAgKiBiYXNlIGVtYmVkZGluZyBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBUaGUgaW5wdXQgc3RyaW5nXG4gICAgICogQHBhcmFtIHtcImx0clwifFwicnRsXCJ8XCJhdXRvXCJ9IFtiYXNlRGlyZWN0aW9uXSAtIFVzZSBcImx0clwiIG9yIFwicnRsXCIgdG8gZm9yY2UgYSBiYXNlIHBhcmFncmFwaCBkaXJlY3Rpb24sXG4gICAgICogICAgICAgIG90aGVyd2lzZSBhIGRpcmVjdGlvbiB3aWxsIGJlIGNob3NlbiBhdXRvbWF0aWNhbGx5IGZyb20gZWFjaCBwYXJhZ3JhcGgncyBjb250ZW50cy5cbiAgICAgKiBAcmV0dXJuIHtHZXRFbWJlZGRpbmdMZXZlbHNSZXN1bHR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RW1iZWRkaW5nTGV2ZWxzIChzdHJpbmcsIGJhc2VEaXJlY3Rpb24pIHtcbiAgICAgIHZhciBNQVhfREVQVEggPSAxMjU7XG5cbiAgICAgIC8vIFN0YXJ0IGJ5IG1hcHBpbmcgYWxsIGNoYXJhY3RlcnMgdG8gdGhlaXIgdW5pY29kZSB0eXBlLCBhcyBhIGJpdG1hc2sgaW50ZWdlclxuICAgICAgdmFyIGNoYXJUeXBlcyA9IG5ldyBVaW50MzJBcnJheShzdHJpbmcubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoYXJUeXBlc1tpXSA9IGdldEJpZGlDaGFyVHlwZShzdHJpbmdbaV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhclR5cGVDb3VudHMgPSBuZXcgTWFwKCk7IC8vd2lsbCBiZSBjbGVhcmVkIGF0IHN0YXJ0IG9mIGVhY2ggcGFyYWdyYXBoXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VDaGFyVHlwZShpLCB0eXBlKSB7XG4gICAgICAgIHZhciBvbGRUeXBlID0gY2hhclR5cGVzW2ldO1xuICAgICAgICBjaGFyVHlwZXNbaV0gPSB0eXBlO1xuICAgICAgICBjaGFyVHlwZUNvdW50cy5zZXQob2xkVHlwZSwgY2hhclR5cGVDb3VudHMuZ2V0KG9sZFR5cGUpIC0gMSk7XG4gICAgICAgIGlmIChvbGRUeXBlICYgTkVVVFJBTF9JU09MQVRFX1RZUEVTKSB7XG4gICAgICAgICAgY2hhclR5cGVDb3VudHMuc2V0KE5FVVRSQUxfSVNPTEFURV9UWVBFUywgY2hhclR5cGVDb3VudHMuZ2V0KE5FVVRSQUxfSVNPTEFURV9UWVBFUykgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBjaGFyVHlwZUNvdW50cy5zZXQodHlwZSwgKGNoYXJUeXBlQ291bnRzLmdldCh0eXBlKSB8fCAwKSArIDEpO1xuICAgICAgICBpZiAodHlwZSAmIE5FVVRSQUxfSVNPTEFURV9UWVBFUykge1xuICAgICAgICAgIGNoYXJUeXBlQ291bnRzLnNldChORVVUUkFMX0lTT0xBVEVfVFlQRVMsIChjaGFyVHlwZUNvdW50cy5nZXQoTkVVVFJBTF9JU09MQVRFX1RZUEVTKSB8fCAwKSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlbWJlZExldmVscyA9IG5ldyBVaW50OEFycmF5KHN0cmluZy5sZW5ndGgpO1xuICAgICAgdmFyIGlzb2xhdGlvblBhaXJzID0gbmV3IE1hcCgpOyAvL2luaXQtPnBkaSBhbmQgcGRpLT5pbml0XG5cbiAgICAgIC8vID09PSAzLjMuMSBUaGUgUGFyYWdyYXBoIExldmVsID09PVxuICAgICAgLy8gMy4zLjEgUDE6IFNwbGl0IHRoZSB0ZXh0IGludG8gcGFyYWdyYXBoc1xuICAgICAgdmFyIHBhcmFncmFwaHMgPSBbXTsgLy8gW3tzdGFydCwgZW5kLCBsZXZlbH0sIC4uLl1cbiAgICAgIHZhciBwYXJhZ3JhcGggPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc3RyaW5nLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgaWYgKCFwYXJhZ3JhcGgpIHtcbiAgICAgICAgICBwYXJhZ3JhcGhzLnB1c2gocGFyYWdyYXBoID0ge1xuICAgICAgICAgICAgc3RhcnQ6IGkkMSxcbiAgICAgICAgICAgIGVuZDogc3RyaW5nLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAvLyAzLjMuMSBQMi1QMzogRGV0ZXJtaW5lIHRoZSBwYXJhZ3JhcGggbGV2ZWxcbiAgICAgICAgICAgIGxldmVsOiBiYXNlRGlyZWN0aW9uID09PSAncnRsJyA/IDEgOiBiYXNlRGlyZWN0aW9uID09PSAnbHRyJyA/IDAgOiBkZXRlcm1pbmVBdXRvRW1iZWRMZXZlbChpJDEsIGZhbHNlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyVHlwZXNbaSQxXSAmIFRZUEVfQikge1xuICAgICAgICAgIHBhcmFncmFwaC5lbmQgPSBpJDE7XG4gICAgICAgICAgcGFyYWdyYXBoID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgRk9STUFUVElOR19UWVBFUyA9IFRZUEVfUkxFIHwgVFlQRV9MUkUgfCBUWVBFX1JMTyB8IFRZUEVfTFJPIHwgSVNPTEFURV9JTklUX1RZUEVTIHwgVFlQRV9QREkgfCBUWVBFX1BERiB8IFRZUEVfQjtcbiAgICAgIHZhciBuZXh0RXZlbiA9IGZ1bmN0aW9uIChuKSB7IHJldHVybiBuICsgKChuICYgMSkgPyAxIDogMik7IH07XG4gICAgICB2YXIgbmV4dE9kZCA9IGZ1bmN0aW9uIChuKSB7IHJldHVybiBuICsgKChuICYgMSkgPyAyIDogMSk7IH07XG5cbiAgICAgIC8vIEV2ZXJ5dGhpbmcgZnJvbSBoZXJlIG9uIHdpbGwgb3BlcmF0ZSBwZXIgcGFyYWdyYXBoLlxuICAgICAgZm9yICh2YXIgcGFyYUlkeCA9IDA7IHBhcmFJZHggPCBwYXJhZ3JhcGhzLmxlbmd0aDsgcGFyYUlkeCsrKSB7XG4gICAgICAgIHBhcmFncmFwaCA9IHBhcmFncmFwaHNbcGFyYUlkeF07XG4gICAgICAgIHZhciBzdGF0dXNTdGFjayA9IFt7XG4gICAgICAgICAgX2xldmVsOiBwYXJhZ3JhcGgubGV2ZWwsXG4gICAgICAgICAgX292ZXJyaWRlOiAwLCAvLzA9bmV1dHJhbCwgMT1MLCAyPVJcbiAgICAgICAgICBfaXNvbGF0ZTogMCAvL2Jvb2xcbiAgICAgICAgfV07XG4gICAgICAgIHZhciBzdGFja1RvcCA9ICh2b2lkIDApO1xuICAgICAgICB2YXIgb3ZlcmZsb3dJc29sYXRlQ291bnQgPSAwO1xuICAgICAgICB2YXIgb3ZlcmZsb3dFbWJlZGRpbmdDb3VudCA9IDA7XG4gICAgICAgIHZhciB2YWxpZElzb2xhdGVDb3VudCA9IDA7XG4gICAgICAgIGNoYXJUeXBlQ291bnRzLmNsZWFyKCk7XG5cbiAgICAgICAgLy8gPT09IDMuMy4yIEV4cGxpY2l0IExldmVscyBhbmQgRGlyZWN0aW9ucyA9PT1cbiAgICAgICAgZm9yICh2YXIgaSQyID0gcGFyYWdyYXBoLnN0YXJ0OyBpJDIgPD0gcGFyYWdyYXBoLmVuZDsgaSQyKyspIHtcbiAgICAgICAgICB2YXIgY2hhclR5cGUgPSBjaGFyVHlwZXNbaSQyXTtcbiAgICAgICAgICBzdGFja1RvcCA9IHN0YXR1c1N0YWNrW3N0YXR1c1N0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgLy8gU2V0IGluaXRpYWwgY291bnRzXG4gICAgICAgICAgY2hhclR5cGVDb3VudHMuc2V0KGNoYXJUeXBlLCAoY2hhclR5cGVDb3VudHMuZ2V0KGNoYXJUeXBlKSB8fCAwKSArIDEpO1xuICAgICAgICAgIGlmIChjaGFyVHlwZSAmIE5FVVRSQUxfSVNPTEFURV9UWVBFUykge1xuICAgICAgICAgICAgY2hhclR5cGVDb3VudHMuc2V0KE5FVVRSQUxfSVNPTEFURV9UWVBFUywgKGNoYXJUeXBlQ291bnRzLmdldChORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHx8IDApICsgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRXhwbGljaXQgRW1iZWRkaW5nczogMy4zLjIgWDIgLSBYM1xuICAgICAgICAgIGlmIChjaGFyVHlwZSAmIEZPUk1BVFRJTkdfVFlQRVMpIHsgLy9wcmVmaWx0ZXIgYWxsIGZvcm1hdHRlcnNcbiAgICAgICAgICAgIGlmIChjaGFyVHlwZSAmIChUWVBFX1JMRSB8IFRZUEVfTFJFKSkge1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDJdID0gc3RhY2tUb3AuX2xldmVsOyAvLyA1LjJcbiAgICAgICAgICAgICAgdmFyIGxldmVsID0gKGNoYXJUeXBlID09PSBUWVBFX1JMRSA/IG5leHRPZGQgOiBuZXh0RXZlbikoc3RhY2tUb3AuX2xldmVsKTtcbiAgICAgICAgICAgICAgaWYgKGxldmVsIDw9IE1BWF9ERVBUSCAmJiAhb3ZlcmZsb3dJc29sYXRlQ291bnQgJiYgIW92ZXJmbG93RW1iZWRkaW5nQ291bnQpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNTdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIF9sZXZlbDogbGV2ZWwsXG4gICAgICAgICAgICAgICAgICBfb3ZlcnJpZGU6IDAsXG4gICAgICAgICAgICAgICAgICBfaXNvbGF0ZTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFvdmVyZmxvd0lzb2xhdGVDb3VudCkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93RW1iZWRkaW5nQ291bnQrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeHBsaWNpdCBPdmVycmlkZXM6IDMuMy4yIFg0IC0gWDVcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJUeXBlICYgKFRZUEVfUkxPIHwgVFlQRV9MUk8pKSB7XG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMl0gPSBzdGFja1RvcC5fbGV2ZWw7IC8vIDUuMlxuICAgICAgICAgICAgICB2YXIgbGV2ZWwkMSA9IChjaGFyVHlwZSA9PT0gVFlQRV9STE8gPyBuZXh0T2RkIDogbmV4dEV2ZW4pKHN0YWNrVG9wLl9sZXZlbCk7XG4gICAgICAgICAgICAgIGlmIChsZXZlbCQxIDw9IE1BWF9ERVBUSCAmJiAhb3ZlcmZsb3dJc29sYXRlQ291bnQgJiYgIW92ZXJmbG93RW1iZWRkaW5nQ291bnQpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNTdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIF9sZXZlbDogbGV2ZWwkMSxcbiAgICAgICAgICAgICAgICAgIF9vdmVycmlkZTogKGNoYXJUeXBlICYgVFlQRV9STE8pID8gVFlQRV9SIDogVFlQRV9MLFxuICAgICAgICAgICAgICAgICAgX2lzb2xhdGU6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3ZlcmZsb3dJc29sYXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0VtYmVkZGluZ0NvdW50Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSXNvbGF0ZXM6IDMuMy4yIFg1YSAtIFg1Y1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hhclR5cGUgJiBJU09MQVRFX0lOSVRfVFlQRVMpIHtcbiAgICAgICAgICAgICAgLy8gWDVjIC0gRlNJIGJlY29tZXMgZWl0aGVyIFJMSSBvciBMUklcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlICYgVFlQRV9GU0kpIHtcbiAgICAgICAgICAgICAgICBjaGFyVHlwZSA9IGRldGVybWluZUF1dG9FbWJlZExldmVsKGkkMiArIDEsIHRydWUpID09PSAxID8gVFlQRV9STEkgOiBUWVBFX0xSSTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMl0gPSBzdGFja1RvcC5fbGV2ZWw7XG4gICAgICAgICAgICAgIGlmIChzdGFja1RvcC5fb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShpJDIsIHN0YWNrVG9wLl9vdmVycmlkZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGxldmVsJDIgPSAoY2hhclR5cGUgPT09IFRZUEVfUkxJID8gbmV4dE9kZCA6IG5leHRFdmVuKShzdGFja1RvcC5fbGV2ZWwpO1xuICAgICAgICAgICAgICBpZiAobGV2ZWwkMiA8PSBNQVhfREVQVEggJiYgb3ZlcmZsb3dJc29sYXRlQ291bnQgPT09IDAgJiYgb3ZlcmZsb3dFbWJlZGRpbmdDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhbGlkSXNvbGF0ZUNvdW50Kys7XG4gICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICBfbGV2ZWw6IGxldmVsJDIsXG4gICAgICAgICAgICAgICAgICBfb3ZlcnJpZGU6IDAsXG4gICAgICAgICAgICAgICAgICBfaXNvbGF0ZTogMSxcbiAgICAgICAgICAgICAgICAgIF9pc29sSW5pdEluZGV4OiBpJDJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0lzb2xhdGVDb3VudCsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRlcm1pbmF0aW5nIElzb2xhdGVzOiAzLjMuMiBYNmFcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJUeXBlICYgVFlQRV9QREkpIHtcbiAgICAgICAgICAgICAgaWYgKG92ZXJmbG93SXNvbGF0ZUNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93SXNvbGF0ZUNvdW50LS07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsaWRJc29sYXRlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dFbWJlZGRpbmdDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCFzdGF0dXNTdGFja1tzdGF0dXNTdGFjay5sZW5ndGggLSAxXS5faXNvbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFkZCB0byBpc29sYXRpb24gcGFpcnMgYmlkaXJlY3Rpb25hbCBtYXBwaW5nOlxuICAgICAgICAgICAgICAgIHZhciBpc29sSW5pdEluZGV4ID0gc3RhdHVzU3RhY2tbc3RhdHVzU3RhY2subGVuZ3RoIC0gMV0uX2lzb2xJbml0SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYgKGlzb2xJbml0SW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgaXNvbGF0aW9uUGFpcnMuc2V0KGlzb2xJbml0SW5kZXgsIGkkMik7XG4gICAgICAgICAgICAgICAgICBpc29sYXRpb25QYWlycy5zZXQoaSQyLCBpc29sSW5pdEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdHVzU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgdmFsaWRJc29sYXRlQ291bnQtLTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGFja1RvcCA9IHN0YXR1c1N0YWNrW3N0YXR1c1N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDJdID0gc3RhY2tUb3AuX2xldmVsO1xuICAgICAgICAgICAgICBpZiAoc3RhY2tUb3AuX292ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQyLCBzdGFja1RvcC5fb3ZlcnJpZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLy8gVGVybWluYXRpbmcgRW1iZWRkaW5ncyBhbmQgT3ZlcnJpZGVzOiAzLjMuMiBYN1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hhclR5cGUgJiBUWVBFX1BERikge1xuICAgICAgICAgICAgICBpZiAob3ZlcmZsb3dJc29sYXRlQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAob3ZlcmZsb3dFbWJlZGRpbmdDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIG92ZXJmbG93RW1iZWRkaW5nQ291bnQtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzdGFja1RvcC5faXNvbGF0ZSAmJiBzdGF0dXNTdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICBzdGF0dXNTdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIHN0YWNrVG9wID0gc3RhdHVzU3RhY2tbc3RhdHVzU3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2kkMl0gPSBzdGFja1RvcC5fbGV2ZWw7IC8vIDUuMlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbmQgb2YgUGFyYWdyYXBoOiAzLjMuMiBYOFxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhclR5cGUgJiBUWVBFX0IpIHtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQyXSA9IHBhcmFncmFwaC5sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBOb24tZm9ybWF0dGluZyBjaGFyYWN0ZXJzOiAzLjMuMiBYNlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQyXSA9IHN0YWNrVG9wLl9sZXZlbDtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgZXhjbHVzaW9uIG9mIEJOIHNlZW1zIHRvIGdvIGFnYWluc3Qgd2hhdCBzZWN0aW9uIDUuMiBzYXlzLCBidXQgaXMgcmVxdWlyZWQgZm9yIHRlc3QgcGFzc2FnZVxuICAgICAgICAgICAgaWYgKHN0YWNrVG9wLl9vdmVycmlkZSAmJiBjaGFyVHlwZSAhPT0gVFlQRV9CTikge1xuICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShpJDIsIHN0YWNrVG9wLl9vdmVycmlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gPT09IDMuMy4zIFByZXBhcmF0aW9ucyBmb3IgSW1wbGljaXQgUHJvY2Vzc2luZyA9PT1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIFJMRSwgTFJFLCBSTE8sIExSTywgUERGLCBhbmQgQk4gY2hhcmFjdGVyczogMy4zLjMgWDlcbiAgICAgICAgLy8gTm90ZTogRHVlIHRvIHNlY3Rpb24gNS4yLCB3ZSB3b24ndCByZW1vdmUgdGhlbSwgYnV0IHdlJ2xsIHVzZSB0aGUgQk5fTElLRV9UWVBFUyBiaXRzZXQgdG9cbiAgICAgICAgLy8gZWFzaWx5IGlnbm9yZSB0aGVtIGFsbCBmcm9tIGhlcmUgb24gb3V0LlxuXG4gICAgICAgIC8vIDMuMy4zIFgxMFxuICAgICAgICAvLyBDb21wdXRlIHRoZSBzZXQgb2YgaXNvbGF0aW5nIHJ1biBzZXF1ZW5jZXMgYXMgc3BlY2lmaWVkIGJ5IEJEMTNcbiAgICAgICAgdmFyIGxldmVsUnVucyA9IFtdO1xuICAgICAgICB2YXIgY3VycmVudFJ1biA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkkMyA9IHBhcmFncmFwaC5zdGFydDsgaSQzIDw9IHBhcmFncmFwaC5lbmQ7IGkkMysrKSB7XG4gICAgICAgICAgdmFyIGNoYXJUeXBlJDEgPSBjaGFyVHlwZXNbaSQzXTtcbiAgICAgICAgICBpZiAoIShjaGFyVHlwZSQxICYgQk5fTElLRV9UWVBFUykpIHtcbiAgICAgICAgICAgIHZhciBsdmwgPSBlbWJlZExldmVsc1tpJDNdO1xuICAgICAgICAgICAgdmFyIGlzSXNvbEluaXQgPSBjaGFyVHlwZSQxICYgSVNPTEFURV9JTklUX1RZUEVTO1xuICAgICAgICAgICAgdmFyIGlzUERJID0gY2hhclR5cGUkMSA9PT0gVFlQRV9QREk7XG4gICAgICAgICAgICBpZiAoY3VycmVudFJ1biAmJiBsdmwgPT09IGN1cnJlbnRSdW4uX2xldmVsKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRSdW4uX2VuZCA9IGkkMztcbiAgICAgICAgICAgICAgY3VycmVudFJ1bi5fZW5kc1dpdGhJc29sSW5pdCA9IGlzSXNvbEluaXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZXZlbFJ1bnMucHVzaChjdXJyZW50UnVuID0ge1xuICAgICAgICAgICAgICAgIF9zdGFydDogaSQzLFxuICAgICAgICAgICAgICAgIF9lbmQ6IGkkMyxcbiAgICAgICAgICAgICAgICBfbGV2ZWw6IGx2bCxcbiAgICAgICAgICAgICAgICBfc3RhcnRzV2l0aFBESTogaXNQREksXG4gICAgICAgICAgICAgICAgX2VuZHNXaXRoSXNvbEluaXQ6IGlzSXNvbEluaXRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBpc29sYXRpbmdSdW5TZXFzID0gW107IC8vIFt7c2VxSW5kaWNlczogW10sIHNvc1R5cGU6IEx8UiwgZW9zVHlwZTogTHxSfV1cbiAgICAgICAgZm9yICh2YXIgcnVuSWR4ID0gMDsgcnVuSWR4IDwgbGV2ZWxSdW5zLmxlbmd0aDsgcnVuSWR4KyspIHtcbiAgICAgICAgICB2YXIgcnVuID0gbGV2ZWxSdW5zW3J1bklkeF07XG4gICAgICAgICAgaWYgKCFydW4uX3N0YXJ0c1dpdGhQREkgfHwgKHJ1bi5fc3RhcnRzV2l0aFBESSAmJiAhaXNvbGF0aW9uUGFpcnMuaGFzKHJ1bi5fc3RhcnQpKSkge1xuICAgICAgICAgICAgdmFyIHNlcVJ1bnMgPSBbY3VycmVudFJ1biA9IHJ1bl07XG4gICAgICAgICAgICBmb3IgKHZhciBwZGlJbmRleCA9ICh2b2lkIDApOyBjdXJyZW50UnVuICYmIGN1cnJlbnRSdW4uX2VuZHNXaXRoSXNvbEluaXQgJiYgKHBkaUluZGV4ID0gaXNvbGF0aW9uUGFpcnMuZ2V0KGN1cnJlbnRSdW4uX2VuZCkpICE9IG51bGw7KSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkNCA9IHJ1bklkeCArIDE7IGkkNCA8IGxldmVsUnVucy5sZW5ndGg7IGkkNCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsUnVuc1tpJDRdLl9zdGFydCA9PT0gcGRpSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgIHNlcVJ1bnMucHVzaChjdXJyZW50UnVuID0gbGV2ZWxSdW5zW2kkNF0pO1xuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJ1aWxkIGZsYXQgbGlzdCBvZiBpbmRpY2VzIGFjcm9zcyBhbGwgcnVuczpcbiAgICAgICAgICAgIHZhciBzZXFJbmRpY2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpJDUgPSAwOyBpJDUgPCBzZXFSdW5zLmxlbmd0aDsgaSQ1KyspIHtcbiAgICAgICAgICAgICAgdmFyIHJ1biQxID0gc2VxUnVuc1tpJDVdO1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcnVuJDEuX3N0YXJ0OyBqIDw9IHJ1biQxLl9lbmQ7IGorKykge1xuICAgICAgICAgICAgICAgIHNlcUluZGljZXMucHVzaChqKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBzb3MvZW9zIHR5cGVzOlxuICAgICAgICAgICAgdmFyIGZpcnN0TGV2ZWwgPSBlbWJlZExldmVsc1tzZXFJbmRpY2VzWzBdXTtcbiAgICAgICAgICAgIHZhciBwcmV2TGV2ZWwgPSBwYXJhZ3JhcGgubGV2ZWw7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDYgPSBzZXFJbmRpY2VzWzBdIC0gMTsgaSQ2ID49IDA7IGkkNi0tKSB7XG4gICAgICAgICAgICAgIGlmICghKGNoYXJUeXBlc1tpJDZdICYgQk5fTElLRV9UWVBFUykpIHsgLy81LjJcbiAgICAgICAgICAgICAgICBwcmV2TGV2ZWwgPSBlbWJlZExldmVsc1tpJDZdO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBzZXFJbmRpY2VzW3NlcUluZGljZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB2YXIgbGFzdExldmVsID0gZW1iZWRMZXZlbHNbbGFzdEluZGV4XTtcbiAgICAgICAgICAgIHZhciBuZXh0TGV2ZWwgPSBwYXJhZ3JhcGgubGV2ZWw7XG4gICAgICAgICAgICBpZiAoIShjaGFyVHlwZXNbbGFzdEluZGV4XSAmIElTT0xBVEVfSU5JVF9UWVBFUykpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQ3ID0gbGFzdEluZGV4ICsgMTsgaSQ3IDw9IHBhcmFncmFwaC5lbmQ7IGkkNysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoY2hhclR5cGVzW2kkN10gJiBCTl9MSUtFX1RZUEVTKSkgeyAvLzUuMlxuICAgICAgICAgICAgICAgICAgbmV4dExldmVsID0gZW1iZWRMZXZlbHNbaSQ3XTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc29sYXRpbmdSdW5TZXFzLnB1c2goe1xuICAgICAgICAgICAgICBfc2VxSW5kaWNlczogc2VxSW5kaWNlcyxcbiAgICAgICAgICAgICAgX3Nvc1R5cGU6IE1hdGgubWF4KHByZXZMZXZlbCwgZmlyc3RMZXZlbCkgJSAyID8gVFlQRV9SIDogVFlQRV9MLFxuICAgICAgICAgICAgICBfZW9zVHlwZTogTWF0aC5tYXgobmV4dExldmVsLCBsYXN0TGV2ZWwpICUgMiA/IFRZUEVfUiA6IFRZUEVfTFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIG5leHQgc3RlcHMgYXJlIGRvbmUgcGVyIGlzb2xhdGluZyBydW4gc2VxdWVuY2VcbiAgICAgICAgZm9yICh2YXIgc2VxSWR4ID0gMDsgc2VxSWR4IDwgaXNvbGF0aW5nUnVuU2Vxcy5sZW5ndGg7IHNlcUlkeCsrKSB7XG4gICAgICAgICAgdmFyIHJlZiA9IGlzb2xhdGluZ1J1blNlcXNbc2VxSWR4XTtcbiAgICAgICAgICB2YXIgc2VxSW5kaWNlcyQxID0gcmVmLl9zZXFJbmRpY2VzO1xuICAgICAgICAgIHZhciBzb3NUeXBlID0gcmVmLl9zb3NUeXBlO1xuICAgICAgICAgIHZhciBlb3NUeXBlID0gcmVmLl9lb3NUeXBlO1xuXG4gICAgICAgICAgLy8gPT09IDMuMy40IFJlc29sdmluZyBXZWFrIFR5cGVzID09PVxuXG4gICAgICAgICAgLy8gVzEgKyA1LjIuIFNlYXJjaCBiYWNrd2FyZCBmcm9tIGVhY2ggTlNNIHRvIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIGlzb2xhdGluZyBydW4gc2VxdWVuY2Ugd2hvc2VcbiAgICAgICAgICAvLyBiaWRpcmVjdGlvbmFsIHR5cGUgaXMgbm90IEJOLCBhbmQgc2V0IHRoZSBOU00gdG8gT04gaWYgaXQgaXMgYW4gaXNvbGF0ZSBpbml0aWF0b3Igb3IgUERJLCBhbmQgdG8gaXRzXG4gICAgICAgICAgLy8gdHlwZSBvdGhlcndpc2UuIElmIHRoZSBOU00gaXMgdGhlIGZpcnN0IG5vbi1CTiBjaGFyYWN0ZXIsIGNoYW5nZSB0aGUgTlNNIHRvIHRoZSB0eXBlIG9mIHNvcy5cbiAgICAgICAgICBpZiAoY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfTlNNKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGkkOCA9IHNlcUluZGljZXMkMVtzaV07XG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQ4XSAmIFRZUEVfTlNNKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZUeXBlID0gc29zVHlwZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaiA9IHNpIC0gMTsgc2ogPj0gMDsgc2otLSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCEoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzal1dICYgQk5fTElLRV9UWVBFUykpIHsgLy81LjIgc2NhbiBiYWNrIHRvIGZpcnN0IG5vbi1CTlxuICAgICAgICAgICAgICAgICAgICBwcmV2VHlwZSA9IGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2pdXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQ4LCAocHJldlR5cGUgJiAoSVNPTEFURV9JTklUX1RZUEVTIHwgVFlQRV9QREkpKSA/IFRZUEVfT04gOiBwcmV2VHlwZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXMi4gU2VhcmNoIGJhY2t3YXJkIGZyb20gZWFjaCBpbnN0YW5jZSBvZiBhIEV1cm9wZWFuIG51bWJlciB1bnRpbCB0aGUgZmlyc3Qgc3Ryb25nIHR5cGUgKFIsIEwsIEFMLCBvciBzb3MpXG4gICAgICAgICAgLy8gaXMgZm91bmQuIElmIGFuIEFMIGlzIGZvdW5kLCBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIEV1cm9wZWFuIG51bWJlciB0byBBcmFiaWMgbnVtYmVyLlxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9FTikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHNpJDEgPSAwOyBzaSQxIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkMSsrKSB7XG4gICAgICAgICAgICAgIHZhciBpJDkgPSBzZXFJbmRpY2VzJDFbc2kkMV07XG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQ5XSAmIFRZUEVfRU4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaiQxID0gc2kkMSAtIDE7IHNqJDEgPj0gLTE7IHNqJDEtLSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHByZXZDaGFyVHlwZSA9IHNqJDEgPT09IC0xID8gc29zVHlwZSA6IGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okMV1dO1xuICAgICAgICAgICAgICAgICAgaWYgKHByZXZDaGFyVHlwZSAmIFNUUk9OR19UWVBFUykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldkNoYXJUeXBlID09PSBUWVBFX0FMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQ5LCBUWVBFX0FOKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFczLiBDaGFuZ2UgYWxsIEFMcyB0byBSXG4gICAgICAgICAgaWYgKGNoYXJUeXBlQ291bnRzLmdldChUWVBFX0FMKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgc2kkMiA9IDA7IHNpJDIgPCBzZXFJbmRpY2VzJDEubGVuZ3RoOyBzaSQyKyspIHtcbiAgICAgICAgICAgICAgdmFyIGkkMTAgPSBzZXFJbmRpY2VzJDFbc2kkMl07XG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQxMF0gJiBUWVBFX0FMKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQxMCwgVFlQRV9SKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFc0LiBBIHNpbmdsZSBFdXJvcGVhbiBzZXBhcmF0b3IgYmV0d2VlbiB0d28gRXVyb3BlYW4gbnVtYmVycyBjaGFuZ2VzIHRvIGEgRXVyb3BlYW4gbnVtYmVyLiBBIHNpbmdsZSBjb21tb25cbiAgICAgICAgICAvLyBzZXBhcmF0b3IgYmV0d2VlbiB0d28gbnVtYmVycyBvZiB0aGUgc2FtZSB0eXBlIGNoYW5nZXMgdG8gdGhhdCB0eXBlLlxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9FUykgfHwgY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQzID0gMTsgc2kkMyA8IHNlcUluZGljZXMkMS5sZW5ndGggLSAxOyBzaSQzKyspIHtcbiAgICAgICAgICAgICAgdmFyIGkkMTEgPSBzZXFJbmRpY2VzJDFbc2kkM107XG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQxMV0gJiAoVFlQRV9FUyB8IFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZUeXBlJDEgPSAwLCBuZXh0VHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2okMiA9IHNpJDMgLSAxOyBzaiQyID49IDA7IHNqJDItLSkge1xuICAgICAgICAgICAgICAgICAgcHJldlR5cGUkMSA9IGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okMl1dO1xuICAgICAgICAgICAgICAgICAgaWYgKCEocHJldlR5cGUkMSAmIEJOX0xJS0VfVFlQRVMpKSB7IC8vNS4yXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDMgPSBzaSQzICsgMTsgc2okMyA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNqJDMrKykge1xuICAgICAgICAgICAgICAgICAgbmV4dFR5cGUgPSBjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqJDNdXTtcbiAgICAgICAgICAgICAgICAgIGlmICghKG5leHRUeXBlICYgQk5fTElLRV9UWVBFUykpIHsgLy81LjJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZUeXBlJDEgPT09IG5leHRUeXBlICYmIChjaGFyVHlwZXNbaSQxMV0gPT09IFRZUEVfRVMgPyBwcmV2VHlwZSQxID09PSBUWVBFX0VOIDogKHByZXZUeXBlJDEgJiAoVFlQRV9FTiB8IFRZUEVfQU4pKSkpIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKGkkMTEsIHByZXZUeXBlJDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFc1LiBBIHNlcXVlbmNlIG9mIEV1cm9wZWFuIHRlcm1pbmF0b3JzIGFkamFjZW50IHRvIEV1cm9wZWFuIG51bWJlcnMgY2hhbmdlcyB0byBhbGwgRXVyb3BlYW4gbnVtYmVycy5cbiAgICAgICAgICBpZiAoY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfRU4pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQ0ID0gMDsgc2kkNCA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDQrKykge1xuICAgICAgICAgICAgICB2YXIgaSQxMiA9IHNlcUluZGljZXMkMVtzaSQ0XTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDEyXSAmIFRZUEVfRU4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaiQ0ID0gc2kkNCAtIDE7IHNqJDQgPj0gMCAmJiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaiQ0XV0gJiAoVFlQRV9FVCB8IEJOX0xJS0VfVFlQRVMpKTsgc2okNC0tKSB7XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VDaGFyVHlwZShzZXFJbmRpY2VzJDFbc2okNF0sIFRZUEVfRU4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaiQ1ID0gc2kkNCArIDE7IHNqJDUgPCBzZXFJbmRpY2VzJDEubGVuZ3RoICYmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqJDVdXSAmIChUWVBFX0VUIHwgQk5fTElLRV9UWVBFUykpOyBzaiQ1KyspIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKHNlcUluZGljZXMkMVtzaiQ1XSwgVFlQRV9FTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVzYuIE90aGVyd2lzZSwgc2VwYXJhdG9ycyBhbmQgdGVybWluYXRvcnMgY2hhbmdlIHRvIE90aGVyIE5ldXRyYWwuXG4gICAgICAgICAgaWYgKGNoYXJUeXBlQ291bnRzLmdldChUWVBFX0VUKSB8fCBjaGFyVHlwZUNvdW50cy5nZXQoVFlQRV9FUykgfHwgY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQ1ID0gMDsgc2kkNSA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDUrKykge1xuICAgICAgICAgICAgICB2YXIgaSQxMyA9IHNlcUluZGljZXMkMVtzaSQ1XTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tpJDEzXSAmIChUWVBFX0VUIHwgVFlQRV9FUyB8IFRZUEVfQ1MpKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoaSQxMywgVFlQRV9PTik7XG4gICAgICAgICAgICAgICAgLy8gNS4yIHRyYW5zZm9ybSBhZGphY2VudCBCTnMgdG9vOlxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDYgPSBzaSQ1IC0gMTsgc2okNiA+PSAwICYmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NqJDZdXSAmIEJOX0xJS0VfVFlQRVMpOyBzaiQ2LS0pIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKHNlcUluZGljZXMkMVtzaiQ2XSwgVFlQRV9PTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNqJDcgPSBzaSQ1ICsgMTsgc2okNyA8IHNlcUluZGljZXMkMS5sZW5ndGggJiYgKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2okN11dICYgQk5fTElLRV9UWVBFUyk7IHNqJDcrKykge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlQ2hhclR5cGUoc2VxSW5kaWNlcyQxW3NqJDddLCBUWVBFX09OKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXNy4gU2VhcmNoIGJhY2t3YXJkIGZyb20gZWFjaCBpbnN0YW5jZSBvZiBhIEV1cm9wZWFuIG51bWJlciB1bnRpbCB0aGUgZmlyc3Qgc3Ryb25nIHR5cGUgKFIsIEwsIG9yIHNvcylcbiAgICAgICAgICAvLyBpcyBmb3VuZC4gSWYgYW4gTCBpcyBmb3VuZCwgdGhlbiBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIEV1cm9wZWFuIG51bWJlciB0byBMLlxuICAgICAgICAgIC8vIE5PVEU6IGltcGxlbWVudGVkIGluIHNpbmdsZSBmb3J3YXJkIHBhc3MgZm9yIGVmZmljaWVuY3lcbiAgICAgICAgICBpZiAoY2hhclR5cGVDb3VudHMuZ2V0KFRZUEVfRU4pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzaSQ2ID0gMCwgcHJldlN0cm9uZ1R5cGUgPSBzb3NUeXBlOyBzaSQ2IDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kkNisrKSB7XG4gICAgICAgICAgICAgIHZhciBpJDE0ID0gc2VxSW5kaWNlcyQxW3NpJDZdO1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNoYXJUeXBlc1tpJDE0XTtcbiAgICAgICAgICAgICAgaWYgKHR5cGUgJiBUWVBFX0VOKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTdHJvbmdUeXBlID09PSBUWVBFX0wpIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZUNoYXJUeXBlKGkkMTQsIFRZUEVfTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgJiBTVFJPTkdfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICBwcmV2U3Ryb25nVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyA9PT0gMy4zLjUgUmVzb2x2aW5nIE5ldXRyYWwgYW5kIElzb2xhdGUgRm9ybWF0dGluZyBUeXBlcyA9PT1cblxuICAgICAgICAgIGlmIChjaGFyVHlwZUNvdW50cy5nZXQoTkVVVFJBTF9JU09MQVRFX1RZUEVTKSkge1xuICAgICAgICAgICAgLy8gTjAuIFByb2Nlc3MgYnJhY2tldCBwYWlycyBpbiBhbiBpc29sYXRpbmcgcnVuIHNlcXVlbmNlIHNlcXVlbnRpYWxseSBpbiB0aGUgbG9naWNhbCBvcmRlciBvZiB0aGUgdGV4dFxuICAgICAgICAgICAgLy8gcG9zaXRpb25zIG9mIHRoZSBvcGVuaW5nIHBhaXJlZCBicmFja2V0cyB1c2luZyB0aGUgbG9naWMgZ2l2ZW4gYmVsb3cuIFdpdGhpbiB0aGlzIHNjb3BlLCBiaWRpcmVjdGlvbmFsXG4gICAgICAgICAgICAvLyB0eXBlcyBFTiBhbmQgQU4gYXJlIHRyZWF0ZWQgYXMgUi5cbiAgICAgICAgICAgIHZhciBSX1RZUEVTX0ZPUl9OX1NURVBTID0gKFRZUEVfUiB8IFRZUEVfRU4gfCBUWVBFX0FOKTtcbiAgICAgICAgICAgIHZhciBTVFJPTkdfVFlQRVNfRk9SX05fU1RFUFMgPSBSX1RZUEVTX0ZPUl9OX1NURVBTIHwgVFlQRV9MO1xuXG4gICAgICAgICAgICAvLyAqIElkZW50aWZ5IHRoZSBicmFja2V0IHBhaXJzIGluIHRoZSBjdXJyZW50IGlzb2xhdGluZyBydW4gc2VxdWVuY2UgYWNjb3JkaW5nIHRvIEJEMTYuXG4gICAgICAgICAgICB2YXIgYnJhY2tldFBhaXJzID0gW107XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBvcGVuZXJTdGFjayA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKHZhciBzaSQ3ID0gMDsgc2kkNyA8IHNlcUluZGljZXMkMS5sZW5ndGg7IHNpJDcrKykge1xuICAgICAgICAgICAgICAgIC8vIE5PVEU6IGZvciBhbnkgcG90ZW50aWFsIGJyYWNrZXQgY2hhcmFjdGVyIHdlIGFsc28gdGVzdCB0aGF0IGl0IHN0aWxsIGNhcnJpZXMgYSBOSVxuICAgICAgICAgICAgICAgIC8vIHR5cGUsIGFzIHRoYXQgbWF5IGhhdmUgYmVlbiBjaGFuZ2VkIGVhcmxpZXIuIFRoaXMgZG9lc24ndCBzZWVtIHRvIGJlIGV4cGxpY2l0bHlcbiAgICAgICAgICAgICAgICAvLyBjYWxsZWQgb3V0IGluIHRoZSBzcGVjLCBidXQgaXMgcmVxdWlyZWQgZm9yIHBhc3NhZ2Ugb2YgY2VydGFpbiB0ZXN0cy5cbiAgICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaSQ3XV0gJiBORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjaGFyID0gc3RyaW5nW3NlcUluZGljZXMkMVtzaSQ3XV07XG4gICAgICAgICAgICAgICAgICB2YXIgb3Bwb3NpdGVCcmFja2V0ID0gKHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAvLyBPcGVuaW5nIGJyYWNrZXRcbiAgICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9DbG9zaW5nQnJhY2tldChjaGFyKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVyU3RhY2subGVuZ3RoIDwgNjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvcGVuZXJTdGFjay5wdXNoKHsgY2hhcjogY2hhciwgc2VxSW5kZXg6IHNpJDcgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQ2xvc2luZyBicmFja2V0XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmICgob3Bwb3NpdGVCcmFja2V0ID0gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQoY2hhcikpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0YWNrSWR4ID0gb3BlbmVyU3RhY2subGVuZ3RoIC0gMTsgc3RhY2tJZHggPj0gMDsgc3RhY2tJZHgtLSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0NoYXIgPSBvcGVuZXJTdGFja1tzdGFja0lkeF0uY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2tDaGFyID09PSBvcHBvc2l0ZUJyYWNrZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrQ2hhciA9PT0gY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQoZ2V0Q2Fub25pY2FsQnJhY2tldChjaGFyKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb0Nsb3NpbmdCcmFja2V0KGdldENhbm9uaWNhbEJyYWNrZXQoc3RhY2tDaGFyKSkgPT09IGNoYXJcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYWNrZXRQYWlycy5wdXNoKFtvcGVuZXJTdGFja1tzdGFja0lkeF0uc2VxSW5kZXgsIHNpJDddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lclN0YWNrLmxlbmd0aCA9IHN0YWNrSWR4OyAvL3BvcCB0aGUgbWF0Y2hpbmcgYnJhY2tldCBhbmQgYWxsIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJhY2tldFBhaXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICogRm9yIGVhY2ggYnJhY2tldC1wYWlyIGVsZW1lbnQgaW4gdGhlIGxpc3Qgb2YgcGFpcnMgb2YgdGV4dCBwb3NpdGlvbnNcbiAgICAgICAgICAgIGZvciAodmFyIHBhaXJJZHggPSAwOyBwYWlySWR4IDwgYnJhY2tldFBhaXJzLmxlbmd0aDsgcGFpcklkeCsrKSB7XG4gICAgICAgICAgICAgIHZhciByZWYkMSA9IGJyYWNrZXRQYWlyc1twYWlySWR4XTtcbiAgICAgICAgICAgICAgdmFyIG9wZW5TZXFJZHggPSByZWYkMVswXTtcbiAgICAgICAgICAgICAgdmFyIGNsb3NlU2VxSWR4ID0gcmVmJDFbMV07XG4gICAgICAgICAgICAgIC8vIGEuIEluc3BlY3QgdGhlIGJpZGlyZWN0aW9uYWwgdHlwZXMgb2YgdGhlIGNoYXJhY3RlcnMgZW5jbG9zZWQgd2l0aGluIHRoZSBicmFja2V0IHBhaXIuXG4gICAgICAgICAgICAgIC8vIGIuIElmIGFueSBzdHJvbmcgdHlwZSAoZWl0aGVyIEwgb3IgUikgbWF0Y2hpbmcgdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24gaXMgZm91bmQsIHNldCB0aGUgdHlwZSBmb3IgYm90aFxuICAgICAgICAgICAgICAvLyBicmFja2V0cyBpbiB0aGUgcGFpciB0byBtYXRjaCB0aGUgZW1iZWRkaW5nIGRpcmVjdGlvbi5cbiAgICAgICAgICAgICAgdmFyIGZvdW5kU3Ryb25nVHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgdXNlU3Ryb25nVHlwZSA9IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyIHNpJDggPSBvcGVuU2VxSWR4ICsgMTsgc2kkOCA8IGNsb3NlU2VxSWR4OyBzaSQ4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaSQxNSA9IHNlcUluZGljZXMkMVtzaSQ4XTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW2kkMTVdICYgU1RST05HX1RZUEVTX0ZPUl9OX1NURVBTKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZFN0cm9uZ1R5cGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgdmFyIGxyID0gKGNoYXJUeXBlc1tpJDE1XSAmIFJfVFlQRVNfRk9SX05fU1RFUFMpID8gVFlQRV9SIDogVFlQRV9MO1xuICAgICAgICAgICAgICAgICAgaWYgKGxyID09PSBnZXRFbWJlZERpcmVjdGlvbihpJDE1KSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VTdHJvbmdUeXBlID0gbHI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGMuIE90aGVyd2lzZSwgaWYgdGhlcmUgaXMgYSBzdHJvbmcgdHlwZSBpdCBtdXN0IGJlIG9wcG9zaXRlIHRoZSBlbWJlZGRpbmcgZGlyZWN0aW9uLiBUaGVyZWZvcmUsIHRlc3RcbiAgICAgICAgICAgICAgLy8gZm9yIGFuIGVzdGFibGlzaGVkIGNvbnRleHQgd2l0aCBhIHByZWNlZGluZyBzdHJvbmcgdHlwZSBieSBjaGVja2luZyBiYWNrd2FyZHMgYmVmb3JlIHRoZSBvcGVuaW5nIHBhaXJlZFxuICAgICAgICAgICAgICAvLyBicmFja2V0IHVudGlsIHRoZSBmaXJzdCBzdHJvbmcgdHlwZSAoTCwgUiwgb3Igc29zKSBpcyBmb3VuZC5cbiAgICAgICAgICAgICAgLy8gICAgMS4gSWYgdGhlIHByZWNlZGluZyBzdHJvbmcgdHlwZSBpcyBhbHNvIG9wcG9zaXRlIHRoZSBlbWJlZGRpbmcgZGlyZWN0aW9uLCBjb250ZXh0IGlzIGVzdGFibGlzaGVkLCBzb1xuICAgICAgICAgICAgICAvLyAgICBzZXQgdGhlIHR5cGUgZm9yIGJvdGggYnJhY2tldHMgaW4gdGhlIHBhaXIgdG8gdGhhdCBkaXJlY3Rpb24uXG4gICAgICAgICAgICAgIC8vICAgIDIuIE90aGVyd2lzZSBzZXQgdGhlIHR5cGUgZm9yIGJvdGggYnJhY2tldHMgaW4gdGhlIHBhaXIgdG8gdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24uXG4gICAgICAgICAgICAgIGlmIChmb3VuZFN0cm9uZ1R5cGUgJiYgIXVzZVN0cm9uZ1R5cGUpIHtcbiAgICAgICAgICAgICAgICB1c2VTdHJvbmdUeXBlID0gc29zVHlwZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSQ5ID0gb3BlblNlcUlkeCAtIDE7IHNpJDkgPj0gMDsgc2kkOS0tKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaSQxNiA9IHNlcUluZGljZXMkMVtzaSQ5XTtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbaSQxNl0gJiBTVFJPTkdfVFlQRVNfRk9SX05fU1RFUFMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxyJDEgPSAoY2hhclR5cGVzW2kkMTZdICYgUl9UWVBFU19GT1JfTl9TVEVQUykgPyBUWVBFX1IgOiBUWVBFX0w7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsciQxICE9PSBnZXRFbWJlZERpcmVjdGlvbihpJDE2KSkge1xuICAgICAgICAgICAgICAgICAgICAgIHVzZVN0cm9uZ1R5cGUgPSBsciQxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHVzZVN0cm9uZ1R5cGUgPSBnZXRFbWJlZERpcmVjdGlvbihpJDE2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodXNlU3Ryb25nVHlwZSkge1xuICAgICAgICAgICAgICAgIGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbb3BlblNlcUlkeF1dID0gY2hhclR5cGVzW3NlcUluZGljZXMkMVtjbG9zZVNlcUlkeF1dID0gdXNlU3Ryb25nVHlwZTtcbiAgICAgICAgICAgICAgICAvLyAqIEFueSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IGhhZCBvcmlnaW5hbCBiaWRpcmVjdGlvbmFsIGNoYXJhY3RlciB0eXBlIE5TTSBwcmlvciB0byB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICAvLyBvZiBXMSB0aGF0IGltbWVkaWF0ZWx5IGZvbGxvdyBhIHBhaXJlZCBicmFja2V0IHdoaWNoIGNoYW5nZWQgdG8gTCBvciBSIHVuZGVyIE4wIHNob3VsZCBjaGFuZ2UgdG8gbWF0Y2hcbiAgICAgICAgICAgICAgICAvLyB0aGUgdHlwZSBvZiB0aGVpciBwcmVjZWRpbmcgYnJhY2tldC5cbiAgICAgICAgICAgICAgICBpZiAodXNlU3Ryb25nVHlwZSAhPT0gZ2V0RW1iZWREaXJlY3Rpb24oc2VxSW5kaWNlcyQxW29wZW5TZXFJZHhdKSkge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2kkMTAgPSBvcGVuU2VxSWR4ICsgMTsgc2kkMTAgPCBzZXFJbmRpY2VzJDEubGVuZ3RoOyBzaSQxMCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kkMTBdXSAmIEJOX0xJS0VfVFlQRVMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEJpZGlDaGFyVHlwZShzdHJpbmdbc2VxSW5kaWNlcyQxW3NpJDEwXV0pICYgVFlQRV9OU00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kkMTBdXSA9IHVzZVN0cm9uZ1R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVzZVN0cm9uZ1R5cGUgIT09IGdldEVtYmVkRGlyZWN0aW9uKHNlcUluZGljZXMkMVtjbG9zZVNlcUlkeF0pKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSQxMSA9IGNsb3NlU2VxSWR4ICsgMTsgc2kkMTEgPCBzZXFJbmRpY2VzJDEubGVuZ3RoOyBzaSQxMSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kkMTFdXSAmIEJOX0xJS0VfVFlQRVMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEJpZGlDaGFyVHlwZShzdHJpbmdbc2VxSW5kaWNlcyQxW3NpJDExXV0pICYgVFlQRV9OU00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kkMTFdXSA9IHVzZVN0cm9uZ1R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTjEuIEEgc2VxdWVuY2Ugb2YgTklzIHRha2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHN1cnJvdW5kaW5nIHN0cm9uZyB0ZXh0IGlmIHRoZSB0ZXh0IG9uIGJvdGggc2lkZXMgaGFzIHRoZVxuICAgICAgICAgICAgLy8gc2FtZSBkaXJlY3Rpb24uXG4gICAgICAgICAgICAvLyBOMi4gQW55IHJlbWFpbmluZyBOSXMgdGFrZSB0aGUgZW1iZWRkaW5nIGRpcmVjdGlvbi5cbiAgICAgICAgICAgIGZvciAodmFyIHNpJDEyID0gMDsgc2kkMTIgPCBzZXFJbmRpY2VzJDEubGVuZ3RoOyBzaSQxMisrKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpJDEyXV0gJiBORVVUUkFMX0lTT0xBVEVfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmlSdW5TdGFydCA9IHNpJDEyLCBuaVJ1bkVuZCA9IHNpJDEyO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2VHlwZSQyID0gc29zVHlwZTsgLy9zaSA9PT0gMCA/IHNvc1R5cGUgOiAoY2hhclR5cGVzW3NlcUluZGljZXNbc2kgLSAxXV0gJiBSX1RZUEVTX0ZPUl9OX1NURVBTKSA/IFRZUEVfUiA6IFRZUEVfTFxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpMiA9IHNpJDEyIC0gMTsgc2kyID49IDA7IHNpMi0tKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaTJdXSAmIEJOX0xJS0VfVFlQRVMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmlSdW5TdGFydCA9IHNpMjsgLy81LjIgdHJlYXQgQk5zIGFkamFjZW50IHRvIE5JcyBhcyBOSXNcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUeXBlJDIgPSAoY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaTJdXSAmIFJfVFlQRVNfRk9SX05fU1RFUFMpID8gVFlQRV9SIDogVFlQRV9MO1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV4dFR5cGUkMSA9IGVvc1R5cGU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2kyJDEgPSBzaSQxMiArIDE7IHNpMiQxIDwgc2VxSW5kaWNlcyQxLmxlbmd0aDsgc2kyJDErKykge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJUeXBlc1tzZXFJbmRpY2VzJDFbc2kyJDFdXSAmIChORVVUUkFMX0lTT0xBVEVfVFlQRVMgfCBCTl9MSUtFX1RZUEVTKSkge1xuICAgICAgICAgICAgICAgICAgICBuaVJ1bkVuZCA9IHNpMiQxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFR5cGUkMSA9IChjaGFyVHlwZXNbc2VxSW5kaWNlcyQxW3NpMiQxXV0gJiBSX1RZUEVTX0ZPUl9OX1NURVBTKSA/IFRZUEVfUiA6IFRZUEVfTDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2okOCA9IG5pUnVuU3RhcnQ7IHNqJDggPD0gbmlSdW5FbmQ7IHNqJDgrKykge1xuICAgICAgICAgICAgICAgICAgY2hhclR5cGVzW3NlcUluZGljZXMkMVtzaiQ4XV0gPSBwcmV2VHlwZSQyID09PSBuZXh0VHlwZSQxID8gcHJldlR5cGUkMiA6IGdldEVtYmVkRGlyZWN0aW9uKHNlcUluZGljZXMkMVtzaiQ4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNpJDEyID0gbmlSdW5FbmQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyA9PT0gMy4zLjYgUmVzb2x2aW5nIEltcGxpY2l0IExldmVscyA9PT1cblxuICAgICAgICBmb3IgKHZhciBpJDE3ID0gcGFyYWdyYXBoLnN0YXJ0OyBpJDE3IDw9IHBhcmFncmFwaC5lbmQ7IGkkMTcrKykge1xuICAgICAgICAgIHZhciBsZXZlbCQzID0gZW1iZWRMZXZlbHNbaSQxN107XG4gICAgICAgICAgdmFyIHR5cGUkMSA9IGNoYXJUeXBlc1tpJDE3XTtcbiAgICAgICAgICAvLyBJMi4gRm9yIGFsbCBjaGFyYWN0ZXJzIHdpdGggYW4gb2RkIChyaWdodC10by1sZWZ0KSBlbWJlZGRpbmcgbGV2ZWwsIHRob3NlIG9mIHR5cGUgTCwgRU4gb3IgQU4gZ28gdXAgb25lIGxldmVsLlxuICAgICAgICAgIGlmIChsZXZlbCQzICYgMSkge1xuICAgICAgICAgICAgaWYgKHR5cGUkMSAmIChUWVBFX0wgfCBUWVBFX0VOIHwgVFlQRV9BTikpIHtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQxN10rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJMS4gRm9yIGFsbCBjaGFyYWN0ZXJzIHdpdGggYW4gZXZlbiAobGVmdC10by1yaWdodCkgZW1iZWRkaW5nIGxldmVsLCB0aG9zZSBvZiB0eXBlIFIgZ28gdXAgb25lIGxldmVsXG4gICAgICAgICAgLy8gYW5kIHRob3NlIG9mIHR5cGUgQU4gb3IgRU4gZ28gdXAgdHdvIGxldmVscy5cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlJDEgJiBUWVBFX1IpIHtcbiAgICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQxN10rKztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSQxICYgKFRZUEVfQU4gfCBUWVBFX0VOKSkge1xuICAgICAgICAgICAgICBlbWJlZExldmVsc1tpJDE3XSArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDUuMjogUmVzb2x2ZSBhbnkgTFJFLCBSTEUsIExSTywgUkxPLCBQREYsIG9yIEJOIHRvIHRoZSBsZXZlbCBvZiB0aGUgcHJlY2VkaW5nIGNoYXJhY3RlciBpZiB0aGVyZSBpcyBvbmUsXG4gICAgICAgICAgLy8gYW5kIG90aGVyd2lzZSB0byB0aGUgYmFzZSBsZXZlbC5cbiAgICAgICAgICBpZiAodHlwZSQxICYgQk5fTElLRV9UWVBFUykge1xuICAgICAgICAgICAgZW1iZWRMZXZlbHNbaSQxN10gPSBpJDE3ID09PSAwID8gcGFyYWdyYXBoLmxldmVsIDogZW1iZWRMZXZlbHNbaSQxNyAtIDFdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDMuNCBMMS4xLTQ6IFJlc2V0IHRoZSBlbWJlZGRpbmcgbGV2ZWwgb2Ygc2VnbWVudC9wYXJhZ3JhcGggc2VwYXJhdG9ycywgYW5kIGFueSBzZXF1ZW5jZSBvZiB3aGl0ZXNwYWNlIG9yXG4gICAgICAgICAgLy8gaXNvbGF0ZSBmb3JtYXR0aW5nIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZW0gb3IgdGhlIGVuZCBvZiB0aGUgcGFyYWdyYXBoLCB0byB0aGUgcGFyYWdyYXBoIGxldmVsLlxuICAgICAgICAgIC8vIE5PVEU6IHRoaXMgd2lsbCBhbHNvIG5lZWQgdG8gYmUgYXBwbGllZCB0byBlYWNoIGluZGl2aWR1YWwgbGluZSBlbmRpbmcgYWZ0ZXIgbGluZSB3cmFwcGluZyBvY2N1cnMuXG4gICAgICAgICAgaWYgKGkkMTcgPT09IHBhcmFncmFwaC5lbmQgfHwgZ2V0QmlkaUNoYXJUeXBlKHN0cmluZ1tpJDE3XSkgJiAoVFlQRV9TIHwgVFlQRV9CKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiQxID0gaSQxNzsgaiQxID49IDAgJiYgKGdldEJpZGlDaGFyVHlwZShzdHJpbmdbaiQxXSkgJiBUUkFJTElOR19UWVBFUyk7IGokMS0tKSB7XG4gICAgICAgICAgICAgIGVtYmVkTGV2ZWxzW2okMV0gPSBwYXJhZ3JhcGgubGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERPTkUhIFRoZSByZXNvbHZlZCBsZXZlbHMgY2FuIHRoZW4gYmUgdXNlZCwgYWZ0ZXIgbGluZSB3cmFwcGluZywgdG8gZmxpcCBydW5zIG9mIGNoYXJhY3RlcnNcbiAgICAgIC8vIGFjY29yZGluZyB0byBzZWN0aW9uIDMuNCBSZW9yZGVyaW5nIFJlc29sdmVkIExldmVsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGV2ZWxzOiBlbWJlZExldmVscyxcbiAgICAgICAgcGFyYWdyYXBoczogcGFyYWdyYXBoc1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZXRlcm1pbmVBdXRvRW1iZWRMZXZlbCAoc3RhcnQsIGlzRlNJKSB7XG4gICAgICAgIC8vIDMuMy4xIFAyIC0gUDNcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGNoYXJUeXBlID0gY2hhclR5cGVzW2ldO1xuICAgICAgICAgIGlmIChjaGFyVHlwZSAmIChUWVBFX1IgfCBUWVBFX0FMKSkge1xuICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChjaGFyVHlwZSAmIChUWVBFX0IgfCBUWVBFX0wpKSB8fCAoaXNGU0kgJiYgY2hhclR5cGUgPT09IFRZUEVfUERJKSkge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXJUeXBlICYgSVNPTEFURV9JTklUX1RZUEVTKSB7XG4gICAgICAgICAgICB2YXIgcGRpID0gaW5kZXhPZk1hdGNoaW5nUERJKGkpO1xuICAgICAgICAgICAgaSA9IHBkaSA9PT0gLTEgPyBzdHJpbmcubGVuZ3RoIDogcGRpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbmRleE9mTWF0Y2hpbmdQREkgKGlzb2xhdGVTdGFydCkge1xuICAgICAgICAvLyAzLjEuMiBCRDlcbiAgICAgICAgdmFyIGlzb2xhdGlvbkxldmVsID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGlzb2xhdGVTdGFydCArIDE7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hhclR5cGUgPSBjaGFyVHlwZXNbaV07XG4gICAgICAgICAgaWYgKGNoYXJUeXBlICYgVFlQRV9CKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhclR5cGUgJiBUWVBFX1BESSkge1xuICAgICAgICAgICAgaWYgKC0taXNvbGF0aW9uTGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJUeXBlICYgSVNPTEFURV9JTklUX1RZUEVTKSB7XG4gICAgICAgICAgICBpc29sYXRpb25MZXZlbCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0RW1iZWREaXJlY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIChlbWJlZExldmVsc1tpXSAmIDEpID8gVFlQRV9SIDogVFlQRV9MXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBCaWRpIG1pcnJvcmVkIGNoYXJzIGRhdGEsIGF1dG8gZ2VuZXJhdGVkXG4gICAgdmFyIGRhdGEgPSBcIjE0PjEsaj4yLHQ+Mix1PjIsMWE+ZywydjM+MSwxPjEsMWdlPjEsMXdkPjEsYj4xLDFqPjEsZj4xLGFpPjMsLTI+MywrMSw4PjFrMCwtMWpxPjF5NywtMXk2PjFoZiwtMWhlPjFoNiwtMWg1PjFoYSwtMWg4PjFxaSwtMXB1PjEsNj4zdSwtM3M+Nyw2PjEsMT4xLGY+MSwxPjEsKzIsMz4xLDE+MSwrMTMsND4xLDE+MSw2PjFlbywtMWVlPjEsMz4xbWcsLTFtZT4xbWssLTFtaj4xbWksLTFtZz4xbWksLTFtZD4xLDE+MSwrMiwxPjEwaywtMTAzPjEsMT4xLDQ+MSw1PjEsMT4xLCsxMCwzPjEsMT44LC03PjgsKzEsLTY+NywrMSxhPjEsMT4xLHU+MSx1Nj4xLDE+MSwrNSwyNj4xLDE+MSwyPjEsMj4yLDg+MSw3PjEsND4xLDE+MSwrNSxiOD4xLDE+MSwrMywxPjMsLTI+MSwyPjEsMT4xLCsyLGM+MSwzPjEsMT4xLCsyLGg+MSwzPjEsYT4xLDE+MSwyPjEsMz4xLDE+MSxkPjEsZj4xLDM+MSwxYT4xLDE+MSw2PjEsNz4xLDEzPjEsaz4xLDE+MSwrMTksND4xLDE+MSwrMiwyPjEsMT4xLCsxOCxtPjEsYT4xLDE+MSxsaz4xLDE+MSw0PjEsMj4xLGY+MSwzPjEsMT4xLCszLGRiPjEsMT4xLCszLDM+MSwxPjEsKzIsMTRxbT4xLDE+MSwrMSw2PjEsNGo+MSxqPjIsdD4yLHU+MiwyPjEsKzFcIjtcblxuICAgIHZhciBtaXJyb3JNYXA7XG5cbiAgICBmdW5jdGlvbiBwYXJzZSAoKSB7XG4gICAgICBpZiAoIW1pcnJvck1hcCkge1xuICAgICAgICAvL2NvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgdmFyIHJlZiA9IHBhcnNlQ2hhcmFjdGVyTWFwKGRhdGEsIHRydWUpO1xuICAgICAgICB2YXIgbWFwID0gcmVmLm1hcDtcbiAgICAgICAgdmFyIHJldmVyc2VNYXAgPSByZWYucmV2ZXJzZU1hcDtcbiAgICAgICAgLy8gQ29tYmluZSBib3RoIG1hcHMgaW50byBvbmVcbiAgICAgICAgcmV2ZXJzZU1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1pcnJvck1hcCA9IG1hcDtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgbWlycm9yZWQgY2hhcnMgcGFyc2VkIGluICR7cGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydH1tc2ApXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWlycm9yZWRDaGFyYWN0ZXIgKGNoYXIpIHtcbiAgICAgIHBhcnNlKCk7XG4gICAgICByZXR1cm4gbWlycm9yTWFwLmdldChjaGFyKSB8fCBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBzdHJpbmcgYW5kIGl0cyByZXNvbHZlZCBlbWJlZGRpbmcgbGV2ZWxzLCBidWlsZCBhIG1hcCBvZiBpbmRpY2VzIHRvIHJlcGxhY2VtZW50IGNoYXJzXG4gICAgICogZm9yIGFueSBjaGFyYWN0ZXJzIGluIHJpZ2h0LXRvLWxlZnQgc2VnbWVudHMgdGhhdCBoYXZlIGRlZmluZWQgbWlycm9yZWQgY2hhcmFjdGVycy5cbiAgICAgKiBAcGFyYW0gc3RyaW5nXG4gICAgICogQHBhcmFtIGVtYmVkZGluZ0xldmVsc1xuICAgICAqIEBwYXJhbSBbc3RhcnRdXG4gICAgICogQHBhcmFtIFtlbmRdXG4gICAgICogQHJldHVybiB7TWFwPG51bWJlciwgc3RyaW5nPn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNaXJyb3JlZENoYXJhY3RlcnNNYXAoc3RyaW5nLCBlbWJlZGRpbmdMZXZlbHMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgc3RhcnQgPSBNYXRoLm1heCgwLCBzdGFydCA9PSBudWxsID8gMCA6ICtzdGFydCk7XG4gICAgICBlbmQgPSBNYXRoLm1pbihzdHJMZW4gLSAxLCBlbmQgPT0gbnVsbCA/IHN0ckxlbiAtIDEgOiArZW5kKTtcblxuICAgICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICBpZiAoZW1iZWRkaW5nTGV2ZWxzW2ldICYgMSkgeyAvL29ubHkgb2RkIChydGwpIGxldmVsc1xuICAgICAgICAgIHZhciBtaXJyb3IgPSBnZXRNaXJyb3JlZENoYXJhY3RlcihzdHJpbmdbaV0pO1xuICAgICAgICAgIGlmIChtaXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoaSwgbWlycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHN0YXJ0IGFuZCBlbmQgZGVub3RpbmcgYSBzaW5nbGUgbGluZSB3aXRoaW4gYSBzdHJpbmcsIGFuZCBhIHNldCBvZiBwcmVjYWxjdWxhdGVkXG4gICAgICogYmlkaSBlbWJlZGRpbmcgbGV2ZWxzLCBwcm9kdWNlIGEgbGlzdCBvZiBzZWdtZW50cyB3aG9zZSBvcmRlcmluZyBzaG91bGQgYmUgZmxpcHBlZCwgaW4gc2VxdWVuY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIHRoZSBmdWxsIGlucHV0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7R2V0RW1iZWRkaW5nTGV2ZWxzUmVzdWx0fSBlbWJlZGRpbmdMZXZlbHNSZXN1bHQgLSB0aGUgcmVzdWx0IG9iamVjdCBmcm9tIGdldEVtYmVkZGluZ0xldmVsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRdIC0gZmlyc3QgY2hhcmFjdGVyIGluIGEgc3Vic2V0IG9mIHRoZSBmdWxsIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXSAtIGxhc3QgY2hhcmFjdGVyIGluIGEgc3Vic2V0IG9mIHRoZSBmdWxsIHN0cmluZ1xuICAgICAqIEByZXR1cm4ge251bWJlcltdW119IC0gdGhlIGxpc3Qgb2Ygc3RhcnQvZW5kIHNlZ21lbnRzIHRoYXQgc2hvdWxkIGJlIGZsaXBwZWQsIGluIG9yZGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJlb3JkZXJTZWdtZW50cyhzdHJpbmcsIGVtYmVkZGluZ0xldmVsc1Jlc3VsdCwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBzdGFydCA9IE1hdGgubWF4KDAsIHN0YXJ0ID09IG51bGwgPyAwIDogK3N0YXJ0KTtcbiAgICAgIGVuZCA9IE1hdGgubWluKHN0ckxlbiAtIDEsIGVuZCA9PSBudWxsID8gc3RyTGVuIC0gMSA6ICtlbmQpO1xuXG4gICAgICB2YXIgc2VnbWVudHMgPSBbXTtcbiAgICAgIGVtYmVkZGluZ0xldmVsc1Jlc3VsdC5wYXJhZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFncmFwaCkge1xuICAgICAgICB2YXIgbGluZVN0YXJ0ID0gTWF0aC5tYXgoc3RhcnQsIHBhcmFncmFwaC5zdGFydCk7XG4gICAgICAgIHZhciBsaW5lRW5kID0gTWF0aC5taW4oZW5kLCBwYXJhZ3JhcGguZW5kKTtcbiAgICAgICAgaWYgKGxpbmVTdGFydCA8IGxpbmVFbmQpIHtcbiAgICAgICAgICAvLyBMb2NhbCBzbGljZSBmb3IgbXV0YXRpb25cbiAgICAgICAgICB2YXIgbGluZUxldmVscyA9IGVtYmVkZGluZ0xldmVsc1Jlc3VsdC5sZXZlbHMuc2xpY2UobGluZVN0YXJ0LCBsaW5lRW5kICsgMSk7XG5cbiAgICAgICAgICAvLyAzLjQgTDEuNDogUmVzZXQgYW55IHNlcXVlbmNlIG9mIHdoaXRlc3BhY2UgY2hhcmFjdGVycyBhbmQvb3IgaXNvbGF0ZSBmb3JtYXR0aW5nIGNoYXJhY3RlcnMgYXQgdGhlXG4gICAgICAgICAgLy8gZW5kIG9mIHRoZSBsaW5lIHRvIHRoZSBwYXJhZ3JhcGggbGV2ZWwuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IGxpbmVFbmQ7IGkgPj0gbGluZVN0YXJ0ICYmIChnZXRCaWRpQ2hhclR5cGUoc3RyaW5nW2ldKSAmIFRSQUlMSU5HX1RZUEVTKTsgaS0tKSB7XG4gICAgICAgICAgICBsaW5lTGV2ZWxzW2ldID0gcGFyYWdyYXBoLmxldmVsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEwyLiBGcm9tIHRoZSBoaWdoZXN0IGxldmVsIGZvdW5kIGluIHRoZSB0ZXh0IHRvIHRoZSBsb3dlc3Qgb2RkIGxldmVsIG9uIGVhY2ggbGluZSwgaW5jbHVkaW5nIGludGVybWVkaWF0ZSBsZXZlbHNcbiAgICAgICAgICAvLyBub3QgYWN0dWFsbHkgcHJlc2VudCBpbiB0aGUgdGV4dCwgcmV2ZXJzZSBhbnkgY29udGlndW91cyBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIGF0IHRoYXQgbGV2ZWwgb3IgaGlnaGVyLlxuICAgICAgICAgIHZhciBtYXhMZXZlbCA9IHBhcmFncmFwaC5sZXZlbDtcbiAgICAgICAgICB2YXIgbWluT2RkTGV2ZWwgPSBJbmZpbml0eTtcbiAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBsaW5lTGV2ZWxzLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IGxpbmVMZXZlbHNbaSQxXTtcbiAgICAgICAgICAgIGlmIChsZXZlbCA+IG1heExldmVsKSB7IG1heExldmVsID0gbGV2ZWw7IH1cbiAgICAgICAgICAgIGlmIChsZXZlbCA8IG1pbk9kZExldmVsKSB7IG1pbk9kZExldmVsID0gbGV2ZWwgfCAxOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGx2bCA9IG1heExldmVsOyBsdmwgPj0gbWluT2RkTGV2ZWw7IGx2bC0tKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBsaW5lTGV2ZWxzLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGxpbmVMZXZlbHNbaSQyXSA+PSBsdmwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnU3RhcnQgPSBpJDI7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkkMiArIDEgPCBsaW5lTGV2ZWxzLmxlbmd0aCAmJiBsaW5lTGV2ZWxzW2kkMiArIDFdID49IGx2bCkge1xuICAgICAgICAgICAgICAgICAgaSQyKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpJDIgPiBzZWdTdGFydCkge1xuICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChbc2VnU3RhcnQgKyBzdGFydCwgaSQyICsgc3RhcnRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7R2V0RW1iZWRkaW5nTGV2ZWxzUmVzdWx0fSBlbWJlZExldmVsc1Jlc3VsdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdXG4gICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgbmV3IHN0cmluZyB3aXRoIGJpZGkgc2VnbWVudHMgcmVvcmRlcmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmVvcmRlcmVkU3RyaW5nKHN0cmluZywgZW1iZWRMZXZlbHNSZXN1bHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRpY2VzID0gZ2V0UmVvcmRlcmVkSW5kaWNlcyhzdHJpbmcsIGVtYmVkTGV2ZWxzUmVzdWx0LCBzdGFydCwgZW5kKTtcbiAgICAgIHZhciBjaGFycyA9IFtdLmNvbmNhdCggc3RyaW5nICk7XG4gICAgICBpbmRpY2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYXJJbmRleCwgaSkge1xuICAgICAgICBjaGFyc1tpXSA9IChcbiAgICAgICAgICAoZW1iZWRMZXZlbHNSZXN1bHQubGV2ZWxzW2NoYXJJbmRleF0gJiAxKSA/IGdldE1pcnJvcmVkQ2hhcmFjdGVyKHN0cmluZ1tjaGFySW5kZXhdKSA6IG51bGxcbiAgICAgICAgKSB8fCBzdHJpbmdbY2hhckluZGV4XTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7R2V0RW1iZWRkaW5nTGV2ZWxzUmVzdWx0fSBlbWJlZExldmVsc1Jlc3VsdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdXG4gICAgICogQHJldHVybiB7bnVtYmVyW119IGFuIGFycmF5IHdpdGggY2hhcmFjdGVyIGluZGljZXMgaW4gdGhlaXIgbmV3IGJpZGkgb3JkZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSZW9yZGVyZWRJbmRpY2VzKHN0cmluZywgZW1iZWRMZXZlbHNSZXN1bHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBzZWdtZW50cyA9IGdldFJlb3JkZXJTZWdtZW50cyhzdHJpbmcsIGVtYmVkTGV2ZWxzUmVzdWx0LCBzdGFydCwgZW5kKTtcbiAgICAgIC8vIEZpbGwgYW4gYXJyYXkgd2l0aCBpbmRpY2VzXG4gICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5kaWNlc1tpXSA9IGk7XG4gICAgICB9XG4gICAgICAvLyBSZXZlcnNlIGVhY2ggc2VnbWVudCBpbiBvcmRlclxuICAgICAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGVuZCA9IHJlZlsxXTtcblxuICAgICAgICB2YXIgc2xpY2UgPSBpbmRpY2VzLnNsaWNlKHN0YXJ0LCBlbmQgKyAxKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNsaWNlLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgIGluZGljZXNbZW5kIC0gaV0gPSBzbGljZVtpXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5kaWNlc1xuICAgIH1cblxuICAgIGV4cG9ydHMuY2xvc2luZ1RvT3BlbmluZ0JyYWNrZXQgPSBjbG9zaW5nVG9PcGVuaW5nQnJhY2tldDtcbiAgICBleHBvcnRzLmdldEJpZGlDaGFyVHlwZSA9IGdldEJpZGlDaGFyVHlwZTtcbiAgICBleHBvcnRzLmdldEJpZGlDaGFyVHlwZU5hbWUgPSBnZXRCaWRpQ2hhclR5cGVOYW1lO1xuICAgIGV4cG9ydHMuZ2V0Q2Fub25pY2FsQnJhY2tldCA9IGdldENhbm9uaWNhbEJyYWNrZXQ7XG4gICAgZXhwb3J0cy5nZXRFbWJlZGRpbmdMZXZlbHMgPSBnZXRFbWJlZGRpbmdMZXZlbHM7XG4gICAgZXhwb3J0cy5nZXRNaXJyb3JlZENoYXJhY3RlciA9IGdldE1pcnJvcmVkQ2hhcmFjdGVyO1xuICAgIGV4cG9ydHMuZ2V0TWlycm9yZWRDaGFyYWN0ZXJzTWFwID0gZ2V0TWlycm9yZWRDaGFyYWN0ZXJzTWFwO1xuICAgIGV4cG9ydHMuZ2V0UmVvcmRlclNlZ21lbnRzID0gZ2V0UmVvcmRlclNlZ21lbnRzO1xuICAgIGV4cG9ydHMuZ2V0UmVvcmRlcmVkSW5kaWNlcyA9IGdldFJlb3JkZXJlZEluZGljZXM7XG4gICAgZXhwb3J0cy5nZXRSZW9yZGVyZWRTdHJpbmcgPSBnZXRSZW9yZGVyZWRTdHJpbmc7XG4gICAgZXhwb3J0cy5vcGVuaW5nVG9DbG9zaW5nQnJhY2tldCA9IG9wZW5pbmdUb0Nsb3NpbmdCcmFja2V0O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuICAgIHJldHVybiBleHBvcnRzO1xuXG4gIH0oe30pKTtcbiAgcmV0dXJuIGJpZGl9XG5cbiAgcmV0dXJuIGJpZGlGYWN0b3J5O1xuXG59KSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bidi-js/dist/bidi.js\n");

/***/ })

};
;