/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/opentype.js";
exports.ids = ["vendor-chunks/opentype.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/opentype.js/dist/opentype.js":
/*!***************************************************!*\
  !*** ./node_modules/opentype.js/dist/opentype.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/**\n * https://opentype.js.org v1.3.4 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens\n */\n\n(function (global, factory) {\n\t true ? factory(exports) :\n\t0;\n}(this, (function (exports) { 'use strict';\n\n\t/*! https://mths.be/codepointat v0.2.0 by @mathias */\n\tif (!String.prototype.codePointAt) {\n\t\t(function() {\n\t\t\tvar defineProperty = (function() {\n\t\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\t\ttry {\n\t\t\t\t\tvar object = {};\n\t\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t\t} catch(error) {}\n\t\t\t\treturn result;\n\t\t\t}());\n\t\t\tvar codePointAt = function(position) {\n\t\t\t\tif (this == null) {\n\t\t\t\t\tthrow TypeError();\n\t\t\t\t}\n\t\t\t\tvar string = String(this);\n\t\t\t\tvar size = string.length;\n\t\t\t\t// `ToInteger`\n\t\t\t\tvar index = position ? Number(position) : 0;\n\t\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\t// Account for out-of-bounds indices:\n\t\t\t\tif (index < 0 || index >= size) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// Get the first code unit\n\t\t\t\tvar first = string.charCodeAt(index);\n\t\t\t\tvar second;\n\t\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t\t) {\n\t\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn first;\n\t\t\t};\n\t\t\tif (defineProperty) {\n\t\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t\t'value': codePointAt,\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'writable': true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t\t}\n\t\t}());\n\t}\n\n\tvar TINF_OK = 0;\n\tvar TINF_DATA_ERROR = -3;\n\n\tfunction Tree() {\n\t  this.table = new Uint16Array(16);   /* table of code length counts */\n\t  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n\t}\n\n\tfunction Data(source, dest) {\n\t  this.source = source;\n\t  this.sourceIndex = 0;\n\t  this.tag = 0;\n\t  this.bitcount = 0;\n\t  \n\t  this.dest = dest;\n\t  this.destLen = 0;\n\t  \n\t  this.ltree = new Tree();  /* dynamic length/symbol tree */\n\t  this.dtree = new Tree();  /* dynamic distance tree */\n\t}\n\n\t/* --------------------------------------------------- *\n\t * -- uninitialized global data (static structures) -- *\n\t * --------------------------------------------------- */\n\n\tvar sltree = new Tree();\n\tvar sdtree = new Tree();\n\n\t/* extra bits and base tables for length codes */\n\tvar length_bits = new Uint8Array(30);\n\tvar length_base = new Uint16Array(30);\n\n\t/* extra bits and base tables for distance codes */\n\tvar dist_bits = new Uint8Array(30);\n\tvar dist_base = new Uint16Array(30);\n\n\t/* special ordering of code length codes */\n\tvar clcidx = new Uint8Array([\n\t  16, 17, 18, 0, 8, 7, 9, 6,\n\t  10, 5, 11, 4, 12, 3, 13, 2,\n\t  14, 1, 15\n\t]);\n\n\t/* used by tinf_decode_trees, avoids allocations every call */\n\tvar code_tree = new Tree();\n\tvar lengths = new Uint8Array(288 + 32);\n\n\t/* ----------------------- *\n\t * -- utility functions -- *\n\t * ----------------------- */\n\n\t/* build extra bits and base tables */\n\tfunction tinf_build_bits_base(bits, base, delta, first) {\n\t  var i, sum;\n\n\t  /* build bits table */\n\t  for (i = 0; i < delta; ++i) { bits[i] = 0; }\n\t  for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }\n\n\t  /* build base table */\n\t  for (sum = first, i = 0; i < 30; ++i) {\n\t    base[i] = sum;\n\t    sum += 1 << bits[i];\n\t  }\n\t}\n\n\t/* build the fixed huffman trees */\n\tfunction tinf_build_fixed_trees(lt, dt) {\n\t  var i;\n\n\t  /* build fixed length tree */\n\t  for (i = 0; i < 7; ++i) { lt.table[i] = 0; }\n\n\t  lt.table[7] = 24;\n\t  lt.table[8] = 152;\n\t  lt.table[9] = 112;\n\n\t  for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }\n\t  for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }\n\t  for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }\n\t  for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }\n\n\t  /* build fixed distance tree */\n\t  for (i = 0; i < 5; ++i) { dt.table[i] = 0; }\n\n\t  dt.table[5] = 32;\n\n\t  for (i = 0; i < 32; ++i) { dt.trans[i] = i; }\n\t}\n\n\t/* given an array of code lengths, build a tree */\n\tvar offs = new Uint16Array(16);\n\n\tfunction tinf_build_tree(t, lengths, off, num) {\n\t  var i, sum;\n\n\t  /* clear code length count table */\n\t  for (i = 0; i < 16; ++i) { t.table[i] = 0; }\n\n\t  /* scan symbol lengths, and sum code length counts */\n\t  for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }\n\n\t  t.table[0] = 0;\n\n\t  /* compute offset table for distribution sort */\n\t  for (sum = 0, i = 0; i < 16; ++i) {\n\t    offs[i] = sum;\n\t    sum += t.table[i];\n\t  }\n\n\t  /* create code->symbol translation table (symbols sorted by code) */\n\t  for (i = 0; i < num; ++i) {\n\t    if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }\n\t  }\n\t}\n\n\t/* ---------------------- *\n\t * -- decode functions -- *\n\t * ---------------------- */\n\n\t/* get one bit from source stream */\n\tfunction tinf_getbit(d) {\n\t  /* check if tag is empty */\n\t  if (!d.bitcount--) {\n\t    /* load next tag */\n\t    d.tag = d.source[d.sourceIndex++];\n\t    d.bitcount = 7;\n\t  }\n\n\t  /* shift bit out of tag */\n\t  var bit = d.tag & 1;\n\t  d.tag >>>= 1;\n\n\t  return bit;\n\t}\n\n\t/* read a num bit value from a stream and add base */\n\tfunction tinf_read_bits(d, num, base) {\n\t  if (!num)\n\t    { return base; }\n\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\n\t  var val = d.tag & (0xffff >>> (16 - num));\n\t  d.tag >>>= num;\n\t  d.bitcount -= num;\n\t  return val + base;\n\t}\n\n\t/* given a data stream and a tree, decode a symbol */\n\tfunction tinf_decode_symbol(d, t) {\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\t  \n\t  var sum = 0, cur = 0, len = 0;\n\t  var tag = d.tag;\n\n\t  /* get more bits while code value is above sum */\n\t  do {\n\t    cur = 2 * cur + (tag & 1);\n\t    tag >>>= 1;\n\t    ++len;\n\n\t    sum += t.table[len];\n\t    cur -= t.table[len];\n\t  } while (cur >= 0);\n\t  \n\t  d.tag = tag;\n\t  d.bitcount -= len;\n\n\t  return t.trans[sum + cur];\n\t}\n\n\t/* given a data stream, decode dynamic trees from it */\n\tfunction tinf_decode_trees(d, lt, dt) {\n\t  var hlit, hdist, hclen;\n\t  var i, num, length;\n\n\t  /* get 5 bits HLIT (257-286) */\n\t  hlit = tinf_read_bits(d, 5, 257);\n\n\t  /* get 5 bits HDIST (1-32) */\n\t  hdist = tinf_read_bits(d, 5, 1);\n\n\t  /* get 4 bits HCLEN (4-19) */\n\t  hclen = tinf_read_bits(d, 4, 4);\n\n\t  for (i = 0; i < 19; ++i) { lengths[i] = 0; }\n\n\t  /* read code lengths for code length alphabet */\n\t  for (i = 0; i < hclen; ++i) {\n\t    /* get 3 bits code length (0-7) */\n\t    var clen = tinf_read_bits(d, 3, 0);\n\t    lengths[clcidx[i]] = clen;\n\t  }\n\n\t  /* build code length tree */\n\t  tinf_build_tree(code_tree, lengths, 0, 19);\n\n\t  /* decode code lengths for the dynamic trees */\n\t  for (num = 0; num < hlit + hdist;) {\n\t    var sym = tinf_decode_symbol(d, code_tree);\n\n\t    switch (sym) {\n\t      case 16:\n\t        /* copy previous code length 3-6 times (read 2 bits) */\n\t        var prev = lengths[num - 1];\n\t        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n\t          lengths[num++] = prev;\n\t        }\n\t        break;\n\t      case 17:\n\t        /* repeat code length 0 for 3-10 times (read 3 bits) */\n\t        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      case 18:\n\t        /* repeat code length 0 for 11-138 times (read 7 bits) */\n\t        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      default:\n\t        /* values 0-15 represent the actual code lengths */\n\t        lengths[num++] = sym;\n\t        break;\n\t    }\n\t  }\n\n\t  /* build dynamic trees */\n\t  tinf_build_tree(lt, lengths, 0, hlit);\n\t  tinf_build_tree(dt, lengths, hlit, hdist);\n\t}\n\n\t/* ----------------------------- *\n\t * -- block inflate functions -- *\n\t * ----------------------------- */\n\n\t/* given a stream and two trees, inflate a block of data */\n\tfunction tinf_inflate_block_data(d, lt, dt) {\n\t  while (1) {\n\t    var sym = tinf_decode_symbol(d, lt);\n\n\t    /* check for end of block */\n\t    if (sym === 256) {\n\t      return TINF_OK;\n\t    }\n\n\t    if (sym < 256) {\n\t      d.dest[d.destLen++] = sym;\n\t    } else {\n\t      var length, dist, offs;\n\t      var i;\n\n\t      sym -= 257;\n\n\t      /* possibly get more bits from length code */\n\t      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n\t      dist = tinf_decode_symbol(d, dt);\n\n\t      /* possibly get more bits from distance code */\n\t      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n\t      /* copy match */\n\t      for (i = offs; i < offs + length; ++i) {\n\t        d.dest[d.destLen++] = d.dest[i];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/* inflate an uncompressed block of data */\n\tfunction tinf_inflate_uncompressed_block(d) {\n\t  var length, invlength;\n\t  var i;\n\t  \n\t  /* unread from bitbuffer */\n\t  while (d.bitcount > 8) {\n\t    d.sourceIndex--;\n\t    d.bitcount -= 8;\n\t  }\n\n\t  /* get length */\n\t  length = d.source[d.sourceIndex + 1];\n\t  length = 256 * length + d.source[d.sourceIndex];\n\n\t  /* get one's complement of length */\n\t  invlength = d.source[d.sourceIndex + 3];\n\t  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n\t  /* check length */\n\t  if (length !== (~invlength & 0x0000ffff))\n\t    { return TINF_DATA_ERROR; }\n\n\t  d.sourceIndex += 4;\n\n\t  /* copy block */\n\t  for (i = length; i; --i)\n\t    { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }\n\n\t  /* make sure we start next block on a byte boundary */\n\t  d.bitcount = 0;\n\n\t  return TINF_OK;\n\t}\n\n\t/* inflate stream from source to dest */\n\tfunction tinf_uncompress(source, dest) {\n\t  var d = new Data(source, dest);\n\t  var bfinal, btype, res;\n\n\t  do {\n\t    /* read final block flag */\n\t    bfinal = tinf_getbit(d);\n\n\t    /* read block type (2 bits) */\n\t    btype = tinf_read_bits(d, 2, 0);\n\n\t    /* decompress block */\n\t    switch (btype) {\n\t      case 0:\n\t        /* decompress uncompressed block */\n\t        res = tinf_inflate_uncompressed_block(d);\n\t        break;\n\t      case 1:\n\t        /* decompress block with fixed huffman trees */\n\t        res = tinf_inflate_block_data(d, sltree, sdtree);\n\t        break;\n\t      case 2:\n\t        /* decompress block with dynamic huffman trees */\n\t        tinf_decode_trees(d, d.ltree, d.dtree);\n\t        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n\t        break;\n\t      default:\n\t        res = TINF_DATA_ERROR;\n\t    }\n\n\t    if (res !== TINF_OK)\n\t      { throw new Error('Data error'); }\n\n\t  } while (!bfinal);\n\n\t  if (d.destLen < d.dest.length) {\n\t    if (typeof d.dest.slice === 'function')\n\t      { return d.dest.slice(0, d.destLen); }\n\t    else\n\t      { return d.dest.subarray(0, d.destLen); }\n\t  }\n\t  \n\t  return d.dest;\n\t}\n\n\t/* -------------------- *\n\t * -- initialization -- *\n\t * -------------------- */\n\n\t/* build fixed huffman trees */\n\ttinf_build_fixed_trees(sltree, sdtree);\n\n\t/* build extra bits and base tables */\n\ttinf_build_bits_base(length_bits, length_base, 4, 3);\n\ttinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n\t/* fix a special case */\n\tlength_bits[28] = 0;\n\tlength_base[28] = 258;\n\n\tvar tinyInflate = tinf_uncompress;\n\n\t// The Bounding Box object\n\n\tfunction derive(v0, v1, v2, v3, t) {\n\t    return Math.pow(1 - t, 3) * v0 +\n\t        3 * Math.pow(1 - t, 2) * t * v1 +\n\t        3 * (1 - t) * Math.pow(t, 2) * v2 +\n\t        Math.pow(t, 3) * v3;\n\t}\n\t/**\n\t * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n\t * It is used to calculate the bounding box of a glyph or text path.\n\t *\n\t * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n\t *\n\t * @exports opentype.BoundingBox\n\t * @class\n\t * @constructor\n\t */\n\tfunction BoundingBox() {\n\t    this.x1 = Number.NaN;\n\t    this.y1 = Number.NaN;\n\t    this.x2 = Number.NaN;\n\t    this.y2 = Number.NaN;\n\t}\n\n\t/**\n\t * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n\t */\n\tBoundingBox.prototype.isEmpty = function() {\n\t    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n\t};\n\n\t/**\n\t * Add the point to the bounding box.\n\t * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n\t * @param {number} x - The X coordinate of the point.\n\t * @param {number} y - The Y coordinate of the point.\n\t */\n\tBoundingBox.prototype.addPoint = function(x, y) {\n\t    if (typeof x === 'number') {\n\t        if (isNaN(this.x1) || isNaN(this.x2)) {\n\t            this.x1 = x;\n\t            this.x2 = x;\n\t        }\n\t        if (x < this.x1) {\n\t            this.x1 = x;\n\t        }\n\t        if (x > this.x2) {\n\t            this.x2 = x;\n\t        }\n\t    }\n\t    if (typeof y === 'number') {\n\t        if (isNaN(this.y1) || isNaN(this.y2)) {\n\t            this.y1 = y;\n\t            this.y2 = y;\n\t        }\n\t        if (y < this.y1) {\n\t            this.y1 = y;\n\t        }\n\t        if (y > this.y2) {\n\t            this.y2 = y;\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Add a X coordinate to the bounding box.\n\t * This extends the bounding box to include the X coordinate.\n\t * This function is used internally inside of addBezier.\n\t * @param {number} x - The X coordinate of the point.\n\t */\n\tBoundingBox.prototype.addX = function(x) {\n\t    this.addPoint(x, null);\n\t};\n\n\t/**\n\t * Add a Y coordinate to the bounding box.\n\t * This extends the bounding box to include the Y coordinate.\n\t * This function is used internally inside of addBezier.\n\t * @param {number} y - The Y coordinate of the point.\n\t */\n\tBoundingBox.prototype.addY = function(y) {\n\t    this.addPoint(null, y);\n\t};\n\n\t/**\n\t * Add a Bézier curve to the bounding box.\n\t * This extends the bounding box to include the entire Bézier.\n\t * @param {number} x0 - The starting X coordinate.\n\t * @param {number} y0 - The starting Y coordinate.\n\t * @param {number} x1 - The X coordinate of the first control point.\n\t * @param {number} y1 - The Y coordinate of the first control point.\n\t * @param {number} x2 - The X coordinate of the second control point.\n\t * @param {number} y2 - The Y coordinate of the second control point.\n\t * @param {number} x - The ending X coordinate.\n\t * @param {number} y - The ending Y coordinate.\n\t */\n\tBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n\t    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // and https://github.com/icons8/svg-path-bounding-box\n\n\t    var p0 = [x0, y0];\n\t    var p1 = [x1, y1];\n\t    var p2 = [x2, y2];\n\t    var p3 = [x, y];\n\n\t    this.addPoint(x0, y0);\n\t    this.addPoint(x, y);\n\n\t    for (var i = 0; i <= 1; i++) {\n\t        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n\t        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n\t        var c = 3 * p1[i] - 3 * p0[i];\n\n\t        if (a === 0) {\n\t            if (b === 0) { continue; }\n\t            var t = -c / b;\n\t            if (0 < t && t < 1) {\n\t                if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n\t                if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n\t            }\n\t            continue;\n\t        }\n\n\t        var b2ac = Math.pow(b, 2) - 4 * c * a;\n\t        if (b2ac < 0) { continue; }\n\t        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t1 && t1 < 1) {\n\t            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n\t            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n\t        }\n\t        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t2 && t2 < 1) {\n\t            if (i === 0) { this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n\t            if (i === 1) { this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Add a quadratic curve to the bounding box.\n\t * This extends the bounding box to include the entire quadratic curve.\n\t * @param {number} x0 - The starting X coordinate.\n\t * @param {number} y0 - The starting Y coordinate.\n\t * @param {number} x1 - The X coordinate of the control point.\n\t * @param {number} y1 - The Y coordinate of the control point.\n\t * @param {number} x - The ending X coordinate.\n\t * @param {number} y - The ending Y coordinate.\n\t */\n\tBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n\t    var cp1x = x0 + 2 / 3 * (x1 - x0);\n\t    var cp1y = y0 + 2 / 3 * (y1 - y0);\n\t    var cp2x = cp1x + 1 / 3 * (x - x0);\n\t    var cp2y = cp1y + 1 / 3 * (y - y0);\n\t    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n\t};\n\n\t// Geometric objects\n\n\t/**\n\t * A bézier path containing a set of path commands similar to a SVG path.\n\t * Paths can be drawn on a context using `draw`.\n\t * @exports opentype.Path\n\t * @class\n\t * @constructor\n\t */\n\tfunction Path() {\n\t    this.commands = [];\n\t    this.fill = 'black';\n\t    this.stroke = null;\n\t    this.strokeWidth = 1;\n\t}\n\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.moveTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'M',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.lineTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'L',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * curveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * bezierCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t * @see curveTo\n\t */\n\tPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n\t    this.commands.push({\n\t        type: 'C',\n\t        x1: x1,\n\t        y1: y1,\n\t        x2: x2,\n\t        y2: y2,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadraticCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\tPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n\t    this.commands.push({\n\t        type: 'Q',\n\t        x1: x1,\n\t        y1: y1,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Closes the path\n\t * @function closePath\n\t * @memberof opentype.Path.prototype\n\t */\n\n\t/**\n\t * Close the path\n\t * @function close\n\t * @memberof opentype.Path.prototype\n\t */\n\tPath.prototype.close = Path.prototype.closePath = function() {\n\t    this.commands.push({\n\t        type: 'Z'\n\t    });\n\t};\n\n\t/**\n\t * Add the given path or list of commands to the commands of this path.\n\t * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n\t */\n\tPath.prototype.extend = function(pathOrCommands) {\n\t    if (pathOrCommands.commands) {\n\t        pathOrCommands = pathOrCommands.commands;\n\t    } else if (pathOrCommands instanceof BoundingBox) {\n\t        var box = pathOrCommands;\n\t        this.moveTo(box.x1, box.y1);\n\t        this.lineTo(box.x2, box.y1);\n\t        this.lineTo(box.x2, box.y2);\n\t        this.lineTo(box.x1, box.y2);\n\t        this.close();\n\t        return;\n\t    }\n\n\t    Array.prototype.push.apply(this.commands, pathOrCommands);\n\t};\n\n\t/**\n\t * Calculate the bounding box of the path.\n\t * @returns {opentype.BoundingBox}\n\t */\n\tPath.prototype.getBoundingBox = function() {\n\t    var box = new BoundingBox();\n\n\t    var startX = 0;\n\t    var startY = 0;\n\t    var prevX = 0;\n\t    var prevY = 0;\n\t    for (var i = 0; i < this.commands.length; i++) {\n\t        var cmd = this.commands[i];\n\t        switch (cmd.type) {\n\t            case 'M':\n\t                box.addPoint(cmd.x, cmd.y);\n\t                startX = prevX = cmd.x;\n\t                startY = prevY = cmd.y;\n\t                break;\n\t            case 'L':\n\t                box.addPoint(cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'Q':\n\t                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'C':\n\t                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'Z':\n\t                prevX = startX;\n\t                prevY = startY;\n\t                break;\n\t            default:\n\t                throw new Error('Unexpected path command ' + cmd.type);\n\t        }\n\t    }\n\t    if (box.isEmpty()) {\n\t        box.addPoint(0, 0);\n\t    }\n\t    return box;\n\t};\n\n\t/**\n\t * Draw the path to a 2D context.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n\t */\n\tPath.prototype.draw = function(ctx) {\n\t    ctx.beginPath();\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this.commands[i];\n\t        if (cmd.type === 'M') {\n\t            ctx.moveTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            ctx.lineTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            ctx.closePath();\n\t        }\n\t    }\n\n\t    if (this.fill) {\n\t        ctx.fillStyle = this.fill;\n\t        ctx.fill();\n\t    }\n\n\t    if (this.stroke) {\n\t        ctx.strokeStyle = this.stroke;\n\t        ctx.lineWidth = this.strokeWidth;\n\t        ctx.stroke();\n\t    }\n\t};\n\n\t/**\n\t * Convert the Path to a string of path data instructions\n\t * See http://www.w3.org/TR/SVG/paths.html#PathData\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toPathData = function(decimalPlaces) {\n\t    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n\t    function floatToString(v) {\n\t        if (Math.round(v) === v) {\n\t            return '' + Math.round(v);\n\t        } else {\n\t            return v.toFixed(decimalPlaces);\n\t        }\n\t    }\n\n\t    function packValues() {\n\t        var arguments$1 = arguments;\n\n\t        var s = '';\n\t        for (var i = 0; i < arguments.length; i += 1) {\n\t            var v = arguments$1[i];\n\t            if (v >= 0 && i > 0) {\n\t                s += ' ';\n\t            }\n\n\t            s += floatToString(v);\n\t        }\n\n\t        return s;\n\t    }\n\n\t    var d = '';\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this.commands[i];\n\t        if (cmd.type === 'M') {\n\t            d += 'M' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            d += 'L' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            d += 'Z';\n\t        }\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * Convert the path to an SVG <path> element, as a string.\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toSVG = function(decimalPlaces) {\n\t    var svg = '<path d=\"';\n\t    svg += this.toPathData(decimalPlaces);\n\t    svg += '\"';\n\t    if (this.fill && this.fill !== 'black') {\n\t        if (this.fill === null) {\n\t            svg += ' fill=\"none\"';\n\t        } else {\n\t            svg += ' fill=\"' + this.fill + '\"';\n\t        }\n\t    }\n\n\t    if (this.stroke) {\n\t        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n\t    }\n\n\t    svg += '/>';\n\t    return svg;\n\t};\n\n\t/**\n\t * Convert the path to a DOM element.\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {SVGPathElement}\n\t */\n\tPath.prototype.toDOMElement = function(decimalPlaces) {\n\t    var temporaryPath = this.toPathData(decimalPlaces);\n\t    var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n\t    newPath.setAttribute('d', temporaryPath);\n\n\t    return newPath;\n\t};\n\n\t// Run-time checking of preconditions.\n\n\tfunction fail(message) {\n\t    throw new Error(message);\n\t}\n\n\t// Precondition function that checks if the given predicate is true.\n\t// If not, it will throw an error.\n\tfunction argument(predicate, message) {\n\t    if (!predicate) {\n\t        fail(message);\n\t    }\n\t}\n\tvar check = { fail: fail, argument: argument, assert: argument };\n\n\t// Data types used in the OpenType font file.\n\n\tvar LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n\tvar LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n\t/**\n\t * @exports opentype.decode\n\t * @class\n\t */\n\tvar decode = {};\n\t/**\n\t * @exports opentype.encode\n\t * @class\n\t */\n\tvar encode = {};\n\t/**\n\t * @exports opentype.sizeOf\n\t * @class\n\t */\n\tvar sizeOf = {};\n\n\t// Return a function that always returns the same value.\n\tfunction constant(v) {\n\t    return function() {\n\t        return v;\n\t    };\n\t}\n\n\t// OpenType data types //////////////////////////////////////////////////////\n\n\t/**\n\t * Convert an 8-bit unsigned integer to a list of 1 byte.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.BYTE = function(v) {\n\t    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n\t    return [v];\n\t};\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.BYTE = constant(1);\n\n\t/**\n\t * Convert a 8-bit signed integer to a list of 1 byte.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHAR = function(v) {\n\t    return [v.charCodeAt(0)];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.CHAR = constant(1);\n\n\t/**\n\t * Convert an ASCII string to a list of bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHARARRAY = function(v) {\n\t    if (typeof v === 'undefined') {\n\t        v = '';\n\t        console.warn('Undefined CHARARRAY encountered and treated as an empty string. This is probably caused by a missing glyph name.');\n\t    }\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        b[i] = v.charCodeAt(i);\n\t    }\n\n\t    return b;\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARARRAY = function(v) {\n\t    if (typeof v === 'undefined') {\n\t        return 0;\n\t    }\n\t    return v.length;\n\t};\n\n\t/**\n\t * Convert a 16-bit unsigned integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.USHORT = function(v) {\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.USHORT = constant(2);\n\n\t/**\n\t * Convert a 16-bit signed integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.SHORT = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT16) {\n\t        v = -(2 * LIMIT16 - v);\n\t    }\n\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.SHORT = constant(2);\n\n\t/**\n\t * Convert a 24-bit unsigned integer to a list of 3 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.UINT24 = function(v) {\n\t    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.UINT24 = constant(3);\n\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.ULONG = function(v) {\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.ULONG = constant(4);\n\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONG = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT32) {\n\t        v = -(2 * LIMIT32 - v);\n\t    }\n\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONG = constant(4);\n\n\tencode.FIXED = encode.ULONG;\n\tsizeOf.FIXED = sizeOf.ULONG;\n\n\tencode.FWORD = encode.SHORT;\n\tsizeOf.FWORD = sizeOf.SHORT;\n\n\tencode.UFWORD = encode.USHORT;\n\tsizeOf.UFWORD = sizeOf.USHORT;\n\n\t/**\n\t * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONGDATETIME = function(v) {\n\t    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONGDATETIME = constant(8);\n\n\t/**\n\t * Convert a 4-char tag to a list of 4 bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.TAG = function(v) {\n\t    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n\t    return [v.charCodeAt(0),\n\t            v.charCodeAt(1),\n\t            v.charCodeAt(2),\n\t            v.charCodeAt(3)];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.TAG = constant(4);\n\n\t// CFF data types ///////////////////////////////////////////////////////////\n\n\tencode.Card8 = encode.BYTE;\n\tsizeOf.Card8 = sizeOf.BYTE;\n\n\tencode.Card16 = encode.USHORT;\n\tsizeOf.Card16 = sizeOf.USHORT;\n\n\tencode.OffSize = encode.BYTE;\n\tsizeOf.OffSize = sizeOf.BYTE;\n\n\tencode.SID = encode.USHORT;\n\tsizeOf.SID = sizeOf.USHORT;\n\n\t// Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t/**\n\t * Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER = function(v) {\n\t    if (v >= -107 && v <= 107) {\n\t        return [v + 139];\n\t    } else if (v >= 108 && v <= 1131) {\n\t        v = v - 108;\n\t        return [(v >> 8) + 247, v & 0xFF];\n\t    } else if (v >= -1131 && v <= -108) {\n\t        v = -v - 108;\n\t        return [(v >> 8) + 251, v & 0xFF];\n\t    } else if (v >= -32768 && v <= 32767) {\n\t        return encode.NUMBER16(v);\n\t    } else {\n\t        return encode.NUMBER32(v);\n\t    }\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.NUMBER = function(v) {\n\t    return encode.NUMBER(v).length;\n\t};\n\n\t/**\n\t * Convert a signed number between -32768 and +32767 to a three-byte value.\n\t * This ensures we always use three bytes, but is not the most compact format.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER16 = function(v) {\n\t    return [28, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER16 = constant(3);\n\n\t/**\n\t * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n\t * This is useful if you want to be sure you always use four bytes,\n\t * at the expense of wasting a few bytes for smaller numbers.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER32 = function(v) {\n\t    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER32 = constant(5);\n\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.REAL = function(v) {\n\t    var value = v.toString();\n\n\t    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n\t    // This code converts it back to a number without the epsilon.\n\t    var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n\t    if (m) {\n\t        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n\t        value = (Math.round(v * epsilon) / epsilon).toString();\n\t    }\n\n\t    var nibbles = '';\n\t    for (var i = 0, ii = value.length; i < ii; i += 1) {\n\t        var c = value[i];\n\t        if (c === 'e') {\n\t            nibbles += value[++i] === '-' ? 'c' : 'b';\n\t        } else if (c === '.') {\n\t            nibbles += 'a';\n\t        } else if (c === '-') {\n\t            nibbles += 'e';\n\t        } else {\n\t            nibbles += c;\n\t        }\n\t    }\n\n\t    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n\t    var out = [30];\n\t    for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n\t        out.push(parseInt(nibbles.substr(i$1, 2), 16));\n\t    }\n\n\t    return out;\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.REAL = function(v) {\n\t    return encode.REAL(v).length;\n\t};\n\n\tencode.NAME = encode.CHARARRAY;\n\tsizeOf.NAME = sizeOf.CHARARRAY;\n\n\tencode.STRING = encode.CHARARRAY;\n\tsizeOf.STRING = sizeOf.CHARARRAY;\n\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF8 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes;\n\t    for (var j = 0; j < numChars; j++, offset += 1) {\n\t        codePoints[j] = data.getUint8(offset);\n\t    }\n\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF16 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes / 2;\n\t    for (var j = 0; j < numChars; j++, offset += 2) {\n\t        codePoints[j] = data.getUint16(offset);\n\t    }\n\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\n\t/**\n\t * Convert a JavaScript string to UTF16-BE.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.UTF16 = function(v) {\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        var codepoint = v.charCodeAt(i);\n\t        b[b.length] = (codepoint >> 8) & 0xFF;\n\t        b[b.length] = codepoint & 0xFF;\n\t    }\n\n\t    return b;\n\t};\n\n\t/**\n\t * @param {string}\n\t * @returns {number}\n\t */\n\tsizeOf.UTF16 = function(v) {\n\t    return v.length * 2;\n\t};\n\n\t// Data for converting old eight-bit Macintosh encodings to Unicode.\n\t// This representation is optimized for decoding; encoding is slower\n\t// and needs more memory. The assumption is that all opentype.js users\n\t// want to open fonts, but saving a font will be comparatively rare\n\t// so it can be more expensive. Keyed by IANA character set name.\n\t//\n\t// Python script for generating these strings:\n\t//\n\t//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n\t//     print(s.encode('utf-8'))\n\t/**\n\t * @private\n\t */\n\tvar eightBitMacEncodings = {\n\t    'x-mac-croatian':  // Python: 'mac_croatian'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n\t    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n\t    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n\t    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n\t    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n\t    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n\t    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n\t    'x-mac-greek':  // Python: 'mac_greek'\n\t    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n\t    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n\t    'x-mac-icelandic':  // Python: 'mac_iceland'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n\t    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n\t    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n\t    'x-mac-ce':  // Python: 'mac_latin2'\n\t    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n\t    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n\t    macintosh:  // Python: 'mac_roman'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-romanian':  // Python: 'mac_romanian'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-turkish':  // Python: 'mac_turkish'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n\t};\n\n\t/**\n\t * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n\t * string, or 'undefined' if the encoding is unsupported. For example, we do\n\t * not support Chinese, Japanese or Korean because these would need large\n\t * mapping tables.\n\t * @param {DataView} dataView\n\t * @param {number} offset\n\t * @param {number} dataLength\n\t * @param {string} encoding\n\t * @returns {string}\n\t */\n\tdecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n\t    var table = eightBitMacEncodings[encoding];\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var result = '';\n\t    for (var i = 0; i < dataLength; i++) {\n\t        var c = dataView.getUint8(offset + i);\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c <= 0x7F) {\n\t            result += String.fromCharCode(c);\n\t        } else {\n\t            result += table[c & 0x7F];\n\t        }\n\t    }\n\n\t    return result;\n\t};\n\n\t// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n\t// Unicode character codes to their 8-bit MacOS equivalent. This table\n\t// is not exactly a super cheap data structure, but we do not care because\n\t// encoding Macintosh strings is only rarely needed in typical applications.\n\tvar macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n\tvar macEncodingCacheKeys;\n\tvar getMacEncodingTable = function (encoding) {\n\t    // Since we use encoding as a cache key for WeakMap, it has to be\n\t    // a String object and not a literal. And at least on NodeJS 2.10.1,\n\t    // WeakMap requires that the same String instance is passed for cache hits.\n\t    if (!macEncodingCacheKeys) {\n\t        macEncodingCacheKeys = {};\n\t        for (var e in eightBitMacEncodings) {\n\t            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n\t            macEncodingCacheKeys[e] = new String(e);\n\t        }\n\t    }\n\n\t    var cacheKey = macEncodingCacheKeys[encoding];\n\t    if (cacheKey === undefined) {\n\t        return undefined;\n\t    }\n\n\t    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n\t    // since garbage collection may run at any time, it could also kick in\n\t    // between the calls to cache.has() and cache.get(). In that case,\n\t    // we would return 'undefined' even though we do support the encoding.\n\t    if (macEncodingTableCache) {\n\t        var cachedTable = macEncodingTableCache.get(cacheKey);\n\t        if (cachedTable !== undefined) {\n\t            return cachedTable;\n\t        }\n\t    }\n\n\t    var decodingTable = eightBitMacEncodings[encoding];\n\t    if (decodingTable === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var encodingTable = {};\n\t    for (var i = 0; i < decodingTable.length; i++) {\n\t        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n\t    }\n\n\t    if (macEncodingTableCache) {\n\t        macEncodingTableCache.set(cacheKey, encodingTable);\n\t    }\n\n\t    return encodingTable;\n\t};\n\n\t/**\n\t * Encodes an old-style Macintosh string. Returns a byte array upon success.\n\t * If the requested encoding is unsupported, or if the input string contains\n\t * a character that cannot be expressed in the encoding, the function returns\n\t * 'undefined'.\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {Array}\n\t */\n\tencode.MACSTRING = function(str, encoding) {\n\t    var table = getMacEncodingTable(encoding);\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var result = [];\n\t    for (var i = 0; i < str.length; i++) {\n\t        var c = str.charCodeAt(i);\n\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c >= 0x80) {\n\t            c = table[c];\n\t            if (c === undefined) {\n\t                // str contains a Unicode character that cannot be encoded\n\t                // in the requested encoding.\n\t                return undefined;\n\t            }\n\t        }\n\t        result[i] = c;\n\t        // result.push(c);\n\t    }\n\n\t    return result;\n\t};\n\n\t/**\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {number}\n\t */\n\tsizeOf.MACSTRING = function(str, encoding) {\n\t    var b = encode.MACSTRING(str, encoding);\n\t    if (b !== undefined) {\n\t        return b.length;\n\t    } else {\n\t        return 0;\n\t    }\n\t};\n\n\t// Helper for encode.VARDELTAS\n\tfunction isByteEncodable(value) {\n\t    return value >= -128 && value <= 127;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(0x80 | (runLength - 1));\n\t    return pos;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsBytes(deltas, offset, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    var pos = offset;\n\t    while (pos < numDeltas && runLength < 64) {\n\t        var value = deltas[pos];\n\t        if (!isByteEncodable(value)) {\n\t            break;\n\t        }\n\n\t        // Within a byte-encoded run of deltas, a single zero is best\n\t        // stored literally as 0x00 value. However, if we have two or\n\t        // more zeroes in a sequence, it is better to start a new run.\n\t        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n\t        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n\t        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n\t        // when starting a new run.\n\t        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n\t            break;\n\t        }\n\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(runLength - 1);\n\t    for (var i = offset; i < pos; ++i) {\n\t        result.push((deltas[i] + 256) & 0xff);\n\t    }\n\t    return pos;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsWords(deltas, offset, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    var pos = offset;\n\t    while (pos < numDeltas && runLength < 64) {\n\t        var value = deltas[pos];\n\n\t        // Within a word-encoded run of deltas, it is easiest to start\n\t        // a new run (with a different encoding) whenever we encounter\n\t        // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n\t        // needs 7 bytes when storing the zero inside the current run\n\t        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n\t        // new run (40 66 66 80 40 77 77).\n\t        if (value === 0) {\n\t            break;\n\t        }\n\n\t        // Within a word-encoded run of deltas, a single value in the\n\t        // range (-128..127) should be encoded within the current run\n\t        // because it is more compact. For example, the sequence\n\t        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n\t        // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n\t        // a new run (40 66 66 00 02 40 77 77).\n\t        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n\t            break;\n\t        }\n\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(0x40 | (runLength - 1));\n\t    for (var i = offset; i < pos; ++i) {\n\t        var val = deltas[i];\n\t        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n\t    }\n\t    return pos;\n\t}\n\n\t/**\n\t * Encode a list of variation adjustment deltas.\n\t *\n\t * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n\t * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n\t * when generating instances of variation fonts.\n\t *\n\t * @see https://www.microsoft.com/typography/otspec/gvar.htm\n\t * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n\t * @param {Array}\n\t * @return {Array}\n\t */\n\tencode.VARDELTAS = function(deltas) {\n\t    var pos = 0;\n\t    var result = [];\n\t    while (pos < deltas.length) {\n\t        var value = deltas[pos];\n\t        if (value === 0) {\n\t            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n\t        } else if (value >= -128 && value <= 127) {\n\t            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n\t        } else {\n\t            pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\t// Convert a list of values to a CFF INDEX structure.\n\t// The values should be objects containing name / type / value.\n\t/**\n\t * @param {Array} l\n\t * @returns {Array}\n\t */\n\tencode.INDEX = function(l) {\n\t    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n\t    //    i, v;\n\t    // Because we have to know which data type to use to encode the offsets,\n\t    // we have to go through the values twice: once to encode the data and\n\t    // calculate the offsets, then again to encode the offsets using the fitting data type.\n\t    var offset = 1; // First offset is always 1.\n\t    var offsets = [offset];\n\t    var data = [];\n\t    for (var i = 0; i < l.length; i += 1) {\n\t        var v = encode.OBJECT(l[i]);\n\t        Array.prototype.push.apply(data, v);\n\t        offset += v.length;\n\t        offsets.push(offset);\n\t    }\n\n\t    if (data.length === 0) {\n\t        return [0, 0];\n\t    }\n\n\t    var encodedOffsets = [];\n\t    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n\t    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n\t    for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n\t        var encodedOffset = offsetEncoder(offsets[i$1]);\n\t        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n\t    }\n\n\t    return Array.prototype.concat(encode.Card16(l.length),\n\t                           encode.OffSize(offSize),\n\t                           encodedOffsets,\n\t                           data);\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.INDEX = function(v) {\n\t    return encode.INDEX(v).length;\n\t};\n\n\t/**\n\t * Convert an object to a CFF DICT structure.\n\t * The keys should be numeric.\n\t * The values should be objects containing name / type / value.\n\t * @param {Object} m\n\t * @returns {Array}\n\t */\n\tencode.DICT = function(m) {\n\t    var d = [];\n\t    var keys = Object.keys(m);\n\t    var length = keys.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        // Object.keys() return string keys, but our keys are always numeric.\n\t        var k = parseInt(keys[i], 0);\n\t        var v = m[k];\n\t        // Value comes before the key.\n\t        d = d.concat(encode.OPERAND(v.value, v.type));\n\t        d = d.concat(encode.OPERATOR(k));\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.DICT = function(m) {\n\t    return encode.DICT(m).length;\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.OPERATOR = function(v) {\n\t    if (v < 1200) {\n\t        return [v];\n\t    } else {\n\t        return [12, v - 1200];\n\t    }\n\t};\n\n\t/**\n\t * @param {Array} v\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.OPERAND = function(v, type) {\n\t    var d = [];\n\t    if (Array.isArray(type)) {\n\t        for (var i = 0; i < type.length; i += 1) {\n\t            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n\t            d = d.concat(encode.OPERAND(v[i], type[i]));\n\t        }\n\t    } else {\n\t        if (type === 'SID') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'offset') {\n\t            // We make it easy for ourselves and always encode offsets as\n\t            // 4 bytes. This makes offset calculation for the top dict easier.\n\t            d = d.concat(encode.NUMBER32(v));\n\t        } else if (type === 'number') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'real') {\n\t            d = d.concat(encode.REAL(v));\n\t        } else {\n\t            throw new Error('Unknown operand type ' + type);\n\t            // FIXME Add support for booleans\n\t        }\n\t    }\n\n\t    return d;\n\t};\n\n\tencode.OP = encode.BYTE;\n\tsizeOf.OP = sizeOf.BYTE;\n\n\t// memoize charstring encoding using WeakMap if available\n\tvar wmm = typeof WeakMap === 'function' && new WeakMap();\n\n\t/**\n\t * Convert a list of CharString operations to bytes.\n\t * @param {Array}\n\t * @returns {Array}\n\t */\n\tencode.CHARSTRING = function(ops) {\n\t    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n\t    if (wmm) {\n\t        var cachedValue = wmm.get(ops);\n\t        if (cachedValue !== undefined) {\n\t            return cachedValue;\n\t        }\n\t    }\n\n\t    var d = [];\n\t    var length = ops.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var op = ops[i];\n\t        d = d.concat(encode[op.type](op.value));\n\t    }\n\n\t    if (wmm) {\n\t        wmm.set(ops, d);\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARSTRING = function(ops) {\n\t    return encode.CHARSTRING(ops).length;\n\t};\n\n\t// Utility functions ////////////////////////////////////////////////////////\n\n\t/**\n\t * Convert an object containing name / type / value to bytes.\n\t * @param {Object}\n\t * @returns {Array}\n\t */\n\tencode.OBJECT = function(v) {\n\t    var encodingFunction = encode[v.type];\n\t    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n\t    return encodingFunction(v.value);\n\t};\n\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.OBJECT = function(v) {\n\t    var sizeOfFunction = sizeOf[v.type];\n\t    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n\t    return sizeOfFunction(v.value);\n\t};\n\n\t/**\n\t * Convert a table object to bytes.\n\t * A table contains a list of fields containing the metadata (name, type and default value).\n\t * The table itself has the field values set as attributes.\n\t * @param {opentype.Table}\n\t * @returns {Array}\n\t */\n\tencode.TABLE = function(table) {\n\t    var d = [];\n\t    var length = table.fields.length;\n\t    var subtables = [];\n\t    var subtableOffsets = [];\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var encodingFunction = encode[field.type];\n\t        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\n\t        var bytes = encodingFunction(value);\n\n\t        if (field.type === 'TABLE') {\n\t            subtableOffsets.push(d.length);\n\t            d = d.concat([0, 0]);\n\t            subtables.push(bytes);\n\t        } else {\n\t            d = d.concat(bytes);\n\t        }\n\t    }\n\n\t    for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n\t        var o = subtableOffsets[i$1];\n\t        var offset = d.length;\n\t        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n\t        d[o] = offset >> 8;\n\t        d[o + 1] = offset & 0xff;\n\t        d = d.concat(subtables[i$1]);\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {opentype.Table}\n\t * @returns {number}\n\t */\n\tsizeOf.TABLE = function(table) {\n\t    var numBytes = 0;\n\t    var length = table.fields.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var sizeOfFunction = sizeOf[field.type];\n\t        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\n\t        numBytes += sizeOfFunction(value);\n\n\t        // Subtables take 2 more bytes for offsets.\n\t        if (field.type === 'TABLE') {\n\t            numBytes += 2;\n\t        }\n\t    }\n\n\t    return numBytes;\n\t};\n\n\tencode.RECORD = encode.TABLE;\n\tsizeOf.RECORD = sizeOf.TABLE;\n\n\t// Merge in a list of bytes.\n\tencode.LITERAL = function(v) {\n\t    return v;\n\t};\n\n\tsizeOf.LITERAL = function(v) {\n\t    return v.length;\n\t};\n\n\t// Table metadata\n\n\t/**\n\t * @exports opentype.Table\n\t * @class\n\t * @param {string} tableName\n\t * @param {Array} fields\n\t * @param {Object} options\n\t * @constructor\n\t */\n\tfunction Table(tableName, fields, options) {\n\t    // For coverage tables with coverage format 2, we do not want to add the coverage data directly to the table object,\n\t    // as this will result in wrong encoding order of the coverage data on serialization to bytes.\n\t    // The fallback of using the field values directly when not present on the table is handled in types.encode.TABLE() already.\n\t    if (fields.length && (fields[0].name !== 'coverageFormat' || fields[0].value === 1)) {\n\t        for (var i = 0; i < fields.length; i += 1) {\n\t            var field = fields[i];\n\t            this[field.name] = field.value;\n\t        }\n\t    }\n\n\t    this.tableName = tableName;\n\t    this.fields = fields;\n\t    if (options) {\n\t        var optionKeys = Object.keys(options);\n\t        for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n\t            var k = optionKeys[i$1];\n\t            var v = options[k];\n\t            if (this[k] !== undefined) {\n\t                this[k] = v;\n\t            }\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * Encodes the table and returns an array of bytes\n\t * @return {Array}\n\t */\n\tTable.prototype.encode = function() {\n\t    return encode.TABLE(this);\n\t};\n\n\t/**\n\t * Get the size of the table.\n\t * @return {number}\n\t */\n\tTable.prototype.sizeOf = function() {\n\t    return sizeOf.TABLE(this);\n\t};\n\n\t/**\n\t * @private\n\t */\n\tfunction ushortList(itemName, list, count) {\n\t    if (count === undefined) {\n\t        count = list.length;\n\t    }\n\t    var fields = new Array(list.length + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < list.length; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n\t    }\n\t    return fields;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tfunction tableList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = new Array(count + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n\t    }\n\t    return fields;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tfunction recordList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = [];\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields = fields.concat(itemCallback(records[i], i));\n\t    }\n\t    return fields;\n\t}\n\n\t// Common Layout Tables\n\n\t/**\n\t * @exports opentype.Coverage\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction Coverage(coverageTable) {\n\t    if (coverageTable.format === 1) {\n\t        Table.call(this, 'coverageTable',\n\t            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n\t            .concat(ushortList('glyph', coverageTable.glyphs))\n\t        );\n\t    } else if (coverageTable.format === 2) {\n\t        Table.call(this, 'coverageTable',\n\t            [{name: 'coverageFormat', type: 'USHORT', value: 2}]\n\t            .concat(recordList('rangeRecord', coverageTable.ranges, function(RangeRecord) {\n\t                return [\n\t                    {name: 'startGlyphID', type: 'USHORT', value: RangeRecord.start},\n\t                    {name: 'endGlyphID', type: 'USHORT', value: RangeRecord.end},\n\t                    {name: 'startCoverageIndex', type: 'USHORT', value: RangeRecord.index} ];\n\t            }))\n\t        );\n\t    } else {\n\t        check.assert(false, 'Coverage format must be 1 or 2.');\n\t    }\n\t}\n\tCoverage.prototype = Object.create(Table.prototype);\n\tCoverage.prototype.constructor = Coverage;\n\n\tfunction ScriptList(scriptListTable) {\n\t    Table.call(this, 'scriptListTable',\n\t        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n\t            var script = scriptRecord.script;\n\t            var defaultLangSys = script.defaultLangSys;\n\t            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n\t            return [\n\t                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n\t                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n\t                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n\t                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n\t                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n\t                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n\t                        var langSys = langSysRecord.langSys;\n\t                        return [\n\t                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n\t                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n\t                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n\t                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n\t                        ];\n\t                    })))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tScriptList.prototype = Object.create(Table.prototype);\n\tScriptList.prototype.constructor = ScriptList;\n\n\t/**\n\t * @exports opentype.FeatureList\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction FeatureList(featureListTable) {\n\t    Table.call(this, 'featureListTable',\n\t        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n\t            var feature = featureRecord.feature;\n\t            return [\n\t                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n\t                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n\t                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tFeatureList.prototype = Object.create(Table.prototype);\n\tFeatureList.prototype.constructor = FeatureList;\n\n\t/**\n\t * @exports opentype.LookupList\n\t * @class\n\t * @param {opentype.Table}\n\t * @param {Object}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction LookupList(lookupListTable, subtableMakers) {\n\t    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n\t        var subtableCallback = subtableMakers[lookupTable.lookupType];\n\t        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n\t        return new Table('lookupTable', [\n\t            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n\t            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n\t        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n\t    }));\n\t}\n\tLookupList.prototype = Object.create(Table.prototype);\n\tLookupList.prototype.constructor = LookupList;\n\n\t// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n\t// Don't use offsets inside Records (probable bug), only in Tables.\n\tvar table = {\n\t    Table: Table,\n\t    Record: Table,\n\t    Coverage: Coverage,\n\t    ScriptList: ScriptList,\n\t    FeatureList: FeatureList,\n\t    LookupList: LookupList,\n\t    ushortList: ushortList,\n\t    tableList: tableList,\n\t    recordList: recordList,\n\t};\n\n\t// Parsing utility functions\n\n\t// Retrieve an unsigned byte from the DataView.\n\tfunction getByte(dataView, offset) {\n\t    return dataView.getUint8(offset);\n\t}\n\n\t// Retrieve an unsigned 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\tfunction getUShort(dataView, offset) {\n\t    return dataView.getUint16(offset, false);\n\t}\n\n\t// Retrieve a signed 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\tfunction getShort(dataView, offset) {\n\t    return dataView.getInt16(offset, false);\n\t}\n\n\t// Retrieve an unsigned 32-bit long from the DataView.\n\t// The value is stored in big endian.\n\tfunction getULong(dataView, offset) {\n\t    return dataView.getUint32(offset, false);\n\t}\n\n\t// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n\t// The value is stored in big endian.\n\tfunction getFixed(dataView, offset) {\n\t    var decimal = dataView.getInt16(offset, false);\n\t    var fraction = dataView.getUint16(offset + 2, false);\n\t    return decimal + fraction / 65535;\n\t}\n\n\t// Retrieve a 4-character tag from the DataView.\n\t// Tags are used to identify tables.\n\tfunction getTag(dataView, offset) {\n\t    var tag = '';\n\t    for (var i = offset; i < offset + 4; i += 1) {\n\t        tag += String.fromCharCode(dataView.getInt8(i));\n\t    }\n\n\t    return tag;\n\t}\n\n\t// Retrieve an offset from the DataView.\n\t// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n\tfunction getOffset(dataView, offset, offSize) {\n\t    var v = 0;\n\t    for (var i = 0; i < offSize; i += 1) {\n\t        v <<= 8;\n\t        v += dataView.getUint8(offset + i);\n\t    }\n\n\t    return v;\n\t}\n\n\t// Retrieve a number of bytes from start offset to the end offset from the DataView.\n\tfunction getBytes(dataView, startOffset, endOffset) {\n\t    var bytes = [];\n\t    for (var i = startOffset; i < endOffset; i += 1) {\n\t        bytes.push(dataView.getUint8(i));\n\t    }\n\n\t    return bytes;\n\t}\n\n\t// Convert the list of bytes to a string.\n\tfunction bytesToString(bytes) {\n\t    var s = '';\n\t    for (var i = 0; i < bytes.length; i += 1) {\n\t        s += String.fromCharCode(bytes[i]);\n\t    }\n\n\t    return s;\n\t}\n\n\tvar typeOffsets = {\n\t    byte: 1,\n\t    uShort: 2,\n\t    short: 2,\n\t    uLong: 4,\n\t    fixed: 4,\n\t    longDateTime: 8,\n\t    tag: 4\n\t};\n\n\t// A stateful parser that changes the offset whenever a value is retrieved.\n\t// The data is a DataView.\n\tfunction Parser(data, offset) {\n\t    this.data = data;\n\t    this.offset = offset;\n\t    this.relativeOffset = 0;\n\t}\n\n\tParser.prototype.parseByte = function() {\n\t    var v = this.data.getUint8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\n\tParser.prototype.parseChar = function() {\n\t    var v = this.data.getInt8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\n\tParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n\tParser.prototype.parseUShort = function() {\n\t    var v = this.data.getUint16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseCard16 = Parser.prototype.parseUShort;\n\tParser.prototype.parseSID = Parser.prototype.parseUShort;\n\tParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n\tParser.prototype.parseShort = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseF2Dot14 = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseULong = function() {\n\t    var v = getULong(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\n\tParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\n\tParser.prototype.parseFixed = function() {\n\t    var v = getFixed(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\n\tParser.prototype.parseString = function(length) {\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    var string = '';\n\t    this.relativeOffset += length;\n\t    for (var i = 0; i < length; i++) {\n\t        string += String.fromCharCode(dataView.getUint8(offset + i));\n\t    }\n\n\t    return string;\n\t};\n\n\tParser.prototype.parseTag = function() {\n\t    return this.parseString(4);\n\t};\n\n\t// LONGDATETIME is a 64-bit integer.\n\t// JavaScript and unix timestamps traditionally use 32 bits, so we\n\t// only take the last 32 bits.\n\t// + Since until 2038 those bits will be filled by zeros we can ignore them.\n\tParser.prototype.parseLongDateTime = function() {\n\t    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n\t    // Subtract seconds between 01/01/1904 and 01/01/1970\n\t    // to convert Apple Mac timestamp to Standard Unix timestamp\n\t    v -= 2082844800;\n\t    this.relativeOffset += 8;\n\t    return v;\n\t};\n\n\tParser.prototype.parseVersion = function(minorBase) {\n\t    var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n\t    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n\t    // Default returns the correct number if minor = 0xN000 where N is 0-9\n\t    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n\t    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n\t    this.relativeOffset += 4;\n\t    if (minorBase === undefined) { minorBase = 0x1000; }\n\t    return major + minor / minorBase / 10;\n\t};\n\n\tParser.prototype.skip = function(type, amount) {\n\t    if (amount === undefined) {\n\t        amount = 1;\n\t    }\n\n\t    this.relativeOffset += typeOffsets[type] * amount;\n\t};\n\n\t///// Parsing lists and records ///////////////////////////////\n\n\t// Parse a list of 32 bit unsigned integers.\n\tParser.prototype.parseULongList = function(count) {\n\t    if (count === undefined) { count = this.parseULong(); }\n\t    var offsets = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        offsets[i] = dataView.getUint32(offset);\n\t        offset += 4;\n\t    }\n\n\t    this.relativeOffset += count * 4;\n\t    return offsets;\n\t};\n\n\t// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n\t// or provided as an argument.\n\tParser.prototype.parseOffset16List =\n\tParser.prototype.parseUShortList = function(count) {\n\t    if (count === undefined) { count = this.parseUShort(); }\n\t    var offsets = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        offsets[i] = dataView.getUint16(offset);\n\t        offset += 2;\n\t    }\n\n\t    this.relativeOffset += count * 2;\n\t    return offsets;\n\t};\n\n\t// Parses a list of 16 bit signed integers.\n\tParser.prototype.parseShortList = function(count) {\n\t    var list = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = dataView.getInt16(offset);\n\t        offset += 2;\n\t    }\n\n\t    this.relativeOffset += count * 2;\n\t    return list;\n\t};\n\n\t// Parses a list of bytes.\n\tParser.prototype.parseByteList = function(count) {\n\t    var list = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = dataView.getUint8(offset++);\n\t    }\n\n\t    this.relativeOffset += count;\n\t    return list;\n\t};\n\n\t/**\n\t * Parse a list of items.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * itemCallback is one of the Parser methods.\n\t */\n\tParser.prototype.parseList = function(count, itemCallback) {\n\t    if (!itemCallback) {\n\t        itemCallback = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = itemCallback.call(this);\n\t    }\n\t    return list;\n\t};\n\n\tParser.prototype.parseList32 = function(count, itemCallback) {\n\t    if (!itemCallback) {\n\t        itemCallback = count;\n\t        count = this.parseULong();\n\t    }\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = itemCallback.call(this);\n\t    }\n\t    return list;\n\t};\n\n\t/**\n\t * Parse a list of records.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\t */\n\tParser.prototype.parseRecordList = function(count, recordDescription) {\n\t    // If the count argument is absent, read it in the stream.\n\t    if (!recordDescription) {\n\t        recordDescription = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var records = new Array(count);\n\t    var fields = Object.keys(recordDescription);\n\t    for (var i = 0; i < count; i++) {\n\t        var rec = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = recordDescription[fieldName];\n\t            rec[fieldName] = fieldType.call(this);\n\t        }\n\t        records[i] = rec;\n\t    }\n\t    return records;\n\t};\n\n\tParser.prototype.parseRecordList32 = function(count, recordDescription) {\n\t    // If the count argument is absent, read it in the stream.\n\t    if (!recordDescription) {\n\t        recordDescription = count;\n\t        count = this.parseULong();\n\t    }\n\t    var records = new Array(count);\n\t    var fields = Object.keys(recordDescription);\n\t    for (var i = 0; i < count; i++) {\n\t        var rec = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = recordDescription[fieldName];\n\t            rec[fieldName] = fieldType.call(this);\n\t        }\n\t        records[i] = rec;\n\t    }\n\t    return records;\n\t};\n\n\t// Parse a data structure into an object\n\t// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\tParser.prototype.parseStruct = function(description) {\n\t    if (typeof description === 'function') {\n\t        return description.call(this);\n\t    } else {\n\t        var fields = Object.keys(description);\n\t        var struct = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = description[fieldName];\n\t            struct[fieldName] = fieldType.call(this);\n\t        }\n\t        return struct;\n\t    }\n\t};\n\n\t/**\n\t * Parse a GPOS valueRecord\n\t * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n\t * valueFormat is optional, if omitted it is read from the stream.\n\t */\n\tParser.prototype.parseValueRecord = function(valueFormat) {\n\t    if (valueFormat === undefined) {\n\t        valueFormat = this.parseUShort();\n\t    }\n\t    if (valueFormat === 0) {\n\t        // valueFormat2 in kerning pairs is most often 0\n\t        // in this case return undefined instead of an empty object, to save space\n\t        return;\n\t    }\n\t    var valueRecord = {};\n\n\t    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n\t    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n\t    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n\t    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n\t    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n\t    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n\t    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n\t    return valueRecord;\n\t};\n\n\t/**\n\t * Parse a list of GPOS valueRecords\n\t * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n\t * valueFormat and valueCount are read from the stream.\n\t */\n\tParser.prototype.parseValueRecordList = function() {\n\t    var valueFormat = this.parseUShort();\n\t    var valueCount = this.parseUShort();\n\t    var values = new Array(valueCount);\n\t    for (var i = 0; i < valueCount; i++) {\n\t        values[i] = this.parseValueRecord(valueFormat);\n\t    }\n\t    return values;\n\t};\n\n\tParser.prototype.parsePointer = function(description) {\n\t    var structOffset = this.parseOffset16();\n\t    if (structOffset > 0) {\n\t        // NULL offset => return undefined\n\t        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n\t    }\n\t    return undefined;\n\t};\n\n\tParser.prototype.parsePointer32 = function(description) {\n\t    var structOffset = this.parseOffset32();\n\t    if (structOffset > 0) {\n\t        // NULL offset => return undefined\n\t        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n\t    }\n\t    return undefined;\n\t};\n\n\t/**\n\t * Parse a list of offsets to lists of 16-bit integers,\n\t * or a list of offsets to lists of offsets to any kind of items.\n\t * If itemCallback is not provided, a list of list of UShort is assumed.\n\t * If provided, itemCallback is called on each item and must parse the item.\n\t * See examples in tables/gsub.js\n\t */\n\tParser.prototype.parseListOfLists = function(itemCallback) {\n\t    var offsets = this.parseOffset16List();\n\t    var count = offsets.length;\n\t    var relativeOffset = this.relativeOffset;\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        var start = offsets[i];\n\t        if (start === 0) {\n\t            // NULL offset\n\t            // Add i as owned property to list. Convenient with assert.\n\t            list[i] = undefined;\n\t            continue;\n\t        }\n\t        this.relativeOffset = start;\n\t        if (itemCallback) {\n\t            var subOffsets = this.parseOffset16List();\n\t            var subList = new Array(subOffsets.length);\n\t            for (var j = 0; j < subOffsets.length; j++) {\n\t                this.relativeOffset = start + subOffsets[j];\n\t                subList[j] = itemCallback.call(this);\n\t            }\n\t            list[i] = subList;\n\t        } else {\n\t            list[i] = this.parseUShortList();\n\t        }\n\t    }\n\t    this.relativeOffset = relativeOffset;\n\t    return list;\n\t};\n\n\t///// Complex tables parsing //////////////////////////////////\n\n\t// Parse a coverage table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\t// parser.offset must point to the start of the table containing the coverage.\n\tParser.prototype.parseCoverage = function() {\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    var count = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            glyphs: this.parseUShortList(count)\n\t        };\n\t    } else if (format === 2) {\n\t        var ranges = new Array(count);\n\t        for (var i = 0; i < count; i++) {\n\t            ranges[i] = {\n\t                start: this.parseUShort(),\n\t                end: this.parseUShort(),\n\t                index: this.parseUShort()\n\t            };\n\t        }\n\t        return {\n\t            format: 2,\n\t            ranges: ranges\n\t        };\n\t    }\n\t    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n\t};\n\n\t// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\tParser.prototype.parseClassDef = function() {\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            startGlyph: this.parseUShort(),\n\t            classes: this.parseUShortList()\n\t        };\n\t    } else if (format === 2) {\n\t        return {\n\t            format: 2,\n\t            ranges: this.parseRecordList({\n\t                start: Parser.uShort,\n\t                end: Parser.uShort,\n\t                classId: Parser.uShort\n\t            })\n\t        };\n\t    }\n\t    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n\t};\n\n\t///// Static methods ///////////////////////////////////\n\t// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n\tParser.list = function(count, itemCallback) {\n\t    return function() {\n\t        return this.parseList(count, itemCallback);\n\t    };\n\t};\n\n\tParser.list32 = function(count, itemCallback) {\n\t    return function() {\n\t        return this.parseList32(count, itemCallback);\n\t    };\n\t};\n\n\tParser.recordList = function(count, recordDescription) {\n\t    return function() {\n\t        return this.parseRecordList(count, recordDescription);\n\t    };\n\t};\n\n\tParser.recordList32 = function(count, recordDescription) {\n\t    return function() {\n\t        return this.parseRecordList32(count, recordDescription);\n\t    };\n\t};\n\n\tParser.pointer = function(description) {\n\t    return function() {\n\t        return this.parsePointer(description);\n\t    };\n\t};\n\n\tParser.pointer32 = function(description) {\n\t    return function() {\n\t        return this.parsePointer32(description);\n\t    };\n\t};\n\n\tParser.tag = Parser.prototype.parseTag;\n\tParser.byte = Parser.prototype.parseByte;\n\tParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n\tParser.uShortList = Parser.prototype.parseUShortList;\n\tParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\n\tParser.uLongList = Parser.prototype.parseULongList;\n\tParser.struct = Parser.prototype.parseStruct;\n\tParser.coverage = Parser.prototype.parseCoverage;\n\tParser.classDef = Parser.prototype.parseClassDef;\n\n\t///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n\tvar langSysTable = {\n\t    reserved: Parser.uShort,\n\t    reqFeatureIndex: Parser.uShort,\n\t    featureIndexes: Parser.uShortList\n\t};\n\n\tParser.prototype.parseScriptList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        script: Parser.pointer({\n\t            defaultLangSys: Parser.pointer(langSysTable),\n\t            langSysRecords: Parser.recordList({\n\t                tag: Parser.tag,\n\t                langSys: Parser.pointer(langSysTable)\n\t            })\n\t        })\n\t    })) || [];\n\t};\n\n\tParser.prototype.parseFeatureList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        feature: Parser.pointer({\n\t            featureParams: Parser.offset16,\n\t            lookupListIndexes: Parser.uShortList\n\t        })\n\t    })) || [];\n\t};\n\n\tParser.prototype.parseLookupList = function(lookupTableParsers) {\n\t    return this.parsePointer(Parser.list(Parser.pointer(function() {\n\t        var lookupType = this.parseUShort();\n\t        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n\t        var lookupFlag = this.parseUShort();\n\t        var useMarkFilteringSet = lookupFlag & 0x10;\n\t        return {\n\t            lookupType: lookupType,\n\t            lookupFlag: lookupFlag,\n\t            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n\t            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n\t        };\n\t    }))) || [];\n\t};\n\n\tParser.prototype.parseFeatureVariationsList = function() {\n\t    return this.parsePointer32(function() {\n\t        var majorVersion = this.parseUShort();\n\t        var minorVersion = this.parseUShort();\n\t        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n\t        var featureVariations = this.parseRecordList32({\n\t            conditionSetOffset: Parser.offset32,\n\t            featureTableSubstitutionOffset: Parser.offset32\n\t        });\n\t        return featureVariations;\n\t    }) || [];\n\t};\n\n\tvar parse = {\n\t    getByte: getByte,\n\t    getCard8: getByte,\n\t    getUShort: getUShort,\n\t    getCard16: getUShort,\n\t    getShort: getShort,\n\t    getULong: getULong,\n\t    getFixed: getFixed,\n\t    getTag: getTag,\n\t    getOffset: getOffset,\n\t    getBytes: getBytes,\n\t    bytesToString: bytesToString,\n\t    Parser: Parser,\n\t};\n\n\t// The `cmap` table stores the mappings from characters to glyphs.\n\n\tfunction parseCmapTableFormat12(cmap, p) {\n\t    //Skip reserved.\n\t    p.parseUShort();\n\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseULong();\n\t    cmap.language = p.parseULong();\n\n\t    var groupCount;\n\t    cmap.groupCount = groupCount = p.parseULong();\n\t    cmap.glyphIndexMap = {};\n\n\t    for (var i = 0; i < groupCount; i += 1) {\n\t        var startCharCode = p.parseULong();\n\t        var endCharCode = p.parseULong();\n\t        var startGlyphId = p.parseULong();\n\n\t        for (var c = startCharCode; c <= endCharCode; c += 1) {\n\t            cmap.glyphIndexMap[c] = startGlyphId;\n\t            startGlyphId++;\n\t        }\n\t    }\n\t}\n\n\tfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseUShort();\n\t    cmap.language = p.parseUShort();\n\n\t    // segCount is stored x 2.\n\t    var segCount;\n\t    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\n\t    // The \"unrolled\" mapping from character codes to glyph indices.\n\t    cmap.glyphIndexMap = {};\n\t    var endCountParser = new parse.Parser(data, start + offset + 14);\n\t    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n\t    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n\t    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n\t    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n\t    for (var i = 0; i < segCount - 1; i += 1) {\n\t        var glyphIndex = (void 0);\n\t        var endCount = endCountParser.parseUShort();\n\t        var startCount = startCountParser.parseUShort();\n\t        var idDelta = idDeltaParser.parseShort();\n\t        var idRangeOffset = idRangeOffsetParser.parseUShort();\n\t        for (var c = startCount; c <= endCount; c += 1) {\n\t            if (idRangeOffset !== 0) {\n\t                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n\t                // Take the current offset in the idRangeOffset array.\n\t                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n\t                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n\t                glyphIndexOffset += idRangeOffset;\n\n\t                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n\t                glyphIndexOffset += (c - startCount) * 2;\n\t                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n\t                if (glyphIndex !== 0) {\n\t                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n\t                }\n\t            } else {\n\t                glyphIndex = (c + idDelta) & 0xFFFF;\n\t            }\n\n\t            cmap.glyphIndexMap[c] = glyphIndex;\n\t        }\n\t    }\n\t}\n\n\t// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n\t// There are many available formats, but we only support the Windows format 4 and 12.\n\t// This function returns a `CmapEncoding` object or null if no supported format could be found.\n\tfunction parseCmapTable(data, start) {\n\t    var cmap = {};\n\t    cmap.version = parse.getUShort(data, start);\n\t    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n\t    // The cmap table can contain many sub-tables, each with their own format.\n\t    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n\t    cmap.numTables = parse.getUShort(data, start + 2);\n\t    var offset = -1;\n\t    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n\t        var platformId = parse.getUShort(data, start + 4 + (i * 8));\n\t        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);\n\t        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n\t            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {\n\t            offset = parse.getULong(data, start + 4 + (i * 8) + 4);\n\t            break;\n\t        }\n\t    }\n\n\t    if (offset === -1) {\n\t        // There is no cmap table in the font that we support.\n\t        throw new Error('No valid cmap sub-tables found.');\n\t    }\n\n\t    var p = new parse.Parser(data, start + offset);\n\t    cmap.format = p.parseUShort();\n\n\t    if (cmap.format === 12) {\n\t        parseCmapTableFormat12(cmap, p);\n\t    } else if (cmap.format === 4) {\n\t        parseCmapTableFormat4(cmap, p, data, start, offset);\n\t    } else {\n\t        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n\t    }\n\n\t    return cmap;\n\t}\n\n\tfunction addSegment(t, code, glyphIndex) {\n\t    t.segments.push({\n\t        end: code,\n\t        start: code,\n\t        delta: -(code - glyphIndex),\n\t        offset: 0,\n\t        glyphIndex: glyphIndex\n\t    });\n\t}\n\n\tfunction addTerminatorSegment(t) {\n\t    t.segments.push({\n\t        end: 0xFFFF,\n\t        start: 0xFFFF,\n\t        delta: 1,\n\t        offset: 0\n\t    });\n\t}\n\n\t// Make cmap table, format 4 by default, 12 if needed only\n\tfunction makeCmapTable(glyphs) {\n\t    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n\t    var isPlan0Only = true;\n\t    var i;\n\n\t    // Check if we need to add cmap format 12 or if format 4 only is fine\n\t    for (i = glyphs.length - 1; i > 0; i -= 1) {\n\t        var g = glyphs.get(i);\n\t        if (g.unicode > 65535) {\n\t            console.log('Adding CMAP format 12 (needed!)');\n\t            isPlan0Only = false;\n\t            break;\n\t        }\n\t    }\n\n\t    var cmapTable = [\n\t        {name: 'version', type: 'USHORT', value: 0},\n\t        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},\n\n\t        // CMAP 4 header\n\t        {name: 'platformID', type: 'USHORT', value: 3},\n\t        {name: 'encodingID', type: 'USHORT', value: 1},\n\t        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}\n\t    ];\n\n\t    if (!isPlan0Only)\n\t        { cmapTable = cmapTable.concat([\n\t            // CMAP 12 header\n\t            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n\t            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},\n\t            {name: 'cmap12Offset', type: 'ULONG', value: 0}\n\t        ]); }\n\n\t    cmapTable = cmapTable.concat([\n\t        // CMAP 4 Subtable\n\t        {name: 'format', type: 'USHORT', value: 4},\n\t        {name: 'cmap4Length', type: 'USHORT', value: 0},\n\t        {name: 'language', type: 'USHORT', value: 0},\n\t        {name: 'segCountX2', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\n\t    var t = new table.Table('cmap', cmapTable);\n\n\t    t.segments = [];\n\t    for (i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t            addSegment(t, glyph.unicodes[j], i);\n\t        }\n\n\t        t.segments = t.segments.sort(function (a, b) {\n\t            return a.start - b.start;\n\t        });\n\t    }\n\n\t    addTerminatorSegment(t);\n\n\t    var segCount = t.segments.length;\n\t    var segCountToRemove = 0;\n\n\t    // CMAP 4\n\t    // Set up parallel segment arrays.\n\t    var endCounts = [];\n\t    var startCounts = [];\n\t    var idDeltas = [];\n\t    var idRangeOffsets = [];\n\t    var glyphIds = [];\n\n\t    // CMAP 12\n\t    var cmap12Groups = [];\n\n\t    // Reminder this loop is not following the specification at 100%\n\t    // The specification -> find suites of characters and make a group\n\t    // Here we're doing one group for each letter\n\t    // Doing as the spec can save 8 times (or more) space\n\t    for (i = 0; i < segCount; i += 1) {\n\t        var segment = t.segments[i];\n\n\t        // CMAP 4\n\t        if (segment.end <= 65535 && segment.start <= 65535) {\n\t            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n\t            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n\t            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n\t            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n\t            if (segment.glyphId !== undefined) {\n\t                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n\t            }\n\t        } else {\n\t            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n\t            segCountToRemove += 1;\n\t        }\n\n\t        // CMAP 12\n\t        // Skip Terminator Segment\n\t        if (!isPlan0Only && segment.glyphIndex !== undefined) {\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});\n\t        }\n\t    }\n\n\t    // CMAP 4 Subtable\n\t    t.segCountX2 = (segCount - segCountToRemove) * 2;\n\t    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;\n\t    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n\t    t.rangeShift = t.segCountX2 - t.searchRange;\n\n\t    t.fields = t.fields.concat(endCounts);\n\t    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n\t    t.fields = t.fields.concat(startCounts);\n\t    t.fields = t.fields.concat(idDeltas);\n\t    t.fields = t.fields.concat(idRangeOffsets);\n\t    t.fields = t.fields.concat(glyphIds);\n\n\t    t.cmap4Length = 14 + // Subtable header\n\t        endCounts.length * 2 +\n\t        2 + // reservedPad\n\t        startCounts.length * 2 +\n\t        idDeltas.length * 2 +\n\t        idRangeOffsets.length * 2 +\n\t        glyphIds.length * 2;\n\n\t    if (!isPlan0Only) {\n\t        // CMAP 12 Subtable\n\t        var cmap12Length = 16 + // Subtable header\n\t            cmap12Groups.length * 4;\n\n\t        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;\n\t        t.fields = t.fields.concat([\n\t            {name: 'cmap12Format', type: 'USHORT', value: 12},\n\t            {name: 'cmap12Reserved', type: 'USHORT', value: 0},\n\t            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},\n\t            {name: 'cmap12Language', type: 'ULONG', value: 0},\n\t            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}\n\t        ]);\n\n\t        t.fields = t.fields.concat(cmap12Groups);\n\t    }\n\n\t    return t;\n\t}\n\n\tvar cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n\t// Glyph encoding\n\n\tvar cffStandardStrings = [\n\t    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n\t    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n\t    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n\t    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n\t    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n\t    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n\t    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n\t    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n\t    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n\t    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n\t    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n\t    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n\t    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n\t    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n\t    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n\t    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n\t    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n\t    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n\t    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n\t    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n\t    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n\t    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n\t    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n\t    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n\t    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n\t    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n\t    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n\t    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n\t    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n\t    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n\t    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n\t    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\n\tvar cffStandardEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n\t    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n\t    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n\t    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n\t    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n\t    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n\t    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n\t    'lslash', 'oslash', 'oe', 'germandbls'];\n\n\tvar cffExpertEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n\t    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n\t    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n\t    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n\t    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n\t    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n\t    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n\t    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n\t    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n\t    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n\t    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n\t    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n\t    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n\t    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n\t    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n\t    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n\t    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n\t    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\n\tvar standardNames = [\n\t    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n\t    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n\t    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n\t    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n\t    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n\t    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n\t    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n\t    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n\t    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n\t    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n\t    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n\t    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n\t    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n\t    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n\t    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n\t    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n\t    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n\t    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n\t    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n\t    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n\t    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n\t    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n\t    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n\t    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n\t    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n\t/**\n\t * This is the encoding used for fonts created from scratch.\n\t * It loops through all glyphs and finds the appropriate unicode value.\n\t * Since it's linear time, other encodings will be faster.\n\t * @exports opentype.DefaultEncoding\n\t * @class\n\t * @constructor\n\t * @param {opentype.Font}\n\t */\n\tfunction DefaultEncoding(font) {\n\t    this.font = font;\n\t}\n\n\tDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n\t    var code = c.codePointAt(0);\n\t    var glyphs = this.font.glyphs;\n\t    if (glyphs) {\n\t        for (var i = 0; i < glyphs.length; i += 1) {\n\t            var glyph = glyphs.get(i);\n\t            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t                if (glyph.unicodes[j] === code) {\n\t                    return i;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return null;\n\t};\n\n\t/**\n\t * @exports opentype.CmapEncoding\n\t * @class\n\t * @constructor\n\t * @param {Object} cmap - a object with the cmap encoded data\n\t */\n\tfunction CmapEncoding(cmap) {\n\t    this.cmap = cmap;\n\t}\n\n\t/**\n\t * @param  {string} c - the character\n\t * @return {number} The glyph index.\n\t */\n\tCmapEncoding.prototype.charToGlyphIndex = function(c) {\n\t    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n\t};\n\n\t/**\n\t * @exports opentype.CffEncoding\n\t * @class\n\t * @constructor\n\t * @param {string} encoding - The encoding\n\t * @param {Array} charset - The character set.\n\t */\n\tfunction CffEncoding(encoding, charset) {\n\t    this.encoding = encoding;\n\t    this.charset = charset;\n\t}\n\n\t/**\n\t * @param  {string} s - The character\n\t * @return {number} The index.\n\t */\n\tCffEncoding.prototype.charToGlyphIndex = function(s) {\n\t    var code = s.codePointAt(0);\n\t    var charName = this.encoding[code];\n\t    return this.charset.indexOf(charName);\n\t};\n\n\t/**\n\t * @exports opentype.GlyphNames\n\t * @class\n\t * @constructor\n\t * @param {Object} post\n\t */\n\tfunction GlyphNames(post) {\n\t    switch (post.version) {\n\t        case 1:\n\t            this.names = standardNames.slice();\n\t            break;\n\t        case 2:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (var i = 0; i < post.numberOfGlyphs; i++) {\n\t                if (post.glyphNameIndex[i] < standardNames.length) {\n\t                    this.names[i] = standardNames[post.glyphNameIndex[i]];\n\t                } else {\n\t                    this.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n\t                }\n\t            }\n\n\t            break;\n\t        case 2.5:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n\t                this.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n\t            }\n\n\t            break;\n\t        case 3:\n\t            this.names = [];\n\t            break;\n\t        default:\n\t            this.names = [];\n\t            break;\n\t    }\n\t}\n\n\t/**\n\t * Gets the index of a glyph by name.\n\t * @param  {string} name - The glyph name\n\t * @return {number} The index\n\t */\n\tGlyphNames.prototype.nameToGlyphIndex = function(name) {\n\t    return this.names.indexOf(name);\n\t};\n\n\t/**\n\t * @param  {number} gid\n\t * @return {string}\n\t */\n\tGlyphNames.prototype.glyphIndexToName = function(gid) {\n\t    return this.names[gid];\n\t};\n\n\tfunction addGlyphNamesAll(font) {\n\t    var glyph;\n\t    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n\t    var charCodes = Object.keys(glyphIndexMap);\n\n\t    for (var i = 0; i < charCodes.length; i += 1) {\n\t        var c = charCodes[i];\n\t        var glyphIndex = glyphIndexMap[c];\n\t        glyph = font.glyphs.get(glyphIndex);\n\t        glyph.addUnicode(parseInt(c));\n\t    }\n\n\t    for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n\t        glyph = font.glyphs.get(i$1);\n\t        if (font.cffEncoding) {\n\t            if (font.isCIDFont) {\n\t                glyph.name = 'gid' + i$1;\n\t            } else {\n\t                glyph.name = font.cffEncoding.charset[i$1];\n\t            }\n\t        } else if (font.glyphNames.names) {\n\t            glyph.name = font.glyphNames.glyphIndexToName(i$1);\n\t        }\n\t    }\n\t}\n\n\tfunction addGlyphNamesToUnicodeMap(font) {\n\t    font._IndexToUnicodeMap = {};\n\n\t    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n\t    var charCodes = Object.keys(glyphIndexMap);\n\n\t    for (var i = 0; i < charCodes.length; i += 1) {\n\t        var c = charCodes[i];\n\t        var glyphIndex = glyphIndexMap[c];\n\t        if (font._IndexToUnicodeMap[glyphIndex] === undefined) {\n\t            font._IndexToUnicodeMap[glyphIndex] = {\n\t                unicodes: [parseInt(c)]\n\t            };\n\t        } else {\n\t            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * @alias opentype.addGlyphNames\n\t * @param {opentype.Font}\n\t * @param {Object}\n\t */\n\tfunction addGlyphNames(font, opt) {\n\t    if (opt.lowMemory) {\n\t        addGlyphNamesToUnicodeMap(font);\n\t    } else {\n\t        addGlyphNamesAll(font);\n\t    }\n\t}\n\n\t// Drawing utility functions.\n\n\t// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n\tfunction line(ctx, x1, y1, x2, y2) {\n\t    ctx.beginPath();\n\t    ctx.moveTo(x1, y1);\n\t    ctx.lineTo(x2, y2);\n\t    ctx.stroke();\n\t}\n\n\tvar draw = { line: line };\n\n\t// The Glyph object\n\t// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\n\tfunction getPathDefinition(glyph, path) {\n\t    var _path = path || new Path();\n\t    return {\n\t        configurable: true,\n\n\t        get: function() {\n\t            if (typeof _path === 'function') {\n\t                _path = _path();\n\t            }\n\n\t            return _path;\n\t        },\n\n\t        set: function(p) {\n\t            _path = p;\n\t        }\n\t    };\n\t}\n\t/**\n\t * @typedef GlyphOptions\n\t * @type Object\n\t * @property {string} [name] - The glyph name\n\t * @property {number} [unicode]\n\t * @property {Array} [unicodes]\n\t * @property {number} [xMin]\n\t * @property {number} [yMin]\n\t * @property {number} [xMax]\n\t * @property {number} [yMax]\n\t * @property {number} [advanceWidth]\n\t */\n\n\t// A Glyph is an individual mark that often corresponds to a character.\n\t// Some glyphs, such as ligatures, are a combination of many characters.\n\t// Glyphs are the basic building blocks of a font.\n\t//\n\t// The `Glyph` class contains utility methods for drawing the path and its points.\n\t/**\n\t * @exports opentype.Glyph\n\t * @class\n\t * @param {GlyphOptions}\n\t * @constructor\n\t */\n\tfunction Glyph(options) {\n\t    // By putting all the code on a prototype function (which is only declared once)\n\t    // we reduce the memory requirements for larger fonts by some 2%\n\t    this.bindConstructorValues(options);\n\t}\n\n\t/**\n\t * @param  {GlyphOptions}\n\t */\n\tGlyph.prototype.bindConstructorValues = function(options) {\n\t    this.index = options.index || 0;\n\n\t    // These three values cannot be deferred for memory optimization:\n\t    this.name = options.name || null;\n\t    this.unicode = options.unicode || undefined;\n\t    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n\t    // But by binding these values only when necessary, we reduce can\n\t    // the memory requirements by almost 3% for larger fonts.\n\t    if ('xMin' in options) {\n\t        this.xMin = options.xMin;\n\t    }\n\n\t    if ('yMin' in options) {\n\t        this.yMin = options.yMin;\n\t    }\n\n\t    if ('xMax' in options) {\n\t        this.xMax = options.xMax;\n\t    }\n\n\t    if ('yMax' in options) {\n\t        this.yMax = options.yMax;\n\t    }\n\n\t    if ('advanceWidth' in options) {\n\t        this.advanceWidth = options.advanceWidth;\n\t    }\n\n\t    // The path for a glyph is the most memory intensive, and is bound as a value\n\t    // with a getter/setter to ensure we actually do path parsing only once the\n\t    // path is actually needed by anything.\n\t    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n\t};\n\n\t/**\n\t * @param {number}\n\t */\n\tGlyph.prototype.addUnicode = function(unicode) {\n\t    if (this.unicodes.length === 0) {\n\t        this.unicode = unicode;\n\t    }\n\n\t    this.unicodes.push(unicode);\n\t};\n\n\t/**\n\t * Calculate the minimum bounding box for this glyph.\n\t * @return {opentype.BoundingBox}\n\t */\n\tGlyph.prototype.getBoundingBox = function() {\n\t    return this.path.getBoundingBox();\n\t};\n\n\t/**\n\t * Convert the glyph to a Path we can draw on a drawing context.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to stretch the glyph.\n\t * @param  {opentype.Font} if hinting is to be used, the font\n\t * @return {opentype.Path}\n\t */\n\tGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    var commands;\n\t    var hPoints;\n\t    if (!options) { options = { }; }\n\t    var xScale = options.xScale;\n\t    var yScale = options.yScale;\n\n\t    if (options.hinting && font && font.hinting) {\n\t        // in case of hinting, the hinting engine takes care\n\t        // of scaling the points (not the path) before hinting.\n\t        hPoints = this.path && font.hinting.exec(this, fontSize);\n\t        // in case the hinting engine failed hPoints is undefined\n\t        // and thus reverts to plain rending\n\t    }\n\n\t    if (hPoints) {\n\t        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n\t        commands = font.hinting.getCommands(hPoints);\n\t        x = Math.round(x);\n\t        y = Math.round(y);\n\t        // TODO in case of hinting xyScaling is not yet supported\n\t        xScale = yScale = 1;\n\t    } else {\n\t        commands = this.path.commands;\n\t        var scale = 1 / (this.path.unitsPerEm || 1000) * fontSize;\n\t        if (xScale === undefined) { xScale = scale; }\n\t        if (yScale === undefined) { yScale = scale; }\n\t    }\n\n\t    var p = new Path();\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type === 'M') {\n\t            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'L') {\n\t            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Q') {\n\t            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'C') {\n\t            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n\t                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Z') {\n\t            p.closePath();\n\t        }\n\t    }\n\n\t    return p;\n\t};\n\n\t/**\n\t * Split the glyph into contours.\n\t * This function is here for backwards compatibility, and to\n\t * provide raw access to the TrueType glyph outlines.\n\t * @return {Array}\n\t */\n\tGlyph.prototype.getContours = function() {\n\t    if (this.points === undefined) {\n\t        return [];\n\t    }\n\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < this.points.length; i += 1) {\n\t        var pt = this.points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t};\n\n\t/**\n\t * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n\t * @return {Object}\n\t */\n\tGlyph.prototype.getMetrics = function() {\n\t    var commands = this.path.commands;\n\t    var xCoords = [];\n\t    var yCoords = [];\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type !== 'Z') {\n\t            xCoords.push(cmd.x);\n\t            yCoords.push(cmd.y);\n\t        }\n\n\t        if (cmd.type === 'Q' || cmd.type === 'C') {\n\t            xCoords.push(cmd.x1);\n\t            yCoords.push(cmd.y1);\n\t        }\n\n\t        if (cmd.type === 'C') {\n\t            xCoords.push(cmd.x2);\n\t            yCoords.push(cmd.y2);\n\t        }\n\t    }\n\n\t    var metrics = {\n\t        xMin: Math.min.apply(null, xCoords),\n\t        yMin: Math.min.apply(null, yCoords),\n\t        xMax: Math.max.apply(null, xCoords),\n\t        yMax: Math.max.apply(null, yCoords),\n\t        leftSideBearing: this.leftSideBearing\n\t    };\n\n\t    if (!isFinite(metrics.xMin)) {\n\t        metrics.xMin = 0;\n\t    }\n\n\t    if (!isFinite(metrics.xMax)) {\n\t        metrics.xMax = this.advanceWidth;\n\t    }\n\n\t    if (!isFinite(metrics.yMin)) {\n\t        metrics.yMin = 0;\n\t    }\n\n\t    if (!isFinite(metrics.yMax)) {\n\t        metrics.yMax = 0;\n\t    }\n\n\t    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n\t    return metrics;\n\t};\n\n\t/**\n\t * Draw the glyph on the given context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to stretch the glyph.\n\t */\n\tGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n\t    this.getPath(x, y, fontSize, options).draw(ctx);\n\t};\n\n\t/**\n\t * Draw the points of the glyph.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n\t    function drawCircles(l, x, y, scale) {\n\t        ctx.beginPath();\n\t        for (var j = 0; j < l.length; j += 1) {\n\t            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n\t            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, Math.PI * 2, false);\n\t        }\n\n\t        ctx.closePath();\n\t        ctx.fill();\n\t    }\n\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    var scale = 1 / this.path.unitsPerEm * fontSize;\n\n\t    var blueCircles = [];\n\t    var redCircles = [];\n\t    var path = this.path;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var cmd = path.commands[i];\n\t        if (cmd.x !== undefined) {\n\t            blueCircles.push({x: cmd.x, y: -cmd.y});\n\t        }\n\n\t        if (cmd.x1 !== undefined) {\n\t            redCircles.push({x: cmd.x1, y: -cmd.y1});\n\t        }\n\n\t        if (cmd.x2 !== undefined) {\n\t            redCircles.push({x: cmd.x2, y: -cmd.y2});\n\t        }\n\t    }\n\n\t    ctx.fillStyle = 'blue';\n\t    drawCircles(blueCircles, x, y, scale);\n\t    ctx.fillStyle = 'red';\n\t    drawCircles(redCircles, x, y, scale);\n\t};\n\n\t/**\n\t * Draw lines indicating important font measurements.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n\t    var scale;\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    scale = 1 / this.path.unitsPerEm * fontSize;\n\t    ctx.lineWidth = 1;\n\n\t    // Draw the origin\n\t    ctx.strokeStyle = 'black';\n\t    draw.line(ctx, x, -10000, x, 10000);\n\t    draw.line(ctx, -10000, y, 10000, y);\n\n\t    // This code is here due to memory optimization: by not using\n\t    // defaults in the constructor, we save a notable amount of memory.\n\t    var xMin = this.xMin || 0;\n\t    var yMin = this.yMin || 0;\n\t    var xMax = this.xMax || 0;\n\t    var yMax = this.yMax || 0;\n\t    var advanceWidth = this.advanceWidth || 0;\n\n\t    // Draw the glyph box\n\t    ctx.strokeStyle = 'blue';\n\t    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n\t    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n\t    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n\t    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n\t    // Draw the advance width\n\t    ctx.strokeStyle = 'green';\n\t    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n\t};\n\n\t// The GlyphSet object\n\n\t// Define a property on the glyph that depends on the path being loaded.\n\tfunction defineDependentProperty(glyph, externalName, internalName) {\n\t    Object.defineProperty(glyph, externalName, {\n\t        get: function() {\n\t            // Request the path property to make sure the path is loaded.\n\t            glyph.path; // jshint ignore:line\n\t            return glyph[internalName];\n\t        },\n\t        set: function(newValue) {\n\t            glyph[internalName] = newValue;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t}\n\n\t/**\n\t * A GlyphSet represents all glyphs available in the font, but modelled using\n\t * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n\t * necessary, to keep the memory footprint down.\n\t * @exports opentype.GlyphSet\n\t * @class\n\t * @param {opentype.Font}\n\t * @param {Array}\n\t */\n\tfunction GlyphSet(font, glyphs) {\n\t    this.font = font;\n\t    this.glyphs = {};\n\t    if (Array.isArray(glyphs)) {\n\t        for (var i = 0; i < glyphs.length; i++) {\n\t            var glyph = glyphs[i];\n\t            glyph.path.unitsPerEm = font.unitsPerEm;\n\t            this.glyphs[i] = glyph;\n\t        }\n\t    }\n\n\t    this.length = (glyphs && glyphs.length) || 0;\n\t}\n\n\t/**\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tGlyphSet.prototype.get = function(index) {\n\t    // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.\n\t    if (this.glyphs[index] === undefined) {\n\t        this.font._push(index);\n\t        if (typeof this.glyphs[index] === 'function') {\n\t            this.glyphs[index] = this.glyphs[index]();\n\t        }\n\n\t        var glyph = this.glyphs[index];\n\t        var unicodeObj = this.font._IndexToUnicodeMap[index];\n\n\t        if (unicodeObj) {\n\t            for (var j = 0; j < unicodeObj.unicodes.length; j++)\n\t                { glyph.addUnicode(unicodeObj.unicodes[j]); }\n\t        }\n\n\t        if (this.font.cffEncoding) {\n\t            if (this.font.isCIDFont) {\n\t                glyph.name = 'gid' + index;\n\t            } else {\n\t                glyph.name = this.font.cffEncoding.charset[index];\n\t            }\n\t        } else if (this.font.glyphNames.names) {\n\t            glyph.name = this.font.glyphNames.glyphIndexToName(index);\n\t        }\n\n\t        this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;\n\t        this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;\n\t    } else {\n\t        if (typeof this.glyphs[index] === 'function') {\n\t            this.glyphs[index] = this.glyphs[index]();\n\t        }\n\t    }\n\n\t    return this.glyphs[index];\n\t};\n\n\t/**\n\t * @param  {number} index\n\t * @param  {Object}\n\t */\n\tGlyphSet.prototype.push = function(index, loader) {\n\t    this.glyphs[index] = loader;\n\t    this.length++;\n\t};\n\n\t/**\n\t * @alias opentype.glyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tfunction glyphLoader(font, index) {\n\t    return new Glyph({index: index, font: font});\n\t}\n\n\t/**\n\t * Generate a stub glyph that can be filled with all metadata *except*\n\t * the \"points\" and \"path\" properties, which must be loaded only once\n\t * the glyph's path is actually requested for text shaping.\n\t * @alias opentype.ttfGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseGlyph\n\t * @param  {Object} data\n\t * @param  {number} position\n\t * @param  {Function} buildPath\n\t * @return {opentype.Glyph}\n\t */\n\tfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n\t    return function() {\n\t        var glyph = new Glyph({index: index, font: font});\n\n\t        glyph.path = function() {\n\t            parseGlyph(glyph, data, position);\n\t            var path = buildPath(font.glyphs, glyph);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\n\t        defineDependentProperty(glyph, 'xMin', '_xMin');\n\t        defineDependentProperty(glyph, 'xMax', '_xMax');\n\t        defineDependentProperty(glyph, 'yMin', '_yMin');\n\t        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n\t        return glyph;\n\t    };\n\t}\n\t/**\n\t * @alias opentype.cffGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseCFFCharstring\n\t * @param  {string} charstring\n\t * @return {opentype.Glyph}\n\t */\n\tfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n\t    return function() {\n\t        var glyph = new Glyph({index: index, font: font});\n\n\t        glyph.path = function() {\n\t            var path = parseCFFCharstring(font, glyph, charstring);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\n\t        return glyph;\n\t    };\n\t}\n\n\tvar glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n\t// The `CFF` table contains the glyph outlines in PostScript format.\n\n\t// Custom equals function that can also check lists.\n\tfunction equals(a, b) {\n\t    if (a === b) {\n\t        return true;\n\t    } else if (Array.isArray(a) && Array.isArray(b)) {\n\t        if (a.length !== b.length) {\n\t            return false;\n\t        }\n\n\t        for (var i = 0; i < a.length; i += 1) {\n\t            if (!equals(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    } else {\n\t        return false;\n\t    }\n\t}\n\n\t// Subroutines are encoded using the negative half of the number space.\n\t// See type 2 chapter 4.7 \"Subroutine operators\".\n\tfunction calcCFFSubroutineBias(subrs) {\n\t    var bias;\n\t    if (subrs.length < 1240) {\n\t        bias = 107;\n\t    } else if (subrs.length < 33900) {\n\t        bias = 1131;\n\t    } else {\n\t        bias = 32768;\n\t    }\n\n\t    return bias;\n\t}\n\n\t// Parse a `CFF` INDEX array.\n\t// An index array consists of a list of offsets, then a list of objects at those offsets.\n\tfunction parseCFFIndex(data, start, conversionFn) {\n\t    var offsets = [];\n\t    var objects = [];\n\t    var count = parse.getCard16(data, start);\n\t    var objectOffset;\n\t    var endOffset;\n\t    if (count !== 0) {\n\t        var offsetSize = parse.getByte(data, start + 2);\n\t        objectOffset = start + ((count + 1) * offsetSize) + 2;\n\t        var pos = start + 3;\n\t        for (var i = 0; i < count + 1; i += 1) {\n\t            offsets.push(parse.getOffset(data, pos, offsetSize));\n\t            pos += offsetSize;\n\t        }\n\n\t        // The total size of the index array is 4 header bytes + the value of the last offset.\n\t        endOffset = objectOffset + offsets[count];\n\t    } else {\n\t        endOffset = start + 2;\n\t    }\n\n\t    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n\t        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n\t        if (conversionFn) {\n\t            value = conversionFn(value);\n\t        }\n\n\t        objects.push(value);\n\t    }\n\n\t    return {objects: objects, startOffset: start, endOffset: endOffset};\n\t}\n\n\tfunction parseCFFIndexLowMemory(data, start) {\n\t    var offsets = [];\n\t    var count = parse.getCard16(data, start);\n\t    var objectOffset;\n\t    var endOffset;\n\t    if (count !== 0) {\n\t        var offsetSize = parse.getByte(data, start + 2);\n\t        objectOffset = start + ((count + 1) * offsetSize) + 2;\n\t        var pos = start + 3;\n\t        for (var i = 0; i < count + 1; i += 1) {\n\t            offsets.push(parse.getOffset(data, pos, offsetSize));\n\t            pos += offsetSize;\n\t        }\n\n\t        // The total size of the index array is 4 header bytes + the value of the last offset.\n\t        endOffset = objectOffset + offsets[count];\n\t    } else {\n\t        endOffset = start + 2;\n\t    }\n\n\t    return {offsets: offsets, startOffset: start, endOffset: endOffset};\n\t}\n\tfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n\t    var count = parse.getCard16(data, start);\n\t    var objectOffset = 0;\n\t    if (count !== 0) {\n\t        var offsetSize = parse.getByte(data, start + 2);\n\t        objectOffset = start + ((count + 1) * offsetSize) + 2;\n\t    }\n\n\t    var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n\t    if (conversionFn) {\n\t        value = conversionFn(value);\n\t    }\n\t    return value;\n\t}\n\n\t// Parse a `CFF` DICT real value.\n\tfunction parseFloatOperand(parser) {\n\t    var s = '';\n\t    var eof = 15;\n\t    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n\t    while (true) {\n\t        var b = parser.parseByte();\n\t        var n1 = b >> 4;\n\t        var n2 = b & 15;\n\n\t        if (n1 === eof) {\n\t            break;\n\t        }\n\n\t        s += lookup[n1];\n\n\t        if (n2 === eof) {\n\t            break;\n\t        }\n\n\t        s += lookup[n2];\n\t    }\n\n\t    return parseFloat(s);\n\t}\n\n\t// Parse a `CFF` DICT operand.\n\tfunction parseOperand(parser, b0) {\n\t    var b1;\n\t    var b2;\n\t    var b3;\n\t    var b4;\n\t    if (b0 === 28) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        return b1 << 8 | b2;\n\t    }\n\n\t    if (b0 === 29) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        b3 = parser.parseByte();\n\t        b4 = parser.parseByte();\n\t        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n\t    }\n\n\t    if (b0 === 30) {\n\t        return parseFloatOperand(parser);\n\t    }\n\n\t    if (b0 >= 32 && b0 <= 246) {\n\t        return b0 - 139;\n\t    }\n\n\t    if (b0 >= 247 && b0 <= 250) {\n\t        b1 = parser.parseByte();\n\t        return (b0 - 247) * 256 + b1 + 108;\n\t    }\n\n\t    if (b0 >= 251 && b0 <= 254) {\n\t        b1 = parser.parseByte();\n\t        return -(b0 - 251) * 256 - b1 - 108;\n\t    }\n\n\t    throw new Error('Invalid b0 ' + b0);\n\t}\n\n\t// Convert the entries returned by `parseDict` to a proper dictionary.\n\t// If a value is a list of one, it is unpacked.\n\tfunction entriesToObject(entries) {\n\t    var o = {};\n\t    for (var i = 0; i < entries.length; i += 1) {\n\t        var key = entries[i][0];\n\t        var values = entries[i][1];\n\t        var value = (void 0);\n\t        if (values.length === 1) {\n\t            value = values[0];\n\t        } else {\n\t            value = values;\n\t        }\n\n\t        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n\t            throw new Error('Object ' + o + ' already has key ' + key);\n\t        }\n\n\t        o[key] = value;\n\t    }\n\n\t    return o;\n\t}\n\n\t// Parse a `CFF` DICT object.\n\t// A dictionary contains key-value pairs in a compact tokenized format.\n\tfunction parseCFFDict(data, start, size) {\n\t    start = start !== undefined ? start : 0;\n\t    var parser = new parse.Parser(data, start);\n\t    var entries = [];\n\t    var operands = [];\n\t    size = size !== undefined ? size : data.length;\n\n\t    while (parser.relativeOffset < size) {\n\t        var op = parser.parseByte();\n\n\t        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n\t        // Values <= 21 are operators.\n\t        if (op <= 21) {\n\t            // Two-byte operators have an initial escape byte of 12.\n\t            if (op === 12) {\n\t                op = 1200 + parser.parseByte();\n\t            }\n\n\t            entries.push([op, operands]);\n\t            operands = [];\n\t        } else {\n\t            // Since the operands (values) come before the operators (keys), we store all operands in a list\n\t            // until we encounter an operator.\n\t            operands.push(parseOperand(parser, op));\n\t        }\n\t    }\n\n\t    return entriesToObject(entries);\n\t}\n\n\t// Given a String Index (SID), return the value of the string.\n\t// Strings below index 392 are standard CFF strings and are not encoded in the font.\n\tfunction getCFFString(strings, index) {\n\t    if (index <= 390) {\n\t        index = cffStandardStrings[index];\n\t    } else {\n\t        index = strings[index - 391];\n\t    }\n\n\t    return index;\n\t}\n\n\t// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n\t// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n\tfunction interpretDict(dict, meta, strings) {\n\t    var newDict = {};\n\t    var value;\n\n\t    // Because we also want to include missing values, we start out from the meta list\n\t    // and lookup values in the dict.\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var m = meta[i];\n\n\t        if (Array.isArray(m.type)) {\n\t            var values = [];\n\t            values.length = m.type.length;\n\t            for (var j = 0; j < m.type.length; j++) {\n\t                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n\t                if (value === undefined) {\n\t                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n\t                }\n\t                if (m.type[j] === 'SID') {\n\t                    value = getCFFString(strings, value);\n\t                }\n\t                values[j] = value;\n\t            }\n\t            newDict[m.name] = values;\n\t        } else {\n\t            value = dict[m.op];\n\t            if (value === undefined) {\n\t                value = m.value !== undefined ? m.value : null;\n\t            }\n\n\t            if (m.type === 'SID') {\n\t                value = getCFFString(strings, value);\n\t            }\n\t            newDict[m.name] = value;\n\t        }\n\t    }\n\n\t    return newDict;\n\t}\n\n\t// Parse the CFF header.\n\tfunction parseCFFHeader(data, start) {\n\t    var header = {};\n\t    header.formatMajor = parse.getCard8(data, start);\n\t    header.formatMinor = parse.getCard8(data, start + 1);\n\t    header.size = parse.getCard8(data, start + 2);\n\t    header.offsetSize = parse.getCard8(data, start + 3);\n\t    header.startOffset = start;\n\t    header.endOffset = start + 4;\n\t    return header;\n\t}\n\n\tvar TOP_DICT_META = [\n\t    {name: 'version', op: 0, type: 'SID'},\n\t    {name: 'notice', op: 1, type: 'SID'},\n\t    {name: 'copyright', op: 1200, type: 'SID'},\n\t    {name: 'fullName', op: 2, type: 'SID'},\n\t    {name: 'familyName', op: 3, type: 'SID'},\n\t    {name: 'weight', op: 4, type: 'SID'},\n\t    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n\t    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n\t    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n\t    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n\t    {name: 'paintType', op: 1205, type: 'number', value: 0},\n\t    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n\t    {\n\t        name: 'fontMatrix',\n\t        op: 1207,\n\t        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n\t        value: [0.001, 0, 0, 0.001, 0, 0]\n\t    },\n\t    {name: 'uniqueId', op: 13, type: 'number'},\n\t    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n\t    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n\t    {name: 'xuid', op: 14, type: [], value: null},\n\t    {name: 'charset', op: 15, type: 'offset', value: 0},\n\t    {name: 'encoding', op: 16, type: 'offset', value: 0},\n\t    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n\t    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},\n\t    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},\n\t    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},\n\t    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},\n\t    {name: 'cidFontType', op: 1233, type: 'number', value: 0},\n\t    {name: 'cidCount', op: 1234, type: 'number', value: 8720},\n\t    {name: 'uidBase', op: 1235, type: 'number'},\n\t    {name: 'fdArray', op: 1236, type: 'offset'},\n\t    {name: 'fdSelect', op: 1237, type: 'offset'},\n\t    {name: 'fontName', op: 1238, type: 'SID'}\n\t];\n\n\tvar PRIVATE_DICT_META = [\n\t    {name: 'subrs', op: 19, type: 'offset', value: 0},\n\t    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n\t    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n\t];\n\n\t// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n\t// The top dictionary contains the essential metadata for the font, together with the private dictionary.\n\tfunction parseCFFTopDict(data, strings) {\n\t    var dict = parseCFFDict(data, 0, data.byteLength);\n\t    return interpretDict(dict, TOP_DICT_META, strings);\n\t}\n\n\t// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n\tfunction parseCFFPrivateDict(data, start, size, strings) {\n\t    var dict = parseCFFDict(data, start, size);\n\t    return interpretDict(dict, PRIVATE_DICT_META, strings);\n\t}\n\n\t// Returns a list of \"Top DICT\"s found using an INDEX list.\n\t// Used to read both the usual high-level Top DICTs and also the FDArray\n\t// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n\t// a Private DICT that is read and saved into the Top DICT.\n\t//\n\t// In addition to the expected/optional values as outlined in TOP_DICT_META\n\t// the following values might be saved into the Top DICT.\n\t//\n\t//    _subrs []        array of local CFF subroutines from Private DICT\n\t//    _subrsBias       bias value computed from number of subroutines\n\t//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n\t//    _defaultWidthX   default widths for CFF characters\n\t//    _nominalWidthX   bias added to width embedded within glyph description\n\t//\n\t//    _privateDict     saved copy of parsed Private DICT from Top DICT\n\tfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n\t    var topDictArray = [];\n\t    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n\t        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n\t        var topDict = parseCFFTopDict(topDictData, strings);\n\t        topDict._subrs = [];\n\t        topDict._subrsBias = 0;\n\t        topDict._defaultWidthX = 0;\n\t        topDict._nominalWidthX = 0;\n\t        var privateSize = topDict.private[0];\n\t        var privateOffset = topDict.private[1];\n\t        if (privateSize !== 0 && privateOffset !== 0) {\n\t            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n\t            topDict._defaultWidthX = privateDict.defaultWidthX;\n\t            topDict._nominalWidthX = privateDict.nominalWidthX;\n\t            if (privateDict.subrs !== 0) {\n\t                var subrOffset = privateOffset + privateDict.subrs;\n\t                var subrIndex = parseCFFIndex(data, subrOffset + start);\n\t                topDict._subrs = subrIndex.objects;\n\t                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n\t            }\n\t            topDict._privateDict = privateDict;\n\t        }\n\t        topDictArray.push(topDict);\n\t    }\n\t    return topDictArray;\n\t}\n\n\t// Parse the CFF charset table, which contains internal names for all the glyphs.\n\t// This function will return a list of glyph names.\n\t// See Adobe TN #5176 chapter 13, \"Charsets\".\n\tfunction parseCFFCharset(data, start, nGlyphs, strings) {\n\t    var sid;\n\t    var count;\n\t    var parser = new parse.Parser(data, start);\n\n\t    // The .notdef glyph is not included, so subtract 1.\n\t    nGlyphs -= 1;\n\t    var charset = ['.notdef'];\n\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        for (var i = 0; i < nGlyphs; i += 1) {\n\t            sid = parser.parseSID();\n\t            charset.push(getCFFString(strings, sid));\n\t        }\n\t    } else if (format === 1) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard8();\n\t            for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else if (format === 2) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard16();\n\t            for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown charset format ' + format);\n\t    }\n\n\t    return charset;\n\t}\n\n\t// Parse the CFF encoding data. Only one encoding can be specified per font.\n\t// See Adobe TN #5176 chapter 12, \"Encodings\".\n\tfunction parseCFFEncoding(data, start, charset) {\n\t    var code;\n\t    var enc = {};\n\t    var parser = new parse.Parser(data, start);\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        var nCodes = parser.parseCard8();\n\t        for (var i = 0; i < nCodes; i += 1) {\n\t            code = parser.parseCard8();\n\t            enc[code] = i;\n\t        }\n\t    } else if (format === 1) {\n\t        var nRanges = parser.parseCard8();\n\t        code = 1;\n\t        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n\t            var first = parser.parseCard8();\n\t            var nLeft = parser.parseCard8();\n\t            for (var j = first; j <= first + nLeft; j += 1) {\n\t                enc[j] = code;\n\t                code += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown encoding format ' + format);\n\t    }\n\n\t    return new CffEncoding(enc, charset);\n\t}\n\n\t// Take in charstring code and return a Glyph object.\n\t// The encoding is described in the Type 2 Charstring Format\n\t// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n\tfunction parseCFFCharstring(font, glyph, code) {\n\t    var c1x;\n\t    var c1y;\n\t    var c2x;\n\t    var c2y;\n\t    var p = new Path();\n\t    var stack = [];\n\t    var nStems = 0;\n\t    var haveWidth = false;\n\t    var open = false;\n\t    var x = 0;\n\t    var y = 0;\n\t    var subrs;\n\t    var subrsBias;\n\t    var defaultWidthX;\n\t    var nominalWidthX;\n\t    if (font.isCIDFont) {\n\t        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n\t        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n\t        subrs = fdDict._subrs;\n\t        subrsBias = fdDict._subrsBias;\n\t        defaultWidthX = fdDict._defaultWidthX;\n\t        nominalWidthX = fdDict._nominalWidthX;\n\t    } else {\n\t        subrs = font.tables.cff.topDict._subrs;\n\t        subrsBias = font.tables.cff.topDict._subrsBias;\n\t        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n\t        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n\t    }\n\t    var width = defaultWidthX;\n\n\t    function newContour(x, y) {\n\t        if (open) {\n\t            p.closePath();\n\t        }\n\n\t        p.moveTo(x, y);\n\t        open = true;\n\t    }\n\n\t    function parseStems() {\n\t        var hasWidthArg;\n\n\t        // The number of stem operators on the stack is always even.\n\t        // If the value is uneven, that means a width is specified.\n\t        hasWidthArg = stack.length % 2 !== 0;\n\t        if (hasWidthArg && !haveWidth) {\n\t            width = stack.shift() + nominalWidthX;\n\t        }\n\n\t        nStems += stack.length >> 1;\n\t        stack.length = 0;\n\t        haveWidth = true;\n\t    }\n\n\t    function parse(code) {\n\t        var b1;\n\t        var b2;\n\t        var b3;\n\t        var b4;\n\t        var codeIndex;\n\t        var subrCode;\n\t        var jpx;\n\t        var jpy;\n\t        var c3x;\n\t        var c3y;\n\t        var c4x;\n\t        var c4y;\n\n\t        var i = 0;\n\t        while (i < code.length) {\n\t            var v = code[i];\n\t            i += 1;\n\t            switch (v) {\n\t                case 1: // hstem\n\t                    parseStems();\n\t                    break;\n\t                case 3: // vstem\n\t                    parseStems();\n\t                    break;\n\t                case 4: // vmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    y += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 5: // rlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 6: // hlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 7: // vlineto\n\t                    while (stack.length > 0) {\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 8: // rrcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 10: // callsubr\n\t                    codeIndex = stack.pop() + subrsBias;\n\t                    subrCode = subrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse(subrCode);\n\t                    }\n\n\t                    break;\n\t                case 11: // return\n\t                    return;\n\t                case 12: // flex operators\n\t                    v = code[i];\n\t                    i += 1;\n\t                    switch (v) {\n\t                        case 35: // flex\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x   + stack.shift();    // dx6\n\t                            y = c4y   + stack.shift();    // dy6\n\t                            stack.shift();                // flex depth\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 34: // hflex\n\t                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y;                      // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = y;                      // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 36: // hflex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 37: // flex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n\t                                x = c4x + stack.shift();\n\t                            } else {\n\t                                y = c4y + stack.shift();\n\t                            }\n\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        default:\n\t                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n\t                            stack.length = 0;\n\t                    }\n\t                    break;\n\t                case 14: // endchar\n\t                    if (stack.length > 0 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    if (open) {\n\t                        p.closePath();\n\t                        open = false;\n\t                    }\n\n\t                    break;\n\t                case 18: // hstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 19: // hintmask\n\t                case 20: // cntrmask\n\t                    parseStems();\n\t                    i += (nStems + 7) >> 3;\n\t                    break;\n\t                case 21: // rmoveto\n\t                    if (stack.length > 2 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    y += stack.pop();\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 22: // hmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 23: // vstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 24: // rcurveline\n\t                    while (stack.length > 2) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    x += stack.shift();\n\t                    y += stack.shift();\n\t                    p.lineTo(x, y);\n\t                    break;\n\t                case 25: // rlinecurve\n\t                    while (stack.length > 6) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    c1x = x + stack.shift();\n\t                    c1y = y + stack.shift();\n\t                    c2x = c1x + stack.shift();\n\t                    c2y = c1y + stack.shift();\n\t                    x = c2x + stack.shift();\n\t                    y = c2y + stack.shift();\n\t                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    break;\n\t                case 26: // vvcurveto\n\t                    if (stack.length % 2) {\n\t                        x += stack.shift();\n\t                    }\n\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x;\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 27: // hhcurveto\n\t                    if (stack.length % 2) {\n\t                        y += stack.shift();\n\t                    }\n\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y;\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 28: // shortint\n\t                    b1 = code[i];\n\t                    b2 = code[i + 1];\n\t                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n\t                    i += 2;\n\t                    break;\n\t                case 29: // callgsubr\n\t                    codeIndex = stack.pop() + font.gsubrsBias;\n\t                    subrCode = font.gsubrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse(subrCode);\n\t                    }\n\n\t                    break;\n\t                case 30: // vhcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 31: // hvcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                default:\n\t                    if (v < 32) {\n\t                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n\t                    } else if (v < 247) {\n\t                        stack.push(v - 139);\n\t                    } else if (v < 251) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push((v - 247) * 256 + b1 + 108);\n\t                    } else if (v < 255) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push(-(v - 251) * 256 - b1 - 108);\n\t                    } else {\n\t                        b1 = code[i];\n\t                        b2 = code[i + 1];\n\t                        b3 = code[i + 2];\n\t                        b4 = code[i + 3];\n\t                        i += 4;\n\t                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n\t                    }\n\t            }\n\t        }\n\t    }\n\n\t    parse(code);\n\n\t    glyph.advanceWidth = width;\n\t    return p;\n\t}\n\n\tfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n\t    var fdSelect = [];\n\t    var fdIndex;\n\t    var parser = new parse.Parser(data, start);\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        // Simple list of nGlyphs elements\n\t        for (var iGid = 0; iGid < nGlyphs; iGid++) {\n\t            fdIndex = parser.parseCard8();\n\t            if (fdIndex >= fdArrayCount) {\n\t                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n\t            }\n\t            fdSelect.push(fdIndex);\n\t        }\n\t    } else if (format === 3) {\n\t        // Ranges\n\t        var nRanges = parser.parseCard16();\n\t        var first = parser.parseCard16();\n\t        if (first !== 0) {\n\t            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n\t        }\n\t        var next;\n\t        for (var iRange = 0; iRange < nRanges; iRange++) {\n\t            fdIndex = parser.parseCard8();\n\t            next = parser.parseCard16();\n\t            if (fdIndex >= fdArrayCount) {\n\t                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n\t            }\n\t            if (next > nGlyphs) {\n\t                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n\t            }\n\t            for (; first < next; first++) {\n\t                fdSelect.push(fdIndex);\n\t            }\n\t            first = next;\n\t        }\n\t        if (next !== nGlyphs) {\n\t            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n\t        }\n\t    } else {\n\t        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n\t    }\n\t    return fdSelect;\n\t}\n\n\t// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n\tfunction parseCFFTable(data, start, font, opt) {\n\t    font.tables.cff = {};\n\t    var header = parseCFFHeader(data, start);\n\t    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n\t    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n\t    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n\t    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n\t    font.gsubrs = globalSubrIndex.objects;\n\t    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n\t    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n\t    if (topDictArray.length !== 1) {\n\t        throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n\t    }\n\n\t    var topDict = topDictArray[0];\n\t    font.tables.cff.topDict = topDict;\n\n\t    if (topDict._privateDict) {\n\t        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n\t        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n\t    }\n\n\t    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n\t        font.isCIDFont = true;\n\t    }\n\n\t    if (font.isCIDFont) {\n\t        var fdArrayOffset = topDict.fdArray;\n\t        var fdSelectOffset = topDict.fdSelect;\n\t        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n\t            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n\t        }\n\t        fdArrayOffset += start;\n\t        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n\t        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n\t        topDict._fdArray = fdArray;\n\t        fdSelectOffset += start;\n\t        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n\t    }\n\n\t    var privateDictOffset = start + topDict.private[1];\n\t    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n\t    font.defaultWidthX = privateDict.defaultWidthX;\n\t    font.nominalWidthX = privateDict.nominalWidthX;\n\n\t    if (privateDict.subrs !== 0) {\n\t        var subrOffset = privateDictOffset + privateDict.subrs;\n\t        var subrIndex = parseCFFIndex(data, subrOffset);\n\t        font.subrs = subrIndex.objects;\n\t        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n\t    } else {\n\t        font.subrs = [];\n\t        font.subrsBias = 0;\n\t    }\n\n\t    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n\t    var charStringsIndex;\n\t    if (opt.lowMemory) {\n\t        charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);\n\t        font.nGlyphs = charStringsIndex.offsets.length;\n\t    } else {\n\t        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n\t        font.nGlyphs = charStringsIndex.objects.length;\n\t    }\n\n\t    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n\t    if (topDict.encoding === 0) {\n\t        // Standard encoding\n\t        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n\t    } else if (topDict.encoding === 1) {\n\t        // Expert encoding\n\t        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n\t    } else {\n\t        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n\t    }\n\n\t    // Prefer the CMAP encoding to the CFF encoding.\n\t    font.encoding = font.encoding || font.cffEncoding;\n\n\t    font.glyphs = new glyphset.GlyphSet(font);\n\t    if (opt.lowMemory) {\n\t        font._push = function(i) {\n\t            var charString = getCffIndexObject(i, charStringsIndex.offsets, data, start + topDict.charStrings);\n\t            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n\t        };\n\t    } else {\n\t        for (var i = 0; i < font.nGlyphs; i += 1) {\n\t            var charString = charStringsIndex.objects[i];\n\t            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n\t        }\n\t    }\n\t}\n\n\t// Convert a string to a String ID (SID).\n\t// The list of strings is modified in place.\n\tfunction encodeString(s, strings) {\n\t    var sid;\n\n\t    // Is the string in the CFF standard strings?\n\t    var i = cffStandardStrings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i;\n\t    }\n\n\t    // Is the string already in the string index?\n\t    i = strings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i + cffStandardStrings.length;\n\t    } else {\n\t        sid = cffStandardStrings.length + strings.length;\n\t        strings.push(s);\n\t    }\n\n\t    return sid;\n\t}\n\n\tfunction makeHeader() {\n\t    return new table.Record('Header', [\n\t        {name: 'major', type: 'Card8', value: 1},\n\t        {name: 'minor', type: 'Card8', value: 0},\n\t        {name: 'hdrSize', type: 'Card8', value: 4},\n\t        {name: 'major', type: 'Card8', value: 1}\n\t    ]);\n\t}\n\n\tfunction makeNameIndex(fontNames) {\n\t    var t = new table.Record('Name INDEX', [\n\t        {name: 'names', type: 'INDEX', value: []}\n\t    ]);\n\t    t.names = [];\n\t    for (var i = 0; i < fontNames.length; i += 1) {\n\t        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n\t    }\n\n\t    return t;\n\t}\n\n\t// Given a dictionary's metadata, create a DICT structure.\n\tfunction makeDict(meta, attrs, strings) {\n\t    var m = {};\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var entry = meta[i];\n\t        var value = attrs[entry.name];\n\t        if (value !== undefined && !equals(value, entry.value)) {\n\t            if (entry.type === 'SID') {\n\t                value = encodeString(value, strings);\n\t            }\n\n\t            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n\t        }\n\t    }\n\n\t    return m;\n\t}\n\n\t// The Top DICT houses the global font attributes.\n\tfunction makeTopDict(attrs, strings) {\n\t    var t = new table.Record('Top DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\n\tfunction makeTopDictIndex(topDict) {\n\t    var t = new table.Record('Top DICT INDEX', [\n\t        {name: 'topDicts', type: 'INDEX', value: []}\n\t    ]);\n\t    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n\t    return t;\n\t}\n\n\tfunction makeStringIndex(strings) {\n\t    var t = new table.Record('String INDEX', [\n\t        {name: 'strings', type: 'INDEX', value: []}\n\t    ]);\n\t    t.strings = [];\n\t    for (var i = 0; i < strings.length; i += 1) {\n\t        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction makeGlobalSubrIndex() {\n\t    // Currently we don't use subroutines.\n\t    return new table.Record('Global Subr INDEX', [\n\t        {name: 'subrs', type: 'INDEX', value: []}\n\t    ]);\n\t}\n\n\tfunction makeCharsets(glyphNames, strings) {\n\t    var t = new table.Record('Charsets', [\n\t        {name: 'format', type: 'Card8', value: 0}\n\t    ]);\n\t    for (var i = 0; i < glyphNames.length; i += 1) {\n\t        var glyphName = glyphNames[i];\n\t        var glyphSID = encodeString(glyphName, strings);\n\t        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction glyphToOps(glyph) {\n\t    var ops = [];\n\t    var path = glyph.path;\n\t    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n\t    var x = 0;\n\t    var y = 0;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var dx = (void 0);\n\t        var dy = (void 0);\n\t        var cmd = path.commands[i];\n\t        if (cmd.type === 'Q') {\n\t            // CFF only supports bézier curves, so convert the quad to a bézier.\n\t            var _13 = 1 / 3;\n\t            var _23 = 2 / 3;\n\n\t            // We're going to create a new command so we don't change the original path.\n\t            // Since all coordinates are relative, we round() them ASAP to avoid propagating errors.\n\t            cmd = {\n\t                type: 'C',\n\t                x: cmd.x,\n\t                y: cmd.y,\n\t                x1: Math.round(_13 * x + _23 * cmd.x1),\n\t                y1: Math.round(_13 * y + _23 * cmd.y1),\n\t                x2: Math.round(_13 * cmd.x + _23 * cmd.x1),\n\t                y2: Math.round(_13 * cmd.y + _23 * cmd.y1)\n\t            };\n\t        }\n\n\t        if (cmd.type === 'M') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rlineto', type: 'OP', value: 5});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            var dx1 = Math.round(cmd.x1 - x);\n\t            var dy1 = Math.round(cmd.y1 - y);\n\t            var dx2 = Math.round(cmd.x2 - cmd.x1);\n\t            var dy2 = Math.round(cmd.y2 - cmd.y1);\n\t            dx = Math.round(cmd.x - cmd.x2);\n\t            dy = Math.round(cmd.y - cmd.y2);\n\t            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n\t            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n\t            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n\t            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        }\n\n\t        // Contours are closed automatically.\n\t    }\n\n\t    ops.push({name: 'endchar', type: 'OP', value: 14});\n\t    return ops;\n\t}\n\n\tfunction makeCharStringsIndex(glyphs) {\n\t    var t = new table.Record('CharStrings INDEX', [\n\t        {name: 'charStrings', type: 'INDEX', value: []}\n\t    ]);\n\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var ops = glyphToOps(glyph);\n\t        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction makePrivateDict(attrs, strings) {\n\t    var t = new table.Record('Private DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\n\tfunction makeCFFTable(glyphs, options) {\n\t    var t = new table.Table('CFF ', [\n\t        {name: 'header', type: 'RECORD'},\n\t        {name: 'nameIndex', type: 'RECORD'},\n\t        {name: 'topDictIndex', type: 'RECORD'},\n\t        {name: 'stringIndex', type: 'RECORD'},\n\t        {name: 'globalSubrIndex', type: 'RECORD'},\n\t        {name: 'charsets', type: 'RECORD'},\n\t        {name: 'charStringsIndex', type: 'RECORD'},\n\t        {name: 'privateDict', type: 'RECORD'}\n\t    ]);\n\n\t    var fontScale = 1 / options.unitsPerEm;\n\t    // We use non-zero values for the offsets so that the DICT encodes them.\n\t    // This is important because the size of the Top DICT plays a role in offset calculation,\n\t    // and the size shouldn't change after we've written correct offsets.\n\t    var attrs = {\n\t        version: options.version,\n\t        fullName: options.fullName,\n\t        familyName: options.familyName,\n\t        weight: options.weightName,\n\t        fontBBox: options.fontBBox || [0, 0, 0, 0],\n\t        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n\t        charset: 999,\n\t        encoding: 0,\n\t        charStrings: 999,\n\t        private: [0, 999]\n\t    };\n\n\t    var privateAttrs = {};\n\n\t    var glyphNames = [];\n\t    var glyph;\n\n\t    // Skip first glyph (.notdef)\n\t    for (var i = 1; i < glyphs.length; i += 1) {\n\t        glyph = glyphs.get(i);\n\t        glyphNames.push(glyph.name);\n\t    }\n\n\t    var strings = [];\n\n\t    t.header = makeHeader();\n\t    t.nameIndex = makeNameIndex([options.postScriptName]);\n\t    var topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\t    t.globalSubrIndex = makeGlobalSubrIndex();\n\t    t.charsets = makeCharsets(glyphNames, strings);\n\t    t.charStringsIndex = makeCharStringsIndex(glyphs);\n\t    t.privateDict = makePrivateDict(privateAttrs, strings);\n\n\t    // Needs to come at the end, to encode all custom strings used in the font.\n\t    t.stringIndex = makeStringIndex(strings);\n\n\t    var startOffset = t.header.sizeOf() +\n\t        t.nameIndex.sizeOf() +\n\t        t.topDictIndex.sizeOf() +\n\t        t.stringIndex.sizeOf() +\n\t        t.globalSubrIndex.sizeOf();\n\t    attrs.charset = startOffset;\n\n\t    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n\t    attrs.encoding = 0;\n\t    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n\t    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n\t    // Recreate the Top DICT INDEX with the correct offsets.\n\t    topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\n\t    return t;\n\t}\n\n\tvar cff = { parse: parseCFFTable, make: makeCFFTable };\n\n\t// The `head` table contains global information about the font.\n\n\t// Parse the header `head` table\n\tfunction parseHeadTable(data, start) {\n\t    var head = {};\n\t    var p = new parse.Parser(data, start);\n\t    head.version = p.parseVersion();\n\t    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n\t    head.checkSumAdjustment = p.parseULong();\n\t    head.magicNumber = p.parseULong();\n\t    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n\t    head.flags = p.parseUShort();\n\t    head.unitsPerEm = p.parseUShort();\n\t    head.created = p.parseLongDateTime();\n\t    head.modified = p.parseLongDateTime();\n\t    head.xMin = p.parseShort();\n\t    head.yMin = p.parseShort();\n\t    head.xMax = p.parseShort();\n\t    head.yMax = p.parseShort();\n\t    head.macStyle = p.parseUShort();\n\t    head.lowestRecPPEM = p.parseUShort();\n\t    head.fontDirectionHint = p.parseShort();\n\t    head.indexToLocFormat = p.parseShort();\n\t    head.glyphDataFormat = p.parseShort();\n\t    return head;\n\t}\n\n\tfunction makeHeadTable(options) {\n\t    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n\t    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n\t    var createdTimestamp = timestamp;\n\n\t    if (options.createdTimestamp) {\n\t        createdTimestamp = options.createdTimestamp + 2082844800;\n\t    }\n\n\t    return new table.Table('head', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n\t        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n\t        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n\t        {name: 'flags', type: 'USHORT', value: 0},\n\t        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n\t        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n\t        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n\t        {name: 'xMin', type: 'SHORT', value: 0},\n\t        {name: 'yMin', type: 'SHORT', value: 0},\n\t        {name: 'xMax', type: 'SHORT', value: 0},\n\t        {name: 'yMax', type: 'SHORT', value: 0},\n\t        {name: 'macStyle', type: 'USHORT', value: 0},\n\t        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n\t        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n\t        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n\t        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar head = { parse: parseHeadTable, make: makeHeadTable };\n\n\t// The `hhea` table contains information for horizontal layout.\n\n\t// Parse the horizontal header `hhea` table\n\tfunction parseHheaTable(data, start) {\n\t    var hhea = {};\n\t    var p = new parse.Parser(data, start);\n\t    hhea.version = p.parseVersion();\n\t    hhea.ascender = p.parseShort();\n\t    hhea.descender = p.parseShort();\n\t    hhea.lineGap = p.parseShort();\n\t    hhea.advanceWidthMax = p.parseUShort();\n\t    hhea.minLeftSideBearing = p.parseShort();\n\t    hhea.minRightSideBearing = p.parseShort();\n\t    hhea.xMaxExtent = p.parseShort();\n\t    hhea.caretSlopeRise = p.parseShort();\n\t    hhea.caretSlopeRun = p.parseShort();\n\t    hhea.caretOffset = p.parseShort();\n\t    p.relativeOffset += 8;\n\t    hhea.metricDataFormat = p.parseShort();\n\t    hhea.numberOfHMetrics = p.parseUShort();\n\t    return hhea;\n\t}\n\n\tfunction makeHheaTable(options) {\n\t    return new table.Table('hhea', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'ascender', type: 'FWORD', value: 0},\n\t        {name: 'descender', type: 'FWORD', value: 0},\n\t        {name: 'lineGap', type: 'FWORD', value: 0},\n\t        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n\t        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n\t        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n\t        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n\t        {name: 'caretOffset', type: 'SHORT', value: 0},\n\t        {name: 'reserved1', type: 'SHORT', value: 0},\n\t        {name: 'reserved2', type: 'SHORT', value: 0},\n\t        {name: 'reserved3', type: 'SHORT', value: 0},\n\t        {name: 'reserved4', type: 'SHORT', value: 0},\n\t        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n\t        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n\t// The `hmtx` table contains the horizontal metrics for all glyphs.\n\n\tfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n\t    var advanceWidth;\n\t    var leftSideBearing;\n\t    var p = new parse.Parser(data, start);\n\t    for (var i = 0; i < numGlyphs; i += 1) {\n\t        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n\t        if (i < numMetrics) {\n\t            advanceWidth = p.parseUShort();\n\t            leftSideBearing = p.parseShort();\n\t        }\n\n\t        var glyph = glyphs.get(i);\n\t        glyph.advanceWidth = advanceWidth;\n\t        glyph.leftSideBearing = leftSideBearing;\n\t    }\n\t}\n\n\tfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n\t    font._hmtxTableData = {};\n\n\t    var advanceWidth;\n\t    var leftSideBearing;\n\t    var p = new parse.Parser(data, start);\n\t    for (var i = 0; i < numGlyphs; i += 1) {\n\t        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n\t        if (i < numMetrics) {\n\t            advanceWidth = p.parseUShort();\n\t            leftSideBearing = p.parseShort();\n\t        }\n\n\t        font._hmtxTableData[i] = {\n\t            advanceWidth: advanceWidth,\n\t            leftSideBearing: leftSideBearing\n\t        };\n\t    }\n\t}\n\n\t// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n\t// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n\tfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n\t    if (opt.lowMemory)\n\t        { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }\n\t    else\n\t        { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }\n\t}\n\n\tfunction makeHmtxTable(glyphs) {\n\t    var t = new table.Table('hmtx', []);\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var advanceWidth = glyph.advanceWidth || 0;\n\t        var leftSideBearing = glyph.leftSideBearing || 0;\n\t        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n\t        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n\t    }\n\n\t    return t;\n\t}\n\n\tvar hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n\t// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\n\tfunction makeLtagTable(tags) {\n\t    var result = new table.Table('ltag', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'numTags', type: 'ULONG', value: tags.length}\n\t    ]);\n\n\t    var stringPool = '';\n\t    var stringPoolOffset = 12 + tags.length * 4;\n\t    for (var i = 0; i < tags.length; ++i) {\n\t        var pos = stringPool.indexOf(tags[i]);\n\t        if (pos < 0) {\n\t            pos = stringPool.length;\n\t            stringPool += tags[i];\n\t        }\n\n\t        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n\t    }\n\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\t    return result;\n\t}\n\n\tfunction parseLtagTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n\t    // The 'ltag' specification does not define any flags; skip the field.\n\t    p.skip('uLong', 1);\n\t    var numTags = p.parseULong();\n\n\t    var tags = [];\n\t    for (var i = 0; i < numTags; i++) {\n\t        var tag = '';\n\t        var offset = start + p.parseUShort();\n\t        var length = p.parseUShort();\n\t        for (var j = offset; j < offset + length; ++j) {\n\t            tag += String.fromCharCode(data.getInt8(j));\n\t        }\n\n\t        tags.push(tag);\n\t    }\n\n\t    return tags;\n\t}\n\n\tvar ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n\t// The `maxp` table establishes the memory requirements for the font.\n\n\t// Parse the maximum profile `maxp` table.\n\tfunction parseMaxpTable(data, start) {\n\t    var maxp = {};\n\t    var p = new parse.Parser(data, start);\n\t    maxp.version = p.parseVersion();\n\t    maxp.numGlyphs = p.parseUShort();\n\t    if (maxp.version === 1.0) {\n\t        maxp.maxPoints = p.parseUShort();\n\t        maxp.maxContours = p.parseUShort();\n\t        maxp.maxCompositePoints = p.parseUShort();\n\t        maxp.maxCompositeContours = p.parseUShort();\n\t        maxp.maxZones = p.parseUShort();\n\t        maxp.maxTwilightPoints = p.parseUShort();\n\t        maxp.maxStorage = p.parseUShort();\n\t        maxp.maxFunctionDefs = p.parseUShort();\n\t        maxp.maxInstructionDefs = p.parseUShort();\n\t        maxp.maxStackElements = p.parseUShort();\n\t        maxp.maxSizeOfInstructions = p.parseUShort();\n\t        maxp.maxComponentElements = p.parseUShort();\n\t        maxp.maxComponentDepth = p.parseUShort();\n\t    }\n\n\t    return maxp;\n\t}\n\n\tfunction makeMaxpTable(numGlyphs) {\n\t    return new table.Table('maxp', [\n\t        {name: 'version', type: 'FIXED', value: 0x00005000},\n\t        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n\t    ]);\n\t}\n\n\tvar maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n\t// The `name` naming table.\n\n\t// NameIDs for the name table.\n\tvar nameTableNames = [\n\t    'copyright',              // 0\n\t    'fontFamily',             // 1\n\t    'fontSubfamily',          // 2\n\t    'uniqueID',               // 3\n\t    'fullName',               // 4\n\t    'version',                // 5\n\t    'postScriptName',         // 6\n\t    'trademark',              // 7\n\t    'manufacturer',           // 8\n\t    'designer',               // 9\n\t    'description',            // 10\n\t    'manufacturerURL',        // 11\n\t    'designerURL',            // 12\n\t    'license',                // 13\n\t    'licenseURL',             // 14\n\t    'reserved',               // 15\n\t    'preferredFamily',        // 16\n\t    'preferredSubfamily',     // 17\n\t    'compatibleFullName',     // 18\n\t    'sampleText',             // 19\n\t    'postScriptFindFontName', // 20\n\t    'wwsFamily',              // 21\n\t    'wwsSubfamily'            // 22\n\t];\n\n\tvar macLanguages = {\n\t    0: 'en',\n\t    1: 'fr',\n\t    2: 'de',\n\t    3: 'it',\n\t    4: 'nl',\n\t    5: 'sv',\n\t    6: 'es',\n\t    7: 'da',\n\t    8: 'pt',\n\t    9: 'no',\n\t    10: 'he',\n\t    11: 'ja',\n\t    12: 'ar',\n\t    13: 'fi',\n\t    14: 'el',\n\t    15: 'is',\n\t    16: 'mt',\n\t    17: 'tr',\n\t    18: 'hr',\n\t    19: 'zh-Hant',\n\t    20: 'ur',\n\t    21: 'hi',\n\t    22: 'th',\n\t    23: 'ko',\n\t    24: 'lt',\n\t    25: 'pl',\n\t    26: 'hu',\n\t    27: 'es',\n\t    28: 'lv',\n\t    29: 'se',\n\t    30: 'fo',\n\t    31: 'fa',\n\t    32: 'ru',\n\t    33: 'zh',\n\t    34: 'nl-BE',\n\t    35: 'ga',\n\t    36: 'sq',\n\t    37: 'ro',\n\t    38: 'cz',\n\t    39: 'sk',\n\t    40: 'si',\n\t    41: 'yi',\n\t    42: 'sr',\n\t    43: 'mk',\n\t    44: 'bg',\n\t    45: 'uk',\n\t    46: 'be',\n\t    47: 'uz',\n\t    48: 'kk',\n\t    49: 'az-Cyrl',\n\t    50: 'az-Arab',\n\t    51: 'hy',\n\t    52: 'ka',\n\t    53: 'mo',\n\t    54: 'ky',\n\t    55: 'tg',\n\t    56: 'tk',\n\t    57: 'mn-CN',\n\t    58: 'mn',\n\t    59: 'ps',\n\t    60: 'ks',\n\t    61: 'ku',\n\t    62: 'sd',\n\t    63: 'bo',\n\t    64: 'ne',\n\t    65: 'sa',\n\t    66: 'mr',\n\t    67: 'bn',\n\t    68: 'as',\n\t    69: 'gu',\n\t    70: 'pa',\n\t    71: 'or',\n\t    72: 'ml',\n\t    73: 'kn',\n\t    74: 'ta',\n\t    75: 'te',\n\t    76: 'si',\n\t    77: 'my',\n\t    78: 'km',\n\t    79: 'lo',\n\t    80: 'vi',\n\t    81: 'id',\n\t    82: 'tl',\n\t    83: 'ms',\n\t    84: 'ms-Arab',\n\t    85: 'am',\n\t    86: 'ti',\n\t    87: 'om',\n\t    88: 'so',\n\t    89: 'sw',\n\t    90: 'rw',\n\t    91: 'rn',\n\t    92: 'ny',\n\t    93: 'mg',\n\t    94: 'eo',\n\t    128: 'cy',\n\t    129: 'eu',\n\t    130: 'ca',\n\t    131: 'la',\n\t    132: 'qu',\n\t    133: 'gn',\n\t    134: 'ay',\n\t    135: 'tt',\n\t    136: 'ug',\n\t    137: 'dz',\n\t    138: 'jv',\n\t    139: 'su',\n\t    140: 'gl',\n\t    141: 'af',\n\t    142: 'br',\n\t    143: 'iu',\n\t    144: 'gd',\n\t    145: 'gv',\n\t    146: 'ga',\n\t    147: 'to',\n\t    148: 'el-polyton',\n\t    149: 'kl',\n\t    150: 'az',\n\t    151: 'nn'\n\t};\n\n\t// MacOS language ID → MacOS script ID\n\t//\n\t// Note that the script ID is not sufficient to determine what encoding\n\t// to use in TrueType files. For some languages, MacOS used a modification\n\t// of a mainstream script. For example, an Icelandic name would be stored\n\t// with smRoman in the TrueType naming table, but the actual encoding\n\t// is a special Icelandic version of the normal Macintosh Roman encoding.\n\t// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n\t// Syllables but MacOS had run out of available script codes, so this was\n\t// done as a (pretty radical) \"modification\" of Ethiopic.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageToScript = {\n\t    0: 0,  // langEnglish → smRoman\n\t    1: 0,  // langFrench → smRoman\n\t    2: 0,  // langGerman → smRoman\n\t    3: 0,  // langItalian → smRoman\n\t    4: 0,  // langDutch → smRoman\n\t    5: 0,  // langSwedish → smRoman\n\t    6: 0,  // langSpanish → smRoman\n\t    7: 0,  // langDanish → smRoman\n\t    8: 0,  // langPortuguese → smRoman\n\t    9: 0,  // langNorwegian → smRoman\n\t    10: 5,  // langHebrew → smHebrew\n\t    11: 1,  // langJapanese → smJapanese\n\t    12: 4,  // langArabic → smArabic\n\t    13: 0,  // langFinnish → smRoman\n\t    14: 6,  // langGreek → smGreek\n\t    15: 0,  // langIcelandic → smRoman (modified)\n\t    16: 0,  // langMaltese → smRoman\n\t    17: 0,  // langTurkish → smRoman (modified)\n\t    18: 0,  // langCroatian → smRoman (modified)\n\t    19: 2,  // langTradChinese → smTradChinese\n\t    20: 4,  // langUrdu → smArabic\n\t    21: 9,  // langHindi → smDevanagari\n\t    22: 21,  // langThai → smThai\n\t    23: 3,  // langKorean → smKorean\n\t    24: 29,  // langLithuanian → smCentralEuroRoman\n\t    25: 29,  // langPolish → smCentralEuroRoman\n\t    26: 29,  // langHungarian → smCentralEuroRoman\n\t    27: 29,  // langEstonian → smCentralEuroRoman\n\t    28: 29,  // langLatvian → smCentralEuroRoman\n\t    29: 0,  // langSami → smRoman\n\t    30: 0,  // langFaroese → smRoman (modified)\n\t    31: 4,  // langFarsi → smArabic (modified)\n\t    32: 7,  // langRussian → smCyrillic\n\t    33: 25,  // langSimpChinese → smSimpChinese\n\t    34: 0,  // langFlemish → smRoman\n\t    35: 0,  // langIrishGaelic → smRoman (modified)\n\t    36: 0,  // langAlbanian → smRoman\n\t    37: 0,  // langRomanian → smRoman (modified)\n\t    38: 29,  // langCzech → smCentralEuroRoman\n\t    39: 29,  // langSlovak → smCentralEuroRoman\n\t    40: 0,  // langSlovenian → smRoman (modified)\n\t    41: 5,  // langYiddish → smHebrew\n\t    42: 7,  // langSerbian → smCyrillic\n\t    43: 7,  // langMacedonian → smCyrillic\n\t    44: 7,  // langBulgarian → smCyrillic\n\t    45: 7,  // langUkrainian → smCyrillic (modified)\n\t    46: 7,  // langByelorussian → smCyrillic\n\t    47: 7,  // langUzbek → smCyrillic\n\t    48: 7,  // langKazakh → smCyrillic\n\t    49: 7,  // langAzerbaijani → smCyrillic\n\t    50: 4,  // langAzerbaijanAr → smArabic\n\t    51: 24,  // langArmenian → smArmenian\n\t    52: 23,  // langGeorgian → smGeorgian\n\t    53: 7,  // langMoldavian → smCyrillic\n\t    54: 7,  // langKirghiz → smCyrillic\n\t    55: 7,  // langTajiki → smCyrillic\n\t    56: 7,  // langTurkmen → smCyrillic\n\t    57: 27,  // langMongolian → smMongolian\n\t    58: 7,  // langMongolianCyr → smCyrillic\n\t    59: 4,  // langPashto → smArabic\n\t    60: 4,  // langKurdish → smArabic\n\t    61: 4,  // langKashmiri → smArabic\n\t    62: 4,  // langSindhi → smArabic\n\t    63: 26,  // langTibetan → smTibetan\n\t    64: 9,  // langNepali → smDevanagari\n\t    65: 9,  // langSanskrit → smDevanagari\n\t    66: 9,  // langMarathi → smDevanagari\n\t    67: 13,  // langBengali → smBengali\n\t    68: 13,  // langAssamese → smBengali\n\t    69: 11,  // langGujarati → smGujarati\n\t    70: 10,  // langPunjabi → smGurmukhi\n\t    71: 12,  // langOriya → smOriya\n\t    72: 17,  // langMalayalam → smMalayalam\n\t    73: 16,  // langKannada → smKannada\n\t    74: 14,  // langTamil → smTamil\n\t    75: 15,  // langTelugu → smTelugu\n\t    76: 18,  // langSinhalese → smSinhalese\n\t    77: 19,  // langBurmese → smBurmese\n\t    78: 20,  // langKhmer → smKhmer\n\t    79: 22,  // langLao → smLao\n\t    80: 30,  // langVietnamese → smVietnamese\n\t    81: 0,  // langIndonesian → smRoman\n\t    82: 0,  // langTagalog → smRoman\n\t    83: 0,  // langMalayRoman → smRoman\n\t    84: 4,  // langMalayArabic → smArabic\n\t    85: 28,  // langAmharic → smEthiopic\n\t    86: 28,  // langTigrinya → smEthiopic\n\t    87: 28,  // langOromo → smEthiopic\n\t    88: 0,  // langSomali → smRoman\n\t    89: 0,  // langSwahili → smRoman\n\t    90: 0,  // langKinyarwanda → smRoman\n\t    91: 0,  // langRundi → smRoman\n\t    92: 0,  // langNyanja → smRoman\n\t    93: 0,  // langMalagasy → smRoman\n\t    94: 0,  // langEsperanto → smRoman\n\t    128: 0,  // langWelsh → smRoman (modified)\n\t    129: 0,  // langBasque → smRoman\n\t    130: 0,  // langCatalan → smRoman\n\t    131: 0,  // langLatin → smRoman\n\t    132: 0,  // langQuechua → smRoman\n\t    133: 0,  // langGuarani → smRoman\n\t    134: 0,  // langAymara → smRoman\n\t    135: 7,  // langTatar → smCyrillic\n\t    136: 4,  // langUighur → smArabic\n\t    137: 26,  // langDzongkha → smTibetan\n\t    138: 0,  // langJavaneseRom → smRoman\n\t    139: 0,  // langSundaneseRom → smRoman\n\t    140: 0,  // langGalician → smRoman\n\t    141: 0,  // langAfrikaans → smRoman\n\t    142: 0,  // langBreton → smRoman (modified)\n\t    143: 28,  // langInuktitut → smEthiopic (modified)\n\t    144: 0,  // langScottishGaelic → smRoman (modified)\n\t    145: 0,  // langManxGaelic → smRoman (modified)\n\t    146: 0,  // langIrishGaelicScript → smRoman (modified)\n\t    147: 0,  // langTongan → smRoman\n\t    148: 6,  // langGreekAncient → smRoman\n\t    149: 0,  // langGreenlandic → smRoman\n\t    150: 0,  // langAzerbaijanRoman → smRoman\n\t    151: 0   // langNynorsk → smRoman\n\t};\n\n\t// While Microsoft indicates a region/country for all its language\n\t// IDs, we omit the region code if it's equal to the \"most likely\n\t// region subtag\" according to Unicode CLDR. For scripts, we omit\n\t// the subtag if it is equal to the Suppress-Script entry in the\n\t// IANA language subtag registry for IETF BCP 47.\n\t//\n\t// For example, Microsoft states that its language code 0x041A is\n\t// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n\t// and not 'hr-HR' because Croatia is the default country for Croatian,\n\t// according to Unicode CLDR. As another example, Microsoft states\n\t// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n\t// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n\t// for the Croatian language, according to IANA.\n\t//\n\t// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n\t// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\tvar windowsLanguages = {\n\t    0x0436: 'af',\n\t    0x041C: 'sq',\n\t    0x0484: 'gsw',\n\t    0x045E: 'am',\n\t    0x1401: 'ar-DZ',\n\t    0x3C01: 'ar-BH',\n\t    0x0C01: 'ar',\n\t    0x0801: 'ar-IQ',\n\t    0x2C01: 'ar-JO',\n\t    0x3401: 'ar-KW',\n\t    0x3001: 'ar-LB',\n\t    0x1001: 'ar-LY',\n\t    0x1801: 'ary',\n\t    0x2001: 'ar-OM',\n\t    0x4001: 'ar-QA',\n\t    0x0401: 'ar-SA',\n\t    0x2801: 'ar-SY',\n\t    0x1C01: 'aeb',\n\t    0x3801: 'ar-AE',\n\t    0x2401: 'ar-YE',\n\t    0x042B: 'hy',\n\t    0x044D: 'as',\n\t    0x082C: 'az-Cyrl',\n\t    0x042C: 'az',\n\t    0x046D: 'ba',\n\t    0x042D: 'eu',\n\t    0x0423: 'be',\n\t    0x0845: 'bn',\n\t    0x0445: 'bn-IN',\n\t    0x201A: 'bs-Cyrl',\n\t    0x141A: 'bs',\n\t    0x047E: 'br',\n\t    0x0402: 'bg',\n\t    0x0403: 'ca',\n\t    0x0C04: 'zh-HK',\n\t    0x1404: 'zh-MO',\n\t    0x0804: 'zh',\n\t    0x1004: 'zh-SG',\n\t    0x0404: 'zh-TW',\n\t    0x0483: 'co',\n\t    0x041A: 'hr',\n\t    0x101A: 'hr-BA',\n\t    0x0405: 'cs',\n\t    0x0406: 'da',\n\t    0x048C: 'prs',\n\t    0x0465: 'dv',\n\t    0x0813: 'nl-BE',\n\t    0x0413: 'nl',\n\t    0x0C09: 'en-AU',\n\t    0x2809: 'en-BZ',\n\t    0x1009: 'en-CA',\n\t    0x2409: 'en-029',\n\t    0x4009: 'en-IN',\n\t    0x1809: 'en-IE',\n\t    0x2009: 'en-JM',\n\t    0x4409: 'en-MY',\n\t    0x1409: 'en-NZ',\n\t    0x3409: 'en-PH',\n\t    0x4809: 'en-SG',\n\t    0x1C09: 'en-ZA',\n\t    0x2C09: 'en-TT',\n\t    0x0809: 'en-GB',\n\t    0x0409: 'en',\n\t    0x3009: 'en-ZW',\n\t    0x0425: 'et',\n\t    0x0438: 'fo',\n\t    0x0464: 'fil',\n\t    0x040B: 'fi',\n\t    0x080C: 'fr-BE',\n\t    0x0C0C: 'fr-CA',\n\t    0x040C: 'fr',\n\t    0x140C: 'fr-LU',\n\t    0x180C: 'fr-MC',\n\t    0x100C: 'fr-CH',\n\t    0x0462: 'fy',\n\t    0x0456: 'gl',\n\t    0x0437: 'ka',\n\t    0x0C07: 'de-AT',\n\t    0x0407: 'de',\n\t    0x1407: 'de-LI',\n\t    0x1007: 'de-LU',\n\t    0x0807: 'de-CH',\n\t    0x0408: 'el',\n\t    0x046F: 'kl',\n\t    0x0447: 'gu',\n\t    0x0468: 'ha',\n\t    0x040D: 'he',\n\t    0x0439: 'hi',\n\t    0x040E: 'hu',\n\t    0x040F: 'is',\n\t    0x0470: 'ig',\n\t    0x0421: 'id',\n\t    0x045D: 'iu',\n\t    0x085D: 'iu-Latn',\n\t    0x083C: 'ga',\n\t    0x0434: 'xh',\n\t    0x0435: 'zu',\n\t    0x0410: 'it',\n\t    0x0810: 'it-CH',\n\t    0x0411: 'ja',\n\t    0x044B: 'kn',\n\t    0x043F: 'kk',\n\t    0x0453: 'km',\n\t    0x0486: 'quc',\n\t    0x0487: 'rw',\n\t    0x0441: 'sw',\n\t    0x0457: 'kok',\n\t    0x0412: 'ko',\n\t    0x0440: 'ky',\n\t    0x0454: 'lo',\n\t    0x0426: 'lv',\n\t    0x0427: 'lt',\n\t    0x082E: 'dsb',\n\t    0x046E: 'lb',\n\t    0x042F: 'mk',\n\t    0x083E: 'ms-BN',\n\t    0x043E: 'ms',\n\t    0x044C: 'ml',\n\t    0x043A: 'mt',\n\t    0x0481: 'mi',\n\t    0x047A: 'arn',\n\t    0x044E: 'mr',\n\t    0x047C: 'moh',\n\t    0x0450: 'mn',\n\t    0x0850: 'mn-CN',\n\t    0x0461: 'ne',\n\t    0x0414: 'nb',\n\t    0x0814: 'nn',\n\t    0x0482: 'oc',\n\t    0x0448: 'or',\n\t    0x0463: 'ps',\n\t    0x0415: 'pl',\n\t    0x0416: 'pt',\n\t    0x0816: 'pt-PT',\n\t    0x0446: 'pa',\n\t    0x046B: 'qu-BO',\n\t    0x086B: 'qu-EC',\n\t    0x0C6B: 'qu',\n\t    0x0418: 'ro',\n\t    0x0417: 'rm',\n\t    0x0419: 'ru',\n\t    0x243B: 'smn',\n\t    0x103B: 'smj-NO',\n\t    0x143B: 'smj',\n\t    0x0C3B: 'se-FI',\n\t    0x043B: 'se',\n\t    0x083B: 'se-SE',\n\t    0x203B: 'sms',\n\t    0x183B: 'sma-NO',\n\t    0x1C3B: 'sms',\n\t    0x044F: 'sa',\n\t    0x1C1A: 'sr-Cyrl-BA',\n\t    0x0C1A: 'sr',\n\t    0x181A: 'sr-Latn-BA',\n\t    0x081A: 'sr-Latn',\n\t    0x046C: 'nso',\n\t    0x0432: 'tn',\n\t    0x045B: 'si',\n\t    0x041B: 'sk',\n\t    0x0424: 'sl',\n\t    0x2C0A: 'es-AR',\n\t    0x400A: 'es-BO',\n\t    0x340A: 'es-CL',\n\t    0x240A: 'es-CO',\n\t    0x140A: 'es-CR',\n\t    0x1C0A: 'es-DO',\n\t    0x300A: 'es-EC',\n\t    0x440A: 'es-SV',\n\t    0x100A: 'es-GT',\n\t    0x480A: 'es-HN',\n\t    0x080A: 'es-MX',\n\t    0x4C0A: 'es-NI',\n\t    0x180A: 'es-PA',\n\t    0x3C0A: 'es-PY',\n\t    0x280A: 'es-PE',\n\t    0x500A: 'es-PR',\n\n\t    // Microsoft has defined two different language codes for\n\t    // “Spanish with modern sorting” and “Spanish with traditional\n\t    // sorting”. This makes sense for collation APIs, and it would be\n\t    // possible to express this in BCP 47 language tags via Unicode\n\t    // extensions (eg., es-u-co-trad is Spanish with traditional\n\t    // sorting). However, for storing names in fonts, the distinction\n\t    // does not make sense, so we give “es” in both cases.\n\t    0x0C0A: 'es',\n\t    0x040A: 'es',\n\n\t    0x540A: 'es-US',\n\t    0x380A: 'es-UY',\n\t    0x200A: 'es-VE',\n\t    0x081D: 'sv-FI',\n\t    0x041D: 'sv',\n\t    0x045A: 'syr',\n\t    0x0428: 'tg',\n\t    0x085F: 'tzm',\n\t    0x0449: 'ta',\n\t    0x0444: 'tt',\n\t    0x044A: 'te',\n\t    0x041E: 'th',\n\t    0x0451: 'bo',\n\t    0x041F: 'tr',\n\t    0x0442: 'tk',\n\t    0x0480: 'ug',\n\t    0x0422: 'uk',\n\t    0x042E: 'hsb',\n\t    0x0420: 'ur',\n\t    0x0843: 'uz-Cyrl',\n\t    0x0443: 'uz',\n\t    0x042A: 'vi',\n\t    0x0452: 'cy',\n\t    0x0488: 'wo',\n\t    0x0485: 'sah',\n\t    0x0478: 'ii',\n\t    0x046A: 'yo'\n\t};\n\n\t// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n\t// for 'Chinese in the traditional script'.\n\tfunction getLanguageCode(platformID, languageID, ltag) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            if (languageID === 0xFFFF) {\n\t                return 'und';\n\t            } else if (ltag) {\n\t                return ltag[languageID];\n\t            }\n\n\t            break;\n\n\t        case 1:  // Macintosh\n\t            return macLanguages[languageID];\n\n\t        case 3:  // Windows\n\t            return windowsLanguages[languageID];\n\t    }\n\n\t    return undefined;\n\t}\n\n\tvar utf16 = 'utf-16';\n\n\t// MacOS script ID → encoding. This table stores the default case,\n\t// which can be overridden by macLanguageEncodings.\n\tvar macScriptEncodings = {\n\t    0: 'macintosh',           // smRoman\n\t    1: 'x-mac-japanese',      // smJapanese\n\t    2: 'x-mac-chinesetrad',   // smTradChinese\n\t    3: 'x-mac-korean',        // smKorean\n\t    6: 'x-mac-greek',         // smGreek\n\t    7: 'x-mac-cyrillic',      // smCyrillic\n\t    9: 'x-mac-devanagai',     // smDevanagari\n\t    10: 'x-mac-gurmukhi',     // smGurmukhi\n\t    11: 'x-mac-gujarati',     // smGujarati\n\t    12: 'x-mac-oriya',        // smOriya\n\t    13: 'x-mac-bengali',      // smBengali\n\t    14: 'x-mac-tamil',        // smTamil\n\t    15: 'x-mac-telugu',       // smTelugu\n\t    16: 'x-mac-kannada',      // smKannada\n\t    17: 'x-mac-malayalam',    // smMalayalam\n\t    18: 'x-mac-sinhalese',    // smSinhalese\n\t    19: 'x-mac-burmese',      // smBurmese\n\t    20: 'x-mac-khmer',        // smKhmer\n\t    21: 'x-mac-thai',         // smThai\n\t    22: 'x-mac-lao',          // smLao\n\t    23: 'x-mac-georgian',     // smGeorgian\n\t    24: 'x-mac-armenian',     // smArmenian\n\t    25: 'x-mac-chinesesimp',  // smSimpChinese\n\t    26: 'x-mac-tibetan',      // smTibetan\n\t    27: 'x-mac-mongolian',    // smMongolian\n\t    28: 'x-mac-ethiopic',     // smEthiopic\n\t    29: 'x-mac-ce',           // smCentralEuroRoman\n\t    30: 'x-mac-vietnamese',   // smVietnamese\n\t    31: 'x-mac-extarabic'     // smExtArabic\n\t};\n\n\t// MacOS language ID → encoding. This table stores the exceptional\n\t// cases, which override macScriptEncodings. For writing MacOS naming\n\t// tables, we need to emit a MacOS script ID. Therefore, we cannot\n\t// merge macScriptEncodings into macLanguageEncodings.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageEncodings = {\n\t    15: 'x-mac-icelandic',    // langIcelandic\n\t    17: 'x-mac-turkish',      // langTurkish\n\t    18: 'x-mac-croatian',     // langCroatian\n\t    24: 'x-mac-ce',           // langLithuanian\n\t    25: 'x-mac-ce',           // langPolish\n\t    26: 'x-mac-ce',           // langHungarian\n\t    27: 'x-mac-ce',           // langEstonian\n\t    28: 'x-mac-ce',           // langLatvian\n\t    30: 'x-mac-icelandic',    // langFaroese\n\t    37: 'x-mac-romanian',     // langRomanian\n\t    38: 'x-mac-ce',           // langCzech\n\t    39: 'x-mac-ce',           // langSlovak\n\t    40: 'x-mac-ce',           // langSlovenian\n\t    143: 'x-mac-inuit',       // langInuktitut\n\t    146: 'x-mac-gaelic'       // langIrishGaelicScript\n\t};\n\n\tfunction getEncoding(platformID, encodingID, languageID) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            return utf16;\n\n\t        case 1:  // Apple Macintosh\n\t            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n\t        case 3:  // Microsoft Windows\n\t            if (encodingID === 1 || encodingID === 10) {\n\t                return utf16;\n\t            }\n\n\t            break;\n\t    }\n\n\t    return undefined;\n\t}\n\n\t// Parse the naming `name` table.\n\t// FIXME: Format 1 additional fields are not supported yet.\n\t// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n\tfunction parseNameTable(data, start, ltag) {\n\t    var name = {};\n\t    var p = new parse.Parser(data, start);\n\t    var format = p.parseUShort();\n\t    var count = p.parseUShort();\n\t    var stringOffset = p.offset + p.parseUShort();\n\t    for (var i = 0; i < count; i++) {\n\t        var platformID = p.parseUShort();\n\t        var encodingID = p.parseUShort();\n\t        var languageID = p.parseUShort();\n\t        var nameID = p.parseUShort();\n\t        var property = nameTableNames[nameID] || nameID;\n\t        var byteLength = p.parseUShort();\n\t        var offset = p.parseUShort();\n\t        var language = getLanguageCode(platformID, languageID, ltag);\n\t        var encoding = getEncoding(platformID, encodingID, languageID);\n\t        if (encoding !== undefined && language !== undefined) {\n\t            var text = (void 0);\n\t            if (encoding === utf16) {\n\t                text = decode.UTF16(data, stringOffset + offset, byteLength);\n\t            } else {\n\t                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);\n\t            }\n\n\t            if (text) {\n\t                var translations = name[property];\n\t                if (translations === undefined) {\n\t                    translations = name[property] = {};\n\t                }\n\n\t                translations[language] = text;\n\t            }\n\t        }\n\t    }\n\n\t    var langTagCount = 0;\n\t    if (format === 1) {\n\t        // FIXME: Also handle Microsoft's 'name' table 1.\n\t        langTagCount = p.parseUShort();\n\t    }\n\n\t    return name;\n\t}\n\n\t// {23: 'foo'} → {'foo': 23}\n\t// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n\tfunction reverseDict(dict) {\n\t    var result = {};\n\t    for (var key in dict) {\n\t        result[dict[key]] = parseInt(key);\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n\t    return new table.Record('NameRecord', [\n\t        {name: 'platformID', type: 'USHORT', value: platformID},\n\t        {name: 'encodingID', type: 'USHORT', value: encodingID},\n\t        {name: 'languageID', type: 'USHORT', value: languageID},\n\t        {name: 'nameID', type: 'USHORT', value: nameID},\n\t        {name: 'length', type: 'USHORT', value: length},\n\t        {name: 'offset', type: 'USHORT', value: offset}\n\t    ]);\n\t}\n\n\t// Finds the position of needle in haystack, or -1 if not there.\n\t// Like String.indexOf(), but for arrays.\n\tfunction findSubArray(needle, haystack) {\n\t    var needleLength = needle.length;\n\t    var limit = haystack.length - needleLength + 1;\n\n\t    loop:\n\t    for (var pos = 0; pos < limit; pos++) {\n\t        for (; pos < limit; pos++) {\n\t            for (var k = 0; k < needleLength; k++) {\n\t                if (haystack[pos + k] !== needle[k]) {\n\t                    continue loop;\n\t                }\n\t            }\n\n\t            return pos;\n\t        }\n\t    }\n\n\t    return -1;\n\t}\n\n\tfunction addStringToPool(s, pool) {\n\t    var offset = findSubArray(s, pool);\n\t    if (offset < 0) {\n\t        offset = pool.length;\n\t        var i = 0;\n\t        var len = s.length;\n\t        for (; i < len; ++i) {\n\t            pool.push(s[i]);\n\t        }\n\n\t    }\n\n\t    return offset;\n\t}\n\n\tfunction makeNameTable(names, ltag) {\n\t    var nameID;\n\t    var nameIDs = [];\n\n\t    var namesWithNumericKeys = {};\n\t    var nameTableIds = reverseDict(nameTableNames);\n\t    for (var key in names) {\n\t        var id = nameTableIds[key];\n\t        if (id === undefined) {\n\t            id = key;\n\t        }\n\n\t        nameID = parseInt(id);\n\n\t        if (isNaN(nameID)) {\n\t            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n\t        }\n\n\t        namesWithNumericKeys[nameID] = names[key];\n\t        nameIDs.push(nameID);\n\t    }\n\n\t    var macLanguageIds = reverseDict(macLanguages);\n\t    var windowsLanguageIds = reverseDict(windowsLanguages);\n\n\t    var nameRecords = [];\n\t    var stringPool = [];\n\n\t    for (var i = 0; i < nameIDs.length; i++) {\n\t        nameID = nameIDs[i];\n\t        var translations = namesWithNumericKeys[nameID];\n\t        for (var lang in translations) {\n\t            var text = translations[lang];\n\n\t            // For MacOS, we try to emit the name in the form that was introduced\n\t            // in the initial version of the TrueType spec (in the late 1980s).\n\t            // However, this can fail for various reasons: the requested BCP 47\n\t            // language code might not have an old-style Mac equivalent;\n\t            // we might not have a codec for the needed character encoding;\n\t            // or the name might contain characters that cannot be expressed\n\t            // in the old-style Macintosh encoding. In case of failure, we emit\n\t            // the name in a more modern fashion (Unicode encoding with BCP 47\n\t            // language tags) that is recognized by MacOS 10.5, released in 2009.\n\t            // If fonts were only read by operating systems, we could simply\n\t            // emit all names in the modern form; this would be much easier.\n\t            // However, there are many applications and libraries that read\n\t            // 'name' tables directly, and these will usually only recognize\n\t            // the ancient form (silently skipping the unrecognized names).\n\t            var macPlatform = 1;  // Macintosh\n\t            var macLanguage = macLanguageIds[lang];\n\t            var macScript = macLanguageToScript[macLanguage];\n\t            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n\t            var macName = encode.MACSTRING(text, macEncoding);\n\t            if (macName === undefined) {\n\t                macPlatform = 0;  // Unicode\n\t                macLanguage = ltag.indexOf(lang);\n\t                if (macLanguage < 0) {\n\t                    macLanguage = ltag.length;\n\t                    ltag.push(lang);\n\t                }\n\n\t                macScript = 4;  // Unicode 2.0 and later\n\t                macName = encode.UTF16(text);\n\t            }\n\n\t            var macNameOffset = addStringToPool(macName, stringPool);\n\t            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n\t                                            nameID, macName.length, macNameOffset));\n\n\t            var winLanguage = windowsLanguageIds[lang];\n\t            if (winLanguage !== undefined) {\n\t                var winName = encode.UTF16(text);\n\t                var winNameOffset = addStringToPool(winName, stringPool);\n\t                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n\t                                                nameID, winName.length, winNameOffset));\n\t            }\n\t        }\n\t    }\n\n\t    nameRecords.sort(function(a, b) {\n\t        return ((a.platformID - b.platformID) ||\n\t                (a.encodingID - b.encodingID) ||\n\t                (a.languageID - b.languageID) ||\n\t                (a.nameID - b.nameID));\n\t    });\n\n\t    var t = new table.Table('name', [\n\t        {name: 'format', type: 'USHORT', value: 0},\n\t        {name: 'count', type: 'USHORT', value: nameRecords.length},\n\t        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n\t    ]);\n\n\t    for (var r = 0; r < nameRecords.length; r++) {\n\t        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n\t    }\n\n\t    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n\t    return t;\n\t}\n\n\tvar _name = { parse: parseNameTable, make: makeNameTable };\n\n\t// The `OS/2` table contains metrics required in OpenType fonts.\n\n\tvar unicodeRanges = [\n\t    {begin: 0x0000, end: 0x007F}, // Basic Latin\n\t    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n\t    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n\t    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n\t    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n\t    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n\t    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n\t    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n\t    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n\t    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n\t    {begin: 0x0530, end: 0x058F}, // Armenian\n\t    {begin: 0x0590, end: 0x05FF}, // Hebrew\n\t    {begin: 0xA500, end: 0xA63F}, // Vai\n\t    {begin: 0x0600, end: 0x06FF}, // Arabic\n\t    {begin: 0x07C0, end: 0x07FF}, // NKo\n\t    {begin: 0x0900, end: 0x097F}, // Devanagari\n\t    {begin: 0x0980, end: 0x09FF}, // Bengali\n\t    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n\t    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n\t    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n\t    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n\t    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n\t    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n\t    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n\t    {begin: 0x0E00, end: 0x0E7F}, // Thai\n\t    {begin: 0x0E80, end: 0x0EFF}, // Lao\n\t    {begin: 0x10A0, end: 0x10FF}, // Georgian\n\t    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n\t    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n\t    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n\t    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n\t    {begin: 0x2000, end: 0x206F}, // General Punctuation\n\t    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n\t    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n\t    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n\t    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n\t    {begin: 0x2150, end: 0x218F}, // Number Forms\n\t    {begin: 0x2190, end: 0x21FF}, // Arrows\n\t    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n\t    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n\t    {begin: 0x2400, end: 0x243F}, // Control Pictures\n\t    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n\t    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n\t    {begin: 0x2500, end: 0x257F}, // Box Drawing\n\t    {begin: 0x2580, end: 0x259F}, // Block Elements\n\t    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n\t    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n\t    {begin: 0x2700, end: 0x27BF}, // Dingbats\n\t    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n\t    {begin: 0x3040, end: 0x309F}, // Hiragana\n\t    {begin: 0x30A0, end: 0x30FF}, // Katakana\n\t    {begin: 0x3100, end: 0x312F}, // Bopomofo\n\t    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n\t    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n\t    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n\t    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n\t    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n\t    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n\t    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n\t    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n\t    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n\t    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n\t    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n\t    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n\t    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n\t    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n\t    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n\t    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n\t    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n\t    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n\t    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n\t    {begin: 0x0700, end: 0x074F}, // Syriac\n\t    {begin: 0x0780, end: 0x07BF}, // Thaana\n\t    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n\t    {begin: 0x1000, end: 0x109F}, // Myanmar\n\t    {begin: 0x1200, end: 0x137F}, // Ethiopic\n\t    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n\t    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n\t    {begin: 0x1680, end: 0x169F}, // Ogham\n\t    {begin: 0x16A0, end: 0x16FF}, // Runic\n\t    {begin: 0x1780, end: 0x17FF}, // Khmer\n\t    {begin: 0x1800, end: 0x18AF}, // Mongolian\n\t    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n\t    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n\t    {begin: 0x1700, end: 0x171F}, // Tagalog\n\t    {begin: 0x10300, end: 0x1032F}, // Old Italic\n\t    {begin: 0x10330, end: 0x1034F}, // Gothic\n\t    {begin: 0x10400, end: 0x1044F}, // Deseret\n\t    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n\t    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n\t    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n\t    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n\t    {begin: 0xE0000, end: 0xE007F}, // Tags\n\t    {begin: 0x1900, end: 0x194F}, // Limbu\n\t    {begin: 0x1950, end: 0x197F}, // Tai Le\n\t    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n\t    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n\t    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n\t    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n\t    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n\t    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n\t    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n\t    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n\t    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n\t    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n\t    {begin: 0x10450, end: 0x1047F}, // Shavian\n\t    {begin: 0x10480, end: 0x104AF}, // Osmanya\n\t    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n\t    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n\t    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n\t    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n\t    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n\t    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n\t    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n\t    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n\t    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n\t    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n\t    {begin: 0xA930, end: 0xA95F}, // Rejang\n\t    {begin: 0xAA00, end: 0xAA5F}, // Cham\n\t    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n\t    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n\t    {begin: 0x102A0, end: 0x102DF}, // Carian\n\t    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n\t];\n\n\tfunction getUnicodeRange(unicode) {\n\t    for (var i = 0; i < unicodeRanges.length; i += 1) {\n\t        var range = unicodeRanges[i];\n\t        if (unicode >= range.begin && unicode < range.end) {\n\t            return i;\n\t        }\n\t    }\n\n\t    return -1;\n\t}\n\n\t// Parse the OS/2 and Windows metrics `OS/2` table\n\tfunction parseOS2Table(data, start) {\n\t    var os2 = {};\n\t    var p = new parse.Parser(data, start);\n\t    os2.version = p.parseUShort();\n\t    os2.xAvgCharWidth = p.parseShort();\n\t    os2.usWeightClass = p.parseUShort();\n\t    os2.usWidthClass = p.parseUShort();\n\t    os2.fsType = p.parseUShort();\n\t    os2.ySubscriptXSize = p.parseShort();\n\t    os2.ySubscriptYSize = p.parseShort();\n\t    os2.ySubscriptXOffset = p.parseShort();\n\t    os2.ySubscriptYOffset = p.parseShort();\n\t    os2.ySuperscriptXSize = p.parseShort();\n\t    os2.ySuperscriptYSize = p.parseShort();\n\t    os2.ySuperscriptXOffset = p.parseShort();\n\t    os2.ySuperscriptYOffset = p.parseShort();\n\t    os2.yStrikeoutSize = p.parseShort();\n\t    os2.yStrikeoutPosition = p.parseShort();\n\t    os2.sFamilyClass = p.parseShort();\n\t    os2.panose = [];\n\t    for (var i = 0; i < 10; i++) {\n\t        os2.panose[i] = p.parseByte();\n\t    }\n\n\t    os2.ulUnicodeRange1 = p.parseULong();\n\t    os2.ulUnicodeRange2 = p.parseULong();\n\t    os2.ulUnicodeRange3 = p.parseULong();\n\t    os2.ulUnicodeRange4 = p.parseULong();\n\t    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n\t    os2.fsSelection = p.parseUShort();\n\t    os2.usFirstCharIndex = p.parseUShort();\n\t    os2.usLastCharIndex = p.parseUShort();\n\t    os2.sTypoAscender = p.parseShort();\n\t    os2.sTypoDescender = p.parseShort();\n\t    os2.sTypoLineGap = p.parseShort();\n\t    os2.usWinAscent = p.parseUShort();\n\t    os2.usWinDescent = p.parseUShort();\n\t    if (os2.version >= 1) {\n\t        os2.ulCodePageRange1 = p.parseULong();\n\t        os2.ulCodePageRange2 = p.parseULong();\n\t    }\n\n\t    if (os2.version >= 2) {\n\t        os2.sxHeight = p.parseShort();\n\t        os2.sCapHeight = p.parseShort();\n\t        os2.usDefaultChar = p.parseUShort();\n\t        os2.usBreakChar = p.parseUShort();\n\t        os2.usMaxContent = p.parseUShort();\n\t    }\n\n\t    return os2;\n\t}\n\n\tfunction makeOS2Table(options) {\n\t    return new table.Table('OS/2', [\n\t        {name: 'version', type: 'USHORT', value: 0x0003},\n\t        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n\t        {name: 'usWeightClass', type: 'USHORT', value: 0},\n\t        {name: 'usWidthClass', type: 'USHORT', value: 0},\n\t        {name: 'fsType', type: 'USHORT', value: 0},\n\t        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n\t        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n\t        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n\t        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n\t        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n\t        {name: 'bFamilyType', type: 'BYTE', value: 0},\n\t        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n\t        {name: 'bWeight', type: 'BYTE', value: 0},\n\t        {name: 'bProportion', type: 'BYTE', value: 0},\n\t        {name: 'bContrast', type: 'BYTE', value: 0},\n\t        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n\t        {name: 'bArmStyle', type: 'BYTE', value: 0},\n\t        {name: 'bLetterform', type: 'BYTE', value: 0},\n\t        {name: 'bMidline', type: 'BYTE', value: 0},\n\t        {name: 'bXHeight', type: 'BYTE', value: 0},\n\t        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n\t        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n\t        {name: 'fsSelection', type: 'USHORT', value: 0},\n\t        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n\t        {name: 'usWinAscent', type: 'USHORT', value: 0},\n\t        {name: 'usWinDescent', type: 'USHORT', value: 0},\n\t        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n\t        {name: 'sxHeight', type: 'SHORT', value: 0},\n\t        {name: 'sCapHeight', type: 'SHORT', value: 0},\n\t        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n\t        {name: 'usBreakChar', type: 'USHORT', value: 0},\n\t        {name: 'usMaxContext', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };\n\n\t// The `post` table stores additional PostScript information, such as glyph names.\n\n\t// Parse the PostScript `post` table\n\tfunction parsePostTable(data, start) {\n\t    var post = {};\n\t    var p = new parse.Parser(data, start);\n\t    post.version = p.parseVersion();\n\t    post.italicAngle = p.parseFixed();\n\t    post.underlinePosition = p.parseShort();\n\t    post.underlineThickness = p.parseShort();\n\t    post.isFixedPitch = p.parseULong();\n\t    post.minMemType42 = p.parseULong();\n\t    post.maxMemType42 = p.parseULong();\n\t    post.minMemType1 = p.parseULong();\n\t    post.maxMemType1 = p.parseULong();\n\t    switch (post.version) {\n\t        case 1:\n\t            post.names = standardNames.slice();\n\t            break;\n\t        case 2:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n\t            for (var i = 0; i < post.numberOfGlyphs; i++) {\n\t                post.glyphNameIndex[i] = p.parseUShort();\n\t            }\n\n\t            post.names = [];\n\t            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n\t                if (post.glyphNameIndex[i$1] >= standardNames.length) {\n\t                    var nameLength = p.parseChar();\n\t                    post.names.push(p.parseString(nameLength));\n\t                }\n\t            }\n\n\t            break;\n\t        case 2.5:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.offset = new Array(post.numberOfGlyphs);\n\t            for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n\t                post.offset[i$2] = p.parseChar();\n\t            }\n\n\t            break;\n\t    }\n\t    return post;\n\t}\n\n\tfunction makePostTable() {\n\t    return new table.Table('post', [\n\t        {name: 'version', type: 'FIXED', value: 0x00030000},\n\t        {name: 'italicAngle', type: 'FIXED', value: 0},\n\t        {name: 'underlinePosition', type: 'FWORD', value: 0},\n\t        {name: 'underlineThickness', type: 'FWORD', value: 0},\n\t        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n\t        {name: 'minMemType42', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType42', type: 'ULONG', value: 0},\n\t        {name: 'minMemType1', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType1', type: 'ULONG', value: 0}\n\t    ]);\n\t}\n\n\tvar post = { parse: parsePostTable, make: makePostTable };\n\n\t// The `GSUB` table contains ligatures, among other things.\n\n\tvar subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n\tsubtableParsers[1] = function parseLookup1() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            deltaGlyphId: this.parseUShort()\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            substitute: this.parseOffset16List()\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n\tsubtableParsers[2] = function parseLookup2() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        sequences: this.parseListOfLists()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n\tsubtableParsers[3] = function parseLookup3() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        alternateSets: this.parseListOfLists()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n\tsubtableParsers[4] = function parseLookup4() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        ligatureSets: this.parseListOfLists(function() {\n\t            return {\n\t                ligGlyph: this.parseUShort(),\n\t                components: this.parseUShortList(this.parseUShort() - 1)\n\t            };\n\t        })\n\t    };\n\t};\n\n\tvar lookupRecordDesc = {\n\t    sequenceIndex: Parser.uShort,\n\t    lookupListIndex: Parser.uShort\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n\tsubtableParsers[5] = function parseLookup5() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            ruleSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    input: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            classDef: this.parsePointer(Parser.classDef),\n\t            classSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    classes: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        var glyphCount = this.parseUShort();\n\t        var substCount = this.parseUShort();\n\t        return {\n\t            substFormat: substFormat,\n\t            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n\tsubtableParsers[6] = function parseLookup6() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            chainRuleSets: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            backtrackClassDef: this.parsePointer(Parser.classDef),\n\t            inputClassDef: this.parsePointer(Parser.classDef),\n\t            lookaheadClassDef: this.parsePointer(Parser.classDef),\n\t            chainClassSet: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        return {\n\t            substFormat: 3,\n\t            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n\tsubtableParsers[7] = function parseLookup7() {\n\t    // Extension Substitution subtable\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n\t    var extensionLookupType = this.parseUShort();\n\t    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n\t    return {\n\t        substFormat: 1,\n\t        lookupType: extensionLookupType,\n\t        extension: subtableParsers[extensionLookupType].call(extensionParser)\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n\tsubtableParsers[8] = function parseLookup8() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        substitutes: this.parseUShortList()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\tfunction parseGsubTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion(1);\n\t    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n\t    if (tableVersion === 1) {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers)\n\t        };\n\t    } else {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers),\n\t            variations: p.parseFeatureVariationsList()\n\t        };\n\t    }\n\n\t}\n\n\t// GSUB Writing //////////////////////////////////////////////\n\tvar subtableMakers = new Array(9);\n\n\tsubtableMakers[1] = function makeLookup1(subtable) {\n\t    if (subtable.substFormat === 1) {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 1},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},\n\t            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n\t        ]);\n\t    } else {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 2},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t        ].concat(table.ushortList('substitute', subtable.substitute)));\n\t    }\n\t};\n\n\tsubtableMakers[2] = function makeLookup2(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 2 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('seqSet', subtable.sequences, function(sequenceSet) {\n\t        return new table.Table('sequenceSetTable', table.ushortList('sequence', sequenceSet));\n\t    })));\n\t};\n\n\tsubtableMakers[3] = function makeLookup3(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {\n\t        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n\t    })));\n\t};\n\n\tsubtableMakers[4] = function makeLookup4(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n\t        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {\n\t            return new table.Table('ligatureTable',\n\t                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n\t                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))\n\t            );\n\t        }));\n\t    })));\n\t};\n\n\tsubtableMakers[6] = function makeLookup6(subtable) {\n\t    if (subtable.substFormat === 1) {\n\t        var returnTable = new table.Table('chainContextTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t        ].concat(table.tableList('chainRuleSet', subtable.chainRuleSets, function(chainRuleSet) {\n\t            return new table.Table('chainRuleSetTable', table.tableList('chainRule', chainRuleSet, function(chainRule) {\n\t                var tableData = table.ushortList('backtrackGlyph', chainRule.backtrack, chainRule.backtrack.length)\n\t                    .concat(table.ushortList('inputGlyph', chainRule.input, chainRule.input.length + 1))\n\t                    .concat(table.ushortList('lookaheadGlyph', chainRule.lookahead, chainRule.lookahead.length))\n\t                    .concat(table.ushortList('substitution', [], chainRule.lookupRecords.length));\n\n\t                chainRule.lookupRecords.forEach(function (record, i) {\n\t                    tableData = tableData\n\t                        .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})\n\t                        .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});\n\t                });\n\t                return new table.Table('chainRuleTable', tableData);\n\t            }));\n\t        })));\n\t        return returnTable;\n\t    } else if (subtable.substFormat === 2) {\n\t        check.assert(false, 'lookup type 6 format 2 is not yet supported.');\n\t    } else if (subtable.substFormat === 3) {\n\t        var tableData = [\n\t            {name: 'substFormat', type: 'USHORT', value: subtable.substFormat} ];\n\n\t        tableData.push({name: 'backtrackGlyphCount', type: 'USHORT', value: subtable.backtrackCoverage.length});\n\t        subtable.backtrackCoverage.forEach(function (coverage, i) {\n\t            tableData.push({name: 'backtrackCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n\t        });\n\t        tableData.push({name: 'inputGlyphCount', type: 'USHORT', value: subtable.inputCoverage.length});\n\t        subtable.inputCoverage.forEach(function (coverage, i) {\n\t            tableData.push({name: 'inputCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n\t        });\n\t        tableData.push({name: 'lookaheadGlyphCount', type: 'USHORT', value: subtable.lookaheadCoverage.length});\n\t        subtable.lookaheadCoverage.forEach(function (coverage, i) {\n\t            tableData.push({name: 'lookaheadCoverage' + i, type: 'TABLE', value: new table.Coverage(coverage)});\n\t        });\n\n\t        tableData.push({name: 'substitutionCount', type: 'USHORT', value: subtable.lookupRecords.length});\n\t        subtable.lookupRecords.forEach(function (record, i) {\n\t            tableData = tableData\n\t                .concat({name: 'sequenceIndex' + i, type: 'USHORT', value: record.sequenceIndex})\n\t                .concat({name: 'lookupListIndex' + i, type: 'USHORT', value: record.lookupListIndex});\n\t        });\n\n\t        var returnTable$1 = new table.Table('chainContextTable', tableData);\n\n\t        return returnTable$1;\n\t    }\n\n\t    check.assert(false, 'lookup type 6 format must be 1, 2 or 3.');\n\t};\n\n\tfunction makeGsubTable(gsub) {\n\t    return new table.Table('GSUB', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},\n\t        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},\n\t        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}\n\t    ]);\n\t}\n\n\tvar gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\n\t// Parse the metadata `meta` table.\n\t// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n\tfunction parseMetaTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported META table version.');\n\t    p.parseULong(); // flags - currently unused and set to 0\n\t    p.parseULong(); // tableOffset\n\t    var numDataMaps = p.parseULong();\n\n\t    var tags = {};\n\t    for (var i = 0; i < numDataMaps; i++) {\n\t        var tag = p.parseTag();\n\t        var dataOffset = p.parseULong();\n\t        var dataLength = p.parseULong();\n\t        var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n\t        tags[tag] = text;\n\t    }\n\t    return tags;\n\t}\n\n\tfunction makeMetaTable(tags) {\n\t    var numTags = Object.keys(tags).length;\n\t    var stringPool = '';\n\t    var stringPoolOffset = 16 + numTags * 12;\n\n\t    var result = new table.Table('meta', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n\t        {name: 'numTags', type: 'ULONG', value: numTags}\n\t    ]);\n\n\t    for (var tag in tags) {\n\t        var pos = stringPool.length;\n\t        stringPool += tags[tag];\n\n\t        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n\t        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n\t    }\n\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\n\t    return result;\n\t}\n\n\tvar meta = { parse: parseMetaTable, make: makeMetaTable };\n\n\t// The `sfnt` wrapper provides organization for the tables in the font.\n\n\tfunction log2(v) {\n\t    return Math.log(v) / Math.log(2) | 0;\n\t}\n\n\tfunction computeCheckSum(bytes) {\n\t    while (bytes.length % 4 !== 0) {\n\t        bytes.push(0);\n\t    }\n\n\t    var sum = 0;\n\t    for (var i = 0; i < bytes.length; i += 4) {\n\t        sum += (bytes[i] << 24) +\n\t            (bytes[i + 1] << 16) +\n\t            (bytes[i + 2] << 8) +\n\t            (bytes[i + 3]);\n\t    }\n\n\t    sum %= Math.pow(2, 32);\n\t    return sum;\n\t}\n\n\tfunction makeTableRecord(tag, checkSum, offset, length) {\n\t    return new table.Record('Table Record', [\n\t        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n\t        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n\t        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n\t        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n\t    ]);\n\t}\n\n\tfunction makeSfntTable(tables) {\n\t    var sfnt = new table.Table('sfnt', [\n\t        {name: 'version', type: 'TAG', value: 'OTTO'},\n\t        {name: 'numTables', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\t    sfnt.tables = tables;\n\t    sfnt.numTables = tables.length;\n\t    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n\t    sfnt.searchRange = 16 * highestPowerOf2;\n\t    sfnt.entrySelector = log2(highestPowerOf2);\n\t    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n\t    var recordFields = [];\n\t    var tableFields = [];\n\n\t    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n\t    while (offset % 4 !== 0) {\n\t        offset += 1;\n\t        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t    }\n\n\t    for (var i = 0; i < tables.length; i += 1) {\n\t        var t = tables[i];\n\t        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n\t        var tableLength = t.sizeOf();\n\t        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n\t        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n\t        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n\t        offset += tableLength;\n\t        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n\t        while (offset % 4 !== 0) {\n\t            offset += 1;\n\t            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t        }\n\t    }\n\n\t    // Table records need to be sorted alphabetically.\n\t    recordFields.sort(function(r1, r2) {\n\t        if (r1.value.tag > r2.value.tag) {\n\t            return 1;\n\t        } else {\n\t            return -1;\n\t        }\n\t    });\n\n\t    sfnt.fields = sfnt.fields.concat(recordFields);\n\t    sfnt.fields = sfnt.fields.concat(tableFields);\n\t    return sfnt;\n\t}\n\n\t// Get the metrics for a character. If the string has more than one character\n\t// this function returns metrics for the first available character.\n\t// You can provide optional fallback metrics if no characters are available.\n\tfunction metricsForChar(font, chars, notFoundMetrics) {\n\t    for (var i = 0; i < chars.length; i += 1) {\n\t        var glyphIndex = font.charToGlyphIndex(chars[i]);\n\t        if (glyphIndex > 0) {\n\t            var glyph = font.glyphs.get(glyphIndex);\n\t            return glyph.getMetrics();\n\t        }\n\t    }\n\n\t    return notFoundMetrics;\n\t}\n\n\tfunction average(vs) {\n\t    var sum = 0;\n\t    for (var i = 0; i < vs.length; i += 1) {\n\t        sum += vs[i];\n\t    }\n\n\t    return sum / vs.length;\n\t}\n\n\t// Convert the font object to a SFNT data structure.\n\t// This structure contains all the necessary tables and metadata to create a binary OTF file.\n\tfunction fontToSfntTable(font) {\n\t    var xMins = [];\n\t    var yMins = [];\n\t    var xMaxs = [];\n\t    var yMaxs = [];\n\t    var advanceWidths = [];\n\t    var leftSideBearings = [];\n\t    var rightSideBearings = [];\n\t    var firstCharIndex;\n\t    var lastCharIndex = 0;\n\t    var ulUnicodeRange1 = 0;\n\t    var ulUnicodeRange2 = 0;\n\t    var ulUnicodeRange3 = 0;\n\t    var ulUnicodeRange4 = 0;\n\n\t    for (var i = 0; i < font.glyphs.length; i += 1) {\n\t        var glyph = font.glyphs.get(i);\n\t        var unicode = glyph.unicode | 0;\n\n\t        if (isNaN(glyph.advanceWidth)) {\n\t            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n\t        }\n\n\t        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n\t            // ignore .notdef char\n\t            if (unicode > 0) {\n\t                firstCharIndex = unicode;\n\t            }\n\t        }\n\n\t        if (lastCharIndex < unicode) {\n\t            lastCharIndex = unicode;\n\t        }\n\n\t        var position = os2.getUnicodeRange(unicode);\n\t        if (position < 32) {\n\t            ulUnicodeRange1 |= 1 << position;\n\t        } else if (position < 64) {\n\t            ulUnicodeRange2 |= 1 << position - 32;\n\t        } else if (position < 96) {\n\t            ulUnicodeRange3 |= 1 << position - 64;\n\t        } else if (position < 123) {\n\t            ulUnicodeRange4 |= 1 << position - 96;\n\t        } else {\n\t            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n\t        }\n\t        // Skip non-important characters.\n\t        if (glyph.name === '.notdef') { continue; }\n\t        var metrics = glyph.getMetrics();\n\t        xMins.push(metrics.xMin);\n\t        yMins.push(metrics.yMin);\n\t        xMaxs.push(metrics.xMax);\n\t        yMaxs.push(metrics.yMax);\n\t        leftSideBearings.push(metrics.leftSideBearing);\n\t        rightSideBearings.push(metrics.rightSideBearing);\n\t        advanceWidths.push(glyph.advanceWidth);\n\t    }\n\n\t    var globals = {\n\t        xMin: Math.min.apply(null, xMins),\n\t        yMin: Math.min.apply(null, yMins),\n\t        xMax: Math.max.apply(null, xMaxs),\n\t        yMax: Math.max.apply(null, yMaxs),\n\t        advanceWidthMax: Math.max.apply(null, advanceWidths),\n\t        advanceWidthAvg: average(advanceWidths),\n\t        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n\t        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n\t        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n\t    };\n\t    globals.ascender = font.ascender;\n\t    globals.descender = font.descender;\n\n\t    var headTable = head.make({\n\t        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n\t        unitsPerEm: font.unitsPerEm,\n\t        xMin: globals.xMin,\n\t        yMin: globals.yMin,\n\t        xMax: globals.xMax,\n\t        yMax: globals.yMax,\n\t        lowestRecPPEM: 3,\n\t        createdTimestamp: font.createdTimestamp\n\t    });\n\n\t    var hheaTable = hhea.make({\n\t        ascender: globals.ascender,\n\t        descender: globals.descender,\n\t        advanceWidthMax: globals.advanceWidthMax,\n\t        minLeftSideBearing: globals.minLeftSideBearing,\n\t        minRightSideBearing: globals.minRightSideBearing,\n\t        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n\t        numberOfHMetrics: font.glyphs.length\n\t    });\n\n\t    var maxpTable = maxp.make(font.glyphs.length);\n\n\t    var os2Table = os2.make(Object.assign({\n\t        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n\t        usFirstCharIndex: firstCharIndex,\n\t        usLastCharIndex: lastCharIndex,\n\t        ulUnicodeRange1: ulUnicodeRange1,\n\t        ulUnicodeRange2: ulUnicodeRange2,\n\t        ulUnicodeRange3: ulUnicodeRange3,\n\t        ulUnicodeRange4: ulUnicodeRange4,\n\t        // See http://typophile.com/node/13081 for more info on vertical metrics.\n\t        // We get metrics for typical characters (such as \"x\" for xHeight).\n\t        // We provide some fallback characters if characters are unavailable: their\n\t        // ordering was chosen experimentally.\n\t        sTypoAscender: globals.ascender,\n\t        sTypoDescender: globals.descender,\n\t        sTypoLineGap: 0,\n\t        usWinAscent: globals.yMax,\n\t        usWinDescent: Math.abs(globals.yMin),\n\t        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n\t        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n\t        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n\t        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n\t        usBreakChar: font.hasChar(' ') ? 32 : 0, // Use space as the break character, if available.\n\t    }, font.tables.os2));\n\n\t    var hmtxTable = hmtx.make(font.glyphs);\n\t    var cmapTable = cmap.make(font.glyphs);\n\n\t    var englishFamilyName = font.getEnglishName('fontFamily');\n\t    var englishStyleName = font.getEnglishName('fontSubfamily');\n\t    var englishFullName = englishFamilyName + ' ' + englishStyleName;\n\t    var postScriptName = font.getEnglishName('postScriptName');\n\t    if (!postScriptName) {\n\t        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n\t    }\n\n\t    var names = {};\n\t    for (var n in font.names) {\n\t        names[n] = font.names[n];\n\t    }\n\n\t    if (!names.uniqueID) {\n\t        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n\t    }\n\n\t    if (!names.postScriptName) {\n\t        names.postScriptName = {en: postScriptName};\n\t    }\n\n\t    if (!names.preferredFamily) {\n\t        names.preferredFamily = font.names.fontFamily;\n\t    }\n\n\t    if (!names.preferredSubfamily) {\n\t        names.preferredSubfamily = font.names.fontSubfamily;\n\t    }\n\n\t    var languageTags = [];\n\t    var nameTable = _name.make(names, languageTags);\n\t    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);\n\n\t    var postTable = post.make();\n\t    var cffTable = cff.make(font.glyphs, {\n\t        version: font.getEnglishName('version'),\n\t        fullName: englishFullName,\n\t        familyName: englishFamilyName,\n\t        weightName: englishStyleName,\n\t        postScriptName: postScriptName,\n\t        unitsPerEm: font.unitsPerEm,\n\t        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n\t    });\n\n\t    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;\n\n\t    // The order does not matter because makeSfntTable() will sort them.\n\t    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n\t    if (ltagTable) {\n\t        tables.push(ltagTable);\n\t    }\n\t    // Optional tables\n\t    if (font.tables.gsub) {\n\t        tables.push(gsub.make(font.tables.gsub));\n\t    }\n\t    if (metaTable) {\n\t        tables.push(metaTable);\n\t    }\n\n\t    var sfntTable = makeSfntTable(tables);\n\n\t    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n\t    var bytes = sfntTable.encode();\n\t    var checkSum = computeCheckSum(bytes);\n\t    var tableFields = sfntTable.fields;\n\t    var checkSumAdjusted = false;\n\t    for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n\t        if (tableFields[i$1].name === 'head table') {\n\t            tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n\t            checkSumAdjusted = true;\n\t            break;\n\t        }\n\t    }\n\n\t    if (!checkSumAdjusted) {\n\t        throw new Error('Could not find head table with checkSum to adjust.');\n\t    }\n\n\t    return sfntTable;\n\t}\n\n\tvar sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };\n\n\t// The Layout object is the prototype of Substitution objects, and provides\n\n\tfunction searchTag(arr, tag) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid].tag;\n\t        if (val === tag) {\n\t            return imid;\n\t        } else if (val < tag) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\n\tfunction binSearch(arr, value) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid];\n\t        if (val === value) {\n\t            return imid;\n\t        } else if (val < value) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\n\t// binary search in a list of ranges (coverage, class definition)\n\tfunction searchRange(ranges, value) {\n\t    // jshint bitwise: false\n\t    var range;\n\t    var imin = 0;\n\t    var imax = ranges.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        range = ranges[imid];\n\t        var start = range.start;\n\t        if (start === value) {\n\t            return range;\n\t        } else if (start < value) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    if (imin > 0) {\n\t        range = ranges[imin - 1];\n\t        if (value > range.end) { return 0; }\n\t        return range;\n\t    }\n\t}\n\n\t/**\n\t * @exports opentype.Layout\n\t * @class\n\t */\n\tfunction Layout(font, tableName) {\n\t    this.font = font;\n\t    this.tableName = tableName;\n\t}\n\n\tLayout.prototype = {\n\n\t    /**\n\t     * Binary search an object by \"tag\" property\n\t     * @instance\n\t     * @function searchTag\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {string} tag\n\t     * @return {number}\n\t     */\n\t    searchTag: searchTag,\n\n\t    /**\n\t     * Binary search in a list of numbers\n\t     * @instance\n\t     * @function binSearch\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {number} value\n\t     * @return {number}\n\t     */\n\t    binSearch: binSearch,\n\n\t    /**\n\t     * Get or create the Layout table (GSUB, GPOS etc).\n\t     * @param  {boolean} create - Whether to create a new one.\n\t     * @return {Object} The GSUB or GPOS table.\n\t     */\n\t    getTable: function(create) {\n\t        var layout = this.font.tables[this.tableName];\n\t        if (!layout && create) {\n\t            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n\t        }\n\t        return layout;\n\t    },\n\n\t    /**\n\t     * Returns all scripts in the substitution table.\n\t     * @instance\n\t     * @return {Array}\n\t     */\n\t    getScriptNames: function() {\n\t        var layout = this.getTable();\n\t        if (!layout) { return []; }\n\t        return layout.scripts.map(function(script) {\n\t            return script.tag;\n\t        });\n\t    },\n\n\t    /**\n\t     * Returns the best bet for a script name.\n\t     * Returns 'DFLT' if it exists.\n\t     * If not, returns 'latn' if it exists.\n\t     * If neither exist, returns undefined.\n\t     */\n\t    getDefaultScriptName: function() {\n\t        var layout = this.getTable();\n\t        if (!layout) { return; }\n\t        var hasLatn = false;\n\t        for (var i = 0; i < layout.scripts.length; i++) {\n\t            var name = layout.scripts[i].tag;\n\t            if (name === 'DFLT') { return name; }\n\t            if (name === 'latn') { hasLatn = true; }\n\t        }\n\t        if (hasLatn) { return 'latn'; }\n\t    },\n\n\t    /**\n\t     * Returns all LangSysRecords in the given script.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n\t     * @return {Object} An object with tag and script properties.\n\t     */\n\t    getScriptTable: function(script, create) {\n\t        var layout = this.getTable(create);\n\t        if (layout) {\n\t            script = script || 'DFLT';\n\t            var scripts = layout.scripts;\n\t            var pos = searchTag(layout.scripts, script);\n\t            if (pos >= 0) {\n\t                return scripts[pos].script;\n\t            } else if (create) {\n\t                var scr = {\n\t                    tag: script,\n\t                    script: {\n\t                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},\n\t                        langSysRecords: []\n\t                    }\n\t                };\n\t                scripts.splice(-1 - pos, 0, scr);\n\t                return scr.script;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Returns a language system table\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getLangSysTable: function(script, language, create) {\n\t        var scriptTable = this.getScriptTable(script, create);\n\t        if (scriptTable) {\n\t            if (!language || language === 'dflt' || language === 'DFLT') {\n\t                return scriptTable.defaultLangSys;\n\t            }\n\t            var pos = searchTag(scriptTable.langSysRecords, language);\n\t            if (pos >= 0) {\n\t                return scriptTable.langSysRecords[pos].langSys;\n\t            } else if (create) {\n\t                var langSysRecord = {\n\t                    tag: language,\n\t                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}\n\t                };\n\t                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n\t                return langSysRecord.langSys;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Get a specific feature table.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n\t     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getFeatureTable: function(script, language, feature, create) {\n\t        var langSysTable = this.getLangSysTable(script, language, create);\n\t        if (langSysTable) {\n\t            var featureRecord;\n\t            var featIndexes = langSysTable.featureIndexes;\n\t            var allFeatures = this.font.tables[this.tableName].features;\n\t            // The FeatureIndex array of indices is in arbitrary order,\n\t            // even if allFeatures is sorted alphabetically by feature tag.\n\t            for (var i = 0; i < featIndexes.length; i++) {\n\t                featureRecord = allFeatures[featIndexes[i]];\n\t                if (featureRecord.tag === feature) {\n\t                    return featureRecord.feature;\n\t                }\n\t            }\n\t            if (create) {\n\t                var index = allFeatures.length;\n\t                // Automatic ordering of features would require to shift feature indexes in the script list.\n\t                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n\t                featureRecord = {\n\t                    tag: feature,\n\t                    feature: { params: 0, lookupListIndexes: [] }\n\t                };\n\t                allFeatures.push(featureRecord);\n\t                featIndexes.push(index);\n\t                return featureRecord.feature;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Get the lookup tables of a given type for a script/language/feature.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {string} feature - 4-letter feature code\n\t     * @param {number} lookupType - 1 to 9\n\t     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n\t     * @return {Object[]}\n\t     */\n\t    getLookupTables: function(script, language, feature, lookupType, create) {\n\t        var featureTable = this.getFeatureTable(script, language, feature, create);\n\t        var tables = [];\n\t        if (featureTable) {\n\t            var lookupTable;\n\t            var lookupListIndexes = featureTable.lookupListIndexes;\n\t            var allLookups = this.font.tables[this.tableName].lookups;\n\t            // lookupListIndexes are in no particular order, so use naive search.\n\t            for (var i = 0; i < lookupListIndexes.length; i++) {\n\t                lookupTable = allLookups[lookupListIndexes[i]];\n\t                if (lookupTable.lookupType === lookupType) {\n\t                    tables.push(lookupTable);\n\t                }\n\t            }\n\t            if (tables.length === 0 && create) {\n\t                lookupTable = {\n\t                    lookupType: lookupType,\n\t                    lookupFlag: 0,\n\t                    subtables: [],\n\t                    markFilteringSet: undefined\n\t                };\n\t                var index = allLookups.length;\n\t                allLookups.push(lookupTable);\n\t                lookupListIndexes.push(index);\n\t                return [lookupTable];\n\t            }\n\t        }\n\t        return tables;\n\t    },\n\n\t    /**\n\t     * Find a glyph in a class definition table\n\t     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n\t     * @param {object} classDefTable - an OpenType Layout class definition table\n\t     * @param {number} glyphIndex - the index of the glyph to find\n\t     * @returns {number} -1 if not found\n\t     */\n\t    getGlyphClass: function(classDefTable, glyphIndex) {\n\t        switch (classDefTable.format) {\n\t            case 1:\n\t                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n\t                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n\t                }\n\t                return 0;\n\t            case 2:\n\t                var range = searchRange(classDefTable.ranges, glyphIndex);\n\t                return range ? range.classId : 0;\n\t        }\n\t    },\n\n\t    /**\n\t     * Find a glyph in a coverage table\n\t     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n\t     * @param {object} coverageTable - an OpenType Layout coverage table\n\t     * @param {number} glyphIndex - the index of the glyph to find\n\t     * @returns {number} -1 if not found\n\t     */\n\t    getCoverageIndex: function(coverageTable, glyphIndex) {\n\t        switch (coverageTable.format) {\n\t            case 1:\n\t                var index = binSearch(coverageTable.glyphs, glyphIndex);\n\t                return index >= 0 ? index : -1;\n\t            case 2:\n\t                var range = searchRange(coverageTable.ranges, glyphIndex);\n\t                return range ? range.index + glyphIndex - range.start : -1;\n\t        }\n\t    },\n\n\t    /**\n\t     * Returns the list of glyph indexes of a coverage table.\n\t     * Format 1: the list is stored raw\n\t     * Format 2: compact list as range records.\n\t     * @instance\n\t     * @param  {Object} coverageTable\n\t     * @return {Array}\n\t     */\n\t    expandCoverage: function(coverageTable) {\n\t        if (coverageTable.format === 1) {\n\t            return coverageTable.glyphs;\n\t        } else {\n\t            var glyphs = [];\n\t            var ranges = coverageTable.ranges;\n\t            for (var i = 0; i < ranges.length; i++) {\n\t                var range = ranges[i];\n\t                var start = range.start;\n\t                var end = range.end;\n\t                for (var j = start; j <= end; j++) {\n\t                    glyphs.push(j);\n\t                }\n\t            }\n\t            return glyphs;\n\t        }\n\t    }\n\n\t};\n\n\t// The Position object provides utility methods to manipulate\n\n\t/**\n\t * @exports opentype.Position\n\t * @class\n\t * @extends opentype.Layout\n\t * @param {opentype.Font}\n\t * @constructor\n\t */\n\tfunction Position(font) {\n\t    Layout.call(this, font, 'gpos');\n\t}\n\n\tPosition.prototype = Layout.prototype;\n\n\t/**\n\t * Init some data for faster and easier access later.\n\t */\n\tPosition.prototype.init = function() {\n\t    var script = this.getDefaultScriptName();\n\t    this.defaultKerningTables = this.getKerningTables(script);\n\t};\n\n\t/**\n\t * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n\t *\n\t * @param {integer} leftIndex - left glyph index\n\t * @param {integer} rightIndex - right glyph index\n\t * @returns {integer}\n\t */\n\tPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n\t    for (var i = 0; i < kerningLookups.length; i++) {\n\t        var subtables = kerningLookups[i].subtables;\n\t        for (var j = 0; j < subtables.length; j++) {\n\t            var subtable = subtables[j];\n\t            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n\t            if (covIndex < 0) { continue; }\n\t            switch (subtable.posFormat) {\n\t                case 1:\n\t                    // Search Pair Adjustment Positioning Format 1\n\t                    var pairSet = subtable.pairSets[covIndex];\n\t                    for (var k = 0; k < pairSet.length; k++) {\n\t                        var pair = pairSet[k];\n\t                        if (pair.secondGlyph === rightIndex) {\n\t                            return pair.value1 && pair.value1.xAdvance || 0;\n\t                        }\n\t                    }\n\t                    break;      // left glyph found, not right glyph - try next subtable\n\t                case 2:\n\t                    // Search Pair Adjustment Positioning Format 2\n\t                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n\t                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n\t                    var pair$1 = subtable.classRecords[class1][class2];\n\t                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n\t            }\n\t        }\n\t    }\n\t    return 0;\n\t};\n\n\t/**\n\t * List all kerning lookup tables.\n\t *\n\t * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n\t * @param {string} [language='dflt']\n\t * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n\t */\n\tPosition.prototype.getKerningTables = function(script, language) {\n\t    if (this.font.tables.gpos) {\n\t        return this.getLookupTables(script, language, 'kern', 2);\n\t    }\n\t};\n\n\t// The Substitution object provides utility methods to manipulate\n\n\t/**\n\t * @exports opentype.Substitution\n\t * @class\n\t * @extends opentype.Layout\n\t * @param {opentype.Font}\n\t * @constructor\n\t */\n\tfunction Substitution(font) {\n\t    Layout.call(this, font, 'gsub');\n\t}\n\n\t// Check if 2 arrays of primitives are equal.\n\tfunction arraysEqual(ar1, ar2) {\n\t    var n = ar1.length;\n\t    if (n !== ar2.length) { return false; }\n\t    for (var i = 0; i < n; i++) {\n\t        if (ar1[i] !== ar2[i]) { return false; }\n\t    }\n\t    return true;\n\t}\n\n\t// Find the first subtable of a lookup table in a particular format.\n\tfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        if (subtable.substFormat === format) {\n\t            return subtable;\n\t        }\n\t    }\n\t    if (defaultSubtable) {\n\t        subtables.push(defaultSubtable);\n\t        return defaultSubtable;\n\t    }\n\t    return undefined;\n\t}\n\n\tSubstitution.prototype = Layout.prototype;\n\n\t/**\n\t * Create a default GSUB table.\n\t * @return {Object} gsub - The GSUB table.\n\t */\n\tSubstitution.prototype.createDefaultTable = function() {\n\t    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n\t    return {\n\t        version: 1,\n\t        scripts: [{\n\t            tag: 'DFLT',\n\t            script: {\n\t                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n\t                langSysRecords: []\n\t            }\n\t        }],\n\t        features: [],\n\t        lookups: []\n\t    };\n\t};\n\n\t/**\n\t * List all single substitutions (lookup type 1) for a given script, language, and feature.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getSingle = function(feature, script, language) {\n\t    var substitutions = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 1);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this.expandCoverage(subtable.coverage);\n\t            var j = (void 0);\n\t            if (subtable.substFormat === 1) {\n\t                var delta = subtable.deltaGlyphId;\n\t                for (j = 0; j < glyphs.length; j++) {\n\t                    var glyph = glyphs[j];\n\t                    substitutions.push({ sub: glyph, by: glyph + delta });\n\t                }\n\t            } else {\n\t                var substitute = subtable.substitute;\n\t                for (j = 0; j < glyphs.length; j++) {\n\t                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return substitutions;\n\t};\n\n\t/**\n\t * List all multiple substitutions (lookup type 2) for a given script, language, and feature.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @param {string} feature - 4-character feature name ('ccmp', 'stch')\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getMultiple = function(feature, script, language) {\n\t    var substitutions = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 2);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this.expandCoverage(subtable.coverage);\n\t            var j = (void 0);\n\n\t            for (j = 0; j < glyphs.length; j++) {\n\t                var glyph = glyphs[j];\n\t                var replacements = subtable.sequences[j];\n\t                substitutions.push({ sub: glyph, by: replacements });\n\t            }\n\t        }\n\t    }\n\t    return substitutions;\n\t};\n\n\t/**\n\t * List all alternates (lookup type 3) for a given script, language, and feature.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n\t * @return {Array} alternates - The list of alternates\n\t */\n\tSubstitution.prototype.getAlternates = function(feature, script, language) {\n\t    var alternates = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 3);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this.expandCoverage(subtable.coverage);\n\t            var alternateSets = subtable.alternateSets;\n\t            for (var j = 0; j < glyphs.length; j++) {\n\t                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n\t            }\n\t        }\n\t    }\n\t    return alternates;\n\t};\n\n\t/**\n\t * List all ligatures (lookup type 4) for a given script, language, and feature.\n\t * The result is an array of ligature objects like { sub: [ids], by: id }\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @return {Array} ligatures - The list of ligatures.\n\t */\n\tSubstitution.prototype.getLigatures = function(feature, script, language) {\n\t    var ligatures = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 4);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this.expandCoverage(subtable.coverage);\n\t            var ligatureSets = subtable.ligatureSets;\n\t            for (var j = 0; j < glyphs.length; j++) {\n\t                var startGlyph = glyphs[j];\n\t                var ligSet = ligatureSets[j];\n\t                for (var k = 0; k < ligSet.length; k++) {\n\t                    var lig = ligSet[k];\n\t                    ligatures.push({\n\t                        sub: [startGlyph].concat(lig.components),\n\t                        by: lig.ligGlyph\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return ligatures;\n\t};\n\n\t/**\n\t * Add or modify a single substitution (lookup type 1)\n\t * Format 2, more flexible, is always used.\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, by: id } (format 1 is not supported)\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n\t    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n\t        substFormat: 2,\n\t        coverage: {format: 1, glyphs: []},\n\t        substitute: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Single: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.substitute.splice(pos, 0, 0);\n\t    }\n\t    subtable.substitute[pos] = substitution.by;\n\t};\n\n\t/**\n\t * Add or modify a multiple substitution (lookup type 2)\n\t * @param {string} feature - 4-letter feature name ('ccmp', 'stch')\n\t * @param {Object} substitution - { sub: id, by: [id] } for format 2.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addMultiple = function(feature, substitution, script, language) {\n\t    check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n\t    var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];\n\t    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 2 subtable, format 1, coverage format 1\n\t        substFormat: 1,\n\t        coverage: {format: 1, glyphs: []},\n\t        sequences: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Multiple: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.sequences.splice(pos, 0, 0);\n\t    }\n\t    subtable.sequences[pos] = substitution.by;\n\t};\n\n\t/**\n\t * Add or modify an alternate substitution (lookup type 3)\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, by: [ids] }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n\t    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n\t        substFormat: 1,\n\t        coverage: {format: 1, glyphs: []},\n\t        alternateSets: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Alternate: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.alternateSets.splice(pos, 0, 0);\n\t    }\n\t    subtable.alternateSets[pos] = substitution.by;\n\t};\n\n\t/**\n\t * Add a ligature (lookup type 4)\n\t * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} ligature - { sub: [ids], by: id }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n\t    var subtable = lookupTable.subtables[0];\n\t    if (!subtable) {\n\t        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n\t            substFormat: 1,\n\t            coverage: { format: 1, glyphs: [] },\n\t            ligatureSets: []\n\t        };\n\t        lookupTable.subtables[0] = subtable;\n\t    }\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = ligature.sub[0];\n\t    var ligComponents = ligature.sub.slice(1);\n\t    var ligatureTable = {\n\t        ligGlyph: ligature.by,\n\t        components: ligComponents\n\t    };\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos >= 0) {\n\t        // ligatureSet already exists\n\t        var ligatureSet = subtable.ligatureSets[pos];\n\t        for (var i = 0; i < ligatureSet.length; i++) {\n\t            // If ligature already exists, return.\n\t            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n\t                return;\n\t            }\n\t        }\n\t        // ligature does not exist: add it.\n\t        ligatureSet.push(ligatureTable);\n\t    } else {\n\t        // Create a new ligatureSet and add coverage for the first glyph.\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n\t    }\n\t};\n\n\t/**\n\t * List all feature data for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getFeature = function(feature, script, language) {\n\t    if (/ss\\d\\d/.test(feature)) {\n\t        // ss01 - ss20\n\t        return this.getSingle(feature, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            return this.getSingle(feature, script, language)\n\t                    .concat(this.getAlternates(feature, script, language));\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig':\n\t            return this.getLigatures(feature, script, language);\n\t        case 'ccmp':\n\t            return this.getMultiple(feature, script, language)\n\t                .concat(this.getLigatures(feature, script, language));\n\t        case 'stch':\n\t            return this.getMultiple(feature, script, language);\n\t    }\n\t    return undefined;\n\t};\n\n\t/**\n\t * Add a substitution to a feature for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.add = function(feature, sub, script, language) {\n\t    if (/ss\\d\\d/.test(feature)) {\n\t        // ss01 - ss20\n\t        return this.addSingle(feature, sub, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            if (typeof sub.by === 'number') {\n\t                return this.addSingle(feature, sub, script, language);\n\t            }\n\t            return this.addAlternate(feature, sub, script, language);\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig':\n\t            return this.addLigature(feature, sub, script, language);\n\t        case 'ccmp':\n\t            if (sub.by instanceof Array) {\n\t                return this.addMultiple(feature, sub, script, language);\n\t            }\n\t            return this.addLigature(feature, sub, script, language);\n\t    }\n\t    return undefined;\n\t};\n\n\tfunction isBrowser() {\n\t    return typeof window !== 'undefined';\n\t}\n\n\tfunction nodeBufferToArrayBuffer(buffer) {\n\t    var ab = new ArrayBuffer(buffer.length);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        view[i] = buffer[i];\n\t    }\n\n\t    return ab;\n\t}\n\n\tfunction arrayBufferToNodeBuffer(ab) {\n\t    var buffer = new Buffer(ab.byteLength);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        buffer[i] = view[i];\n\t    }\n\n\t    return buffer;\n\t}\n\n\tfunction checkArgument(expression, message) {\n\t    if (!expression) {\n\t        throw message;\n\t    }\n\t}\n\n\t// The `glyf` table describes the glyphs in TrueType outline format.\n\n\t// Parse the coordinate data for a glyph.\n\tfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n\t    var v;\n\t    if ((flag & shortVectorBitMask) > 0) {\n\t        // The coordinate is 1 byte long.\n\t        v = p.parseByte();\n\t        // The `same` bit is re-used for short values to signify the sign of the value.\n\t        if ((flag & sameBitMask) === 0) {\n\t            v = -v;\n\t        }\n\n\t        v = previousValue + v;\n\t    } else {\n\t        //  The coordinate is 2 bytes long.\n\t        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n\t        if ((flag & sameBitMask) > 0) {\n\t            v = previousValue;\n\t        } else {\n\t            // Parse the coordinate as a signed 16-bit delta value.\n\t            v = previousValue + p.parseShort();\n\t        }\n\t    }\n\n\t    return v;\n\t}\n\n\t// Parse a TrueType glyph.\n\tfunction parseGlyph(glyph, data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    glyph.numberOfContours = p.parseShort();\n\t    glyph._xMin = p.parseShort();\n\t    glyph._yMin = p.parseShort();\n\t    glyph._xMax = p.parseShort();\n\t    glyph._yMax = p.parseShort();\n\t    var flags;\n\t    var flag;\n\n\t    if (glyph.numberOfContours > 0) {\n\t        // This glyph is not a composite.\n\t        var endPointIndices = glyph.endPointIndices = [];\n\t        for (var i = 0; i < glyph.numberOfContours; i += 1) {\n\t            endPointIndices.push(p.parseUShort());\n\t        }\n\n\t        glyph.instructionLength = p.parseUShort();\n\t        glyph.instructions = [];\n\t        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n\t            glyph.instructions.push(p.parseByte());\n\t        }\n\n\t        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n\t        flags = [];\n\t        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n\t            flag = p.parseByte();\n\t            flags.push(flag);\n\t            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n\t            if ((flag & 8) > 0) {\n\t                var repeatCount = p.parseByte();\n\t                for (var j = 0; j < repeatCount; j += 1) {\n\t                    flags.push(flag);\n\t                    i$2 += 1;\n\t                }\n\t            }\n\t        }\n\n\t        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n\t        if (endPointIndices.length > 0) {\n\t            var points = [];\n\t            var point;\n\t            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n\t            if (numberOfCoordinates > 0) {\n\t                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n\t                    flag = flags[i$3];\n\t                    point = {};\n\t                    point.onCurve = !!(flag & 1);\n\t                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n\t                    points.push(point);\n\t                }\n\n\t                var px = 0;\n\t                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n\t                    flag = flags[i$4];\n\t                    point = points[i$4];\n\t                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n\t                    px = point.x;\n\t                }\n\n\t                var py = 0;\n\t                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n\t                    flag = flags[i$5];\n\t                    point = points[i$5];\n\t                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n\t                    py = point.y;\n\t                }\n\t            }\n\n\t            glyph.points = points;\n\t        } else {\n\t            glyph.points = [];\n\t        }\n\t    } else if (glyph.numberOfContours === 0) {\n\t        glyph.points = [];\n\t    } else {\n\t        glyph.isComposite = true;\n\t        glyph.points = [];\n\t        glyph.components = [];\n\t        var moreComponents = true;\n\t        while (moreComponents) {\n\t            flags = p.parseUShort();\n\t            var component = {\n\t                glyphIndex: p.parseUShort(),\n\t                xScale: 1,\n\t                scale01: 0,\n\t                scale10: 0,\n\t                yScale: 1,\n\t                dx: 0,\n\t                dy: 0\n\t            };\n\t            if ((flags & 1) > 0) {\n\t                // The arguments are words\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseShort();\n\t                    component.dy = p.parseShort();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n\t                }\n\n\t            } else {\n\t                // The arguments are bytes\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseChar();\n\t                    component.dy = p.parseChar();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n\t                }\n\t            }\n\n\t            if ((flags & 8) > 0) {\n\t                // We have a scale\n\t                component.xScale = component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 64) > 0) {\n\t                // We have an X / Y scale\n\t                component.xScale = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 128) > 0) {\n\t                // We have a 2x2 transformation\n\t                component.xScale = p.parseF2Dot14();\n\t                component.scale01 = p.parseF2Dot14();\n\t                component.scale10 = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            }\n\n\t            glyph.components.push(component);\n\t            moreComponents = !!(flags & 32);\n\t        }\n\t        if (flags & 0x100) {\n\t            // We have instructions\n\t            glyph.instructionLength = p.parseUShort();\n\t            glyph.instructions = [];\n\t            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n\t                glyph.instructions.push(p.parseByte());\n\t            }\n\t        }\n\t    }\n\t}\n\n\t// Transform an array of points and return a new array.\n\tfunction transformPoints(points, transform) {\n\t    var newPoints = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        var newPt = {\n\t            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n\t            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n\t            onCurve: pt.onCurve,\n\t            lastPointOfContour: pt.lastPointOfContour\n\t        };\n\t        newPoints.push(newPt);\n\t    }\n\n\t    return newPoints;\n\t}\n\n\tfunction getContours(points) {\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t}\n\n\t// Convert the TrueType glyph outline to a Path.\n\tfunction getPath(points) {\n\t    var p = new Path();\n\t    if (!points) {\n\t        return p;\n\t    }\n\n\t    var contours = getContours(points);\n\n\t    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n\t        var contour = contours[contourIndex];\n\n\t        var prev = null;\n\t        var curr = contour[contour.length - 1];\n\t        var next = contour[0];\n\n\t        if (curr.onCurve) {\n\t            p.moveTo(curr.x, curr.y);\n\t        } else {\n\t            if (next.onCurve) {\n\t                p.moveTo(next.x, next.y);\n\t            } else {\n\t                // If both first and last points are off-curve, start at their middle.\n\t                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n\t                p.moveTo(start.x, start.y);\n\t            }\n\t        }\n\n\t        for (var i = 0; i < contour.length; ++i) {\n\t            prev = curr;\n\t            curr = next;\n\t            next = contour[(i + 1) % contour.length];\n\n\t            if (curr.onCurve) {\n\t                // This is a straight line.\n\t                p.lineTo(curr.x, curr.y);\n\t            } else {\n\t                var prev2 = prev;\n\t                var next2 = next;\n\n\t                if (!prev.onCurve) {\n\t                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n\t                }\n\n\t                if (!next.onCurve) {\n\t                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n\t                }\n\n\t                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n\t            }\n\t        }\n\n\t        p.closePath();\n\t    }\n\t    return p;\n\t}\n\n\tfunction buildPath(glyphs, glyph) {\n\t    if (glyph.isComposite) {\n\t        for (var j = 0; j < glyph.components.length; j += 1) {\n\t            var component = glyph.components[j];\n\t            var componentGlyph = glyphs.get(component.glyphIndex);\n\t            // Force the ttfGlyphLoader to parse the glyph.\n\t            componentGlyph.getPath();\n\t            if (componentGlyph.points) {\n\t                var transformedPoints = (void 0);\n\t                if (component.matchedPoints === undefined) {\n\t                    // component positioned by offset\n\t                    transformedPoints = transformPoints(componentGlyph.points, component);\n\t                } else {\n\t                    // component positioned by matched points\n\t                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n\t                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n\t                        throw Error('Matched points out of range in ' + glyph.name);\n\t                    }\n\t                    var firstPt = glyph.points[component.matchedPoints[0]];\n\t                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n\t                    var transform = {\n\t                        xScale: component.xScale, scale01: component.scale01,\n\t                        scale10: component.scale10, yScale: component.yScale,\n\t                        dx: 0, dy: 0\n\t                    };\n\t                    secondPt = transformPoints([secondPt], transform)[0];\n\t                    transform.dx = firstPt.x - secondPt.x;\n\t                    transform.dy = firstPt.y - secondPt.y;\n\t                    transformedPoints = transformPoints(componentGlyph.points, transform);\n\t                }\n\t                glyph.points = glyph.points.concat(transformedPoints);\n\t            }\n\t        }\n\t    }\n\n\t    return getPath(glyph.points);\n\t}\n\n\tfunction parseGlyfTableAll(data, start, loca, font) {\n\t    var glyphs = new glyphset.GlyphSet(font);\n\n\t    // The last element of the loca table is invalid.\n\t    for (var i = 0; i < loca.length - 1; i += 1) {\n\t        var offset = loca[i];\n\t        var nextOffset = loca[i + 1];\n\t        if (offset !== nextOffset) {\n\t            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n\t        } else {\n\t            glyphs.push(i, glyphset.glyphLoader(font, i));\n\t        }\n\t    }\n\n\t    return glyphs;\n\t}\n\n\tfunction parseGlyfTableOnLowMemory(data, start, loca, font) {\n\t    var glyphs = new glyphset.GlyphSet(font);\n\n\t    font._push = function(i) {\n\t        var offset = loca[i];\n\t        var nextOffset = loca[i + 1];\n\t        if (offset !== nextOffset) {\n\t            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n\t        } else {\n\t            glyphs.push(i, glyphset.glyphLoader(font, i));\n\t        }\n\t    };\n\n\t    return glyphs;\n\t}\n\n\t// Parse all the glyphs according to the offsets from the `loca` table.\n\tfunction parseGlyfTable(data, start, loca, font, opt) {\n\t    if (opt.lowMemory)\n\t        { return parseGlyfTableOnLowMemory(data, start, loca, font); }\n\t    else\n\t        { return parseGlyfTableAll(data, start, loca, font); }\n\t}\n\n\tvar glyf = { getPath: getPath, parse: parseGlyfTable};\n\n\t/* A TrueType font hinting interpreter.\n\t*\n\t* (c) 2017 Axel Kittenberger\n\t*\n\t* This interpreter has been implemented according to this documentation:\n\t* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n\t*\n\t* According to the documentation F24DOT6 values are used for pixels.\n\t* That means calculation is 1/64 pixel accurate and uses integer operations.\n\t* However, Javascript has floating point operations by default and only\n\t* those are available. One could make a case to simulate the 1/64 accuracy\n\t* exactly by truncating after every division operation\n\t* (for example with << 0) to get pixel exactly results as other TrueType\n\t* implementations. It may make sense since some fonts are pixel optimized\n\t* by hand using DELTAP instructions. The current implementation doesn't\n\t* and rather uses full floating point precision.\n\t*\n\t* xScale, yScale and rotation is currently ignored.\n\t*\n\t* A few non-trivial instructions are missing as I didn't encounter yet\n\t* a font that used them to test a possible implementation.\n\t*\n\t* Some fonts seem to use undocumented features regarding the twilight zone.\n\t* Only some of them are implemented as they were encountered.\n\t*\n\t* The exports.DEBUG statements are removed on the minified distribution file.\n\t*/\n\n\tvar instructionTable;\n\tvar exec;\n\tvar execGlyph;\n\tvar execComponent;\n\n\t/*\n\t* Creates a hinting object.\n\t*\n\t* There ought to be exactly one\n\t* for each truetype font that is used for hinting.\n\t*/\n\tfunction Hinting(font) {\n\t    // the font this hinting object is for\n\t    this.font = font;\n\n\t    this.getCommands = function (hPoints) {\n\t        return glyf.getPath(hPoints).commands;\n\t    };\n\n\t    // cached states\n\t    this._fpgmState  =\n\t    this._prepState  =\n\t        undefined;\n\n\t    // errorState\n\t    // 0 ... all okay\n\t    // 1 ... had an error in a glyf,\n\t    //       continue working but stop spamming\n\t    //       the console\n\t    // 2 ... error at prep, stop hinting at this ppem\n\t    // 3 ... error at fpeg, stop hinting for this font at all\n\t    this._errorState = 0;\n\t}\n\n\t/*\n\t* Not rounding.\n\t*/\n\tfunction roundOff(v) {\n\t    return v;\n\t}\n\n\t/*\n\t* Rounding to grid.\n\t*/\n\tfunction roundToGrid(v) {\n\t    //Rounding in TT is supposed to \"symmetrical around zero\"\n\t    return Math.sign(v) * Math.round(Math.abs(v));\n\t}\n\n\t/*\n\t* Rounding to double grid.\n\t*/\n\tfunction roundToDoubleGrid(v) {\n\t    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n\t}\n\n\t/*\n\t* Rounding to half grid.\n\t*/\n\tfunction roundToHalfGrid(v) {\n\t    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n\t}\n\n\t/*\n\t* Rounding to up to grid.\n\t*/\n\tfunction roundUpToGrid(v) {\n\t    return Math.sign(v) * Math.ceil(Math.abs(v));\n\t}\n\n\t/*\n\t* Rounding to down to grid.\n\t*/\n\tfunction roundDownToGrid(v) {\n\t    return Math.sign(v) * Math.floor(Math.abs(v));\n\t}\n\n\t/*\n\t* Super rounding.\n\t*/\n\tvar roundSuper = function (v) {\n\t    var period = this.srPeriod;\n\t    var phase = this.srPhase;\n\t    var threshold = this.srThreshold;\n\t    var sign = 1;\n\n\t    if (v < 0) {\n\t        v = -v;\n\t        sign = -1;\n\t    }\n\n\t    v += threshold - phase;\n\n\t    v = Math.trunc(v / period) * period;\n\n\t    v += phase;\n\n\t    // according to http://xgridfit.sourceforge.net/round.html\n\t    if (v < 0) { return phase * sign; }\n\n\t    return v * sign;\n\t};\n\n\t/*\n\t* Unit vector of x-axis.\n\t*/\n\tvar xUnitVector = {\n\t    x: 1,\n\n\t    y: 0,\n\n\t    axis: 'x',\n\n\t    // Gets the projected distance between two points.\n\t    // o1/o2 ... if true, respective original position is used.\n\t    distance: function (p1, p2, o1, o2) {\n\t        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n\t    },\n\n\t    // Moves point p so the moved position has the same relative\n\t    // position to the moved positions of rp1 and rp2 than the\n\t    // original positions had.\n\t    //\n\t    // See APPENDIX on INTERPOLATE at the bottom of this file.\n\t    interpolate: function (p, rp1, rp2, pv) {\n\t        var do1;\n\t        var do2;\n\t        var doa1;\n\t        var doa2;\n\t        var dm1;\n\t        var dm2;\n\t        var dt;\n\n\t        if (!pv || pv === this) {\n\t            do1 = p.xo - rp1.xo;\n\t            do2 = p.xo - rp2.xo;\n\t            dm1 = rp1.x - rp1.xo;\n\t            dm2 = rp2.x - rp2.xo;\n\t            doa1 = Math.abs(do1);\n\t            doa2 = Math.abs(do2);\n\t            dt = doa1 + doa2;\n\n\t            if (dt === 0) {\n\t                p.x = p.xo + (dm1 + dm2) / 2;\n\t                return;\n\t            }\n\n\t            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n\t            return;\n\t        }\n\n\t        do1 = pv.distance(p, rp1, true, true);\n\t        do2 = pv.distance(p, rp2, true, true);\n\t        dm1 = pv.distance(rp1, rp1, false, true);\n\t        dm2 = pv.distance(rp2, rp2, false, true);\n\t        doa1 = Math.abs(do1);\n\t        doa2 = Math.abs(do2);\n\t        dt = doa1 + doa2;\n\n\t        if (dt === 0) {\n\t            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t            return;\n\t        }\n\n\t        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t    },\n\n\t    // Slope of line normal to this\n\t    normalSlope: Number.NEGATIVE_INFINITY,\n\n\t    // Sets the point 'p' relative to point 'rp'\n\t    // by the distance 'd'.\n\t    //\n\t    // See APPENDIX on SETRELATIVE at the bottom of this file.\n\t    //\n\t    // p   ... point to set\n\t    // rp  ... reference point\n\t    // d   ... distance on projection vector\n\t    // pv  ... projection vector (undefined = this)\n\t    // org ... if true, uses the original position of rp as reference.\n\t    setRelative: function (p, rp, d, pv, org) {\n\t        if (!pv || pv === this) {\n\t            p.x = (org ? rp.xo : rp.x) + d;\n\t            return;\n\t        }\n\n\t        var rpx = org ? rp.xo : rp.x;\n\t        var rpy = org ? rp.yo : rp.y;\n\t        var rpdx = rpx + d * pv.x;\n\t        var rpdy = rpy + d * pv.y;\n\n\t        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n\t    },\n\n\t    // Slope of vector line.\n\t    slope: 0,\n\n\t    // Touches the point p.\n\t    touch: function (p) {\n\t        p.xTouched = true;\n\t    },\n\n\t    // Tests if a point p is touched.\n\t    touched: function (p) {\n\t        return p.xTouched;\n\t    },\n\n\t    // Untouches the point p.\n\t    untouch: function (p) {\n\t        p.xTouched = false;\n\t    }\n\t};\n\n\t/*\n\t* Unit vector of y-axis.\n\t*/\n\tvar yUnitVector = {\n\t    x: 0,\n\n\t    y: 1,\n\n\t    axis: 'y',\n\n\t    // Gets the projected distance between two points.\n\t    // o1/o2 ... if true, respective original position is used.\n\t    distance: function (p1, p2, o1, o2) {\n\t        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n\t    },\n\n\t    // Moves point p so the moved position has the same relative\n\t    // position to the moved positions of rp1 and rp2 than the\n\t    // original positions had.\n\t    //\n\t    // See APPENDIX on INTERPOLATE at the bottom of this file.\n\t    interpolate: function (p, rp1, rp2, pv) {\n\t        var do1;\n\t        var do2;\n\t        var doa1;\n\t        var doa2;\n\t        var dm1;\n\t        var dm2;\n\t        var dt;\n\n\t        if (!pv || pv === this) {\n\t            do1 = p.yo - rp1.yo;\n\t            do2 = p.yo - rp2.yo;\n\t            dm1 = rp1.y - rp1.yo;\n\t            dm2 = rp2.y - rp2.yo;\n\t            doa1 = Math.abs(do1);\n\t            doa2 = Math.abs(do2);\n\t            dt = doa1 + doa2;\n\n\t            if (dt === 0) {\n\t                p.y = p.yo + (dm1 + dm2) / 2;\n\t                return;\n\t            }\n\n\t            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n\t            return;\n\t        }\n\n\t        do1 = pv.distance(p, rp1, true, true);\n\t        do2 = pv.distance(p, rp2, true, true);\n\t        dm1 = pv.distance(rp1, rp1, false, true);\n\t        dm2 = pv.distance(rp2, rp2, false, true);\n\t        doa1 = Math.abs(do1);\n\t        doa2 = Math.abs(do2);\n\t        dt = doa1 + doa2;\n\n\t        if (dt === 0) {\n\t            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t            return;\n\t        }\n\n\t        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t    },\n\n\t    // Slope of line normal to this.\n\t    normalSlope: 0,\n\n\t    // Sets the point 'p' relative to point 'rp'\n\t    // by the distance 'd'\n\t    //\n\t    // See APPENDIX on SETRELATIVE at the bottom of this file.\n\t    //\n\t    // p   ... point to set\n\t    // rp  ... reference point\n\t    // d   ... distance on projection vector\n\t    // pv  ... projection vector (undefined = this)\n\t    // org ... if true, uses the original position of rp as reference.\n\t    setRelative: function (p, rp, d, pv, org) {\n\t        if (!pv || pv === this) {\n\t            p.y = (org ? rp.yo : rp.y) + d;\n\t            return;\n\t        }\n\n\t        var rpx = org ? rp.xo : rp.x;\n\t        var rpy = org ? rp.yo : rp.y;\n\t        var rpdx = rpx + d * pv.x;\n\t        var rpdy = rpy + d * pv.y;\n\n\t        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n\t    },\n\n\t    // Slope of vector line.\n\t    slope: Number.POSITIVE_INFINITY,\n\n\t    // Touches the point p.\n\t    touch: function (p) {\n\t        p.yTouched = true;\n\t    },\n\n\t    // Tests if a point p is touched.\n\t    touched: function (p) {\n\t        return p.yTouched;\n\t    },\n\n\t    // Untouches the point p.\n\t    untouch: function (p) {\n\t        p.yTouched = false;\n\t    }\n\t};\n\n\tObject.freeze(xUnitVector);\n\tObject.freeze(yUnitVector);\n\n\t/*\n\t* Creates a unit vector that is not x- or y-axis.\n\t*/\n\tfunction UnitVector(x, y) {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.axis = undefined;\n\t    this.slope = y / x;\n\t    this.normalSlope = -x / y;\n\t    Object.freeze(this);\n\t}\n\n\t/*\n\t* Gets the projected distance between two points.\n\t* o1/o2 ... if true, respective original position is used.\n\t*/\n\tUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n\t    return (\n\t        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n\t        this.y * yUnitVector.distance(p1, p2, o1, o2)\n\t    );\n\t};\n\n\t/*\n\t* Moves point p so the moved position has the same relative\n\t* position to the moved positions of rp1 and rp2 than the\n\t* original positions had.\n\t*\n\t* See APPENDIX on INTERPOLATE at the bottom of this file.\n\t*/\n\tUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n\t    var dm1;\n\t    var dm2;\n\t    var do1;\n\t    var do2;\n\t    var doa1;\n\t    var doa2;\n\t    var dt;\n\n\t    do1 = pv.distance(p, rp1, true, true);\n\t    do2 = pv.distance(p, rp2, true, true);\n\t    dm1 = pv.distance(rp1, rp1, false, true);\n\t    dm2 = pv.distance(rp2, rp2, false, true);\n\t    doa1 = Math.abs(do1);\n\t    doa2 = Math.abs(do2);\n\t    dt = doa1 + doa2;\n\n\t    if (dt === 0) {\n\t        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t        return;\n\t    }\n\n\t    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t};\n\n\t/*\n\t* Sets the point 'p' relative to point 'rp'\n\t* by the distance 'd'\n\t*\n\t* See APPENDIX on SETRELATIVE at the bottom of this file.\n\t*\n\t* p   ...  point to set\n\t* rp  ... reference point\n\t* d   ... distance on projection vector\n\t* pv  ... projection vector (undefined = this)\n\t* org ... if true, uses the original position of rp as reference.\n\t*/\n\tUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n\t    pv = pv || this;\n\n\t    var rpx = org ? rp.xo : rp.x;\n\t    var rpy = org ? rp.yo : rp.y;\n\t    var rpdx = rpx + d * pv.x;\n\t    var rpdy = rpy + d * pv.y;\n\n\t    var pvns = pv.normalSlope;\n\t    var fvs = this.slope;\n\n\t    var px = p.x;\n\t    var py = p.y;\n\n\t    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n\t    p.y = fvs * (p.x - px) + py;\n\t};\n\n\t/*\n\t* Touches the point p.\n\t*/\n\tUnitVector.prototype.touch = function(p) {\n\t    p.xTouched = true;\n\t    p.yTouched = true;\n\t};\n\n\t/*\n\t* Returns a unit vector with x/y coordinates.\n\t*/\n\tfunction getUnitVector(x, y) {\n\t    var d = Math.sqrt(x * x + y * y);\n\n\t    x /= d;\n\t    y /= d;\n\n\t    if (x === 1 && y === 0) { return xUnitVector; }\n\t    else if (x === 0 && y === 1) { return yUnitVector; }\n\t    else { return new UnitVector(x, y); }\n\t}\n\n\t/*\n\t* Creates a point in the hinting engine.\n\t*/\n\tfunction HPoint(\n\t    x,\n\t    y,\n\t    lastPointOfContour,\n\t    onCurve\n\t) {\n\t    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n\t    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n\t    this.lastPointOfContour = lastPointOfContour;\n\t    this.onCurve = onCurve;\n\t    this.prevPointOnContour = undefined;\n\t    this.nextPointOnContour = undefined;\n\t    this.xTouched = false;\n\t    this.yTouched = false;\n\n\t    Object.preventExtensions(this);\n\t}\n\n\t/*\n\t* Returns the next touched point on the contour.\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n\tHPoint.prototype.nextTouched = function(v) {\n\t    var p = this.nextPointOnContour;\n\n\t    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }\n\n\t    return p;\n\t};\n\n\t/*\n\t* Returns the previous touched point on the contour\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n\tHPoint.prototype.prevTouched = function(v) {\n\t    var p = this.prevPointOnContour;\n\n\t    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }\n\n\t    return p;\n\t};\n\n\t/*\n\t* The zero point.\n\t*/\n\tvar HPZero = Object.freeze(new HPoint(0, 0));\n\n\t/*\n\t* The default state of the interpreter.\n\t*\n\t* Note: Freezing the defaultState and then deriving from it\n\t* makes the V8 Javascript engine going awkward,\n\t* so this is avoided, albeit the defaultState shouldn't\n\t* ever change.\n\t*/\n\tvar defaultState = {\n\t    cvCutIn: 17 / 16,    // control value cut in\n\t    deltaBase: 9,\n\t    deltaShift: 0.125,\n\t    loop: 1,             // loops some instructions\n\t    minDis: 1,           // minimum distance\n\t    autoFlip: true\n\t};\n\n\t/*\n\t* The current state of the interpreter.\n\t*\n\t* env  ... 'fpgm' or 'prep' or 'glyf'\n\t* prog ... the program\n\t*/\n\tfunction State(env, prog) {\n\t    this.env = env;\n\t    this.stack = [];\n\t    this.prog = prog;\n\n\t    switch (env) {\n\t        case 'glyf' :\n\t            this.zp0 = this.zp1 = this.zp2 = 1;\n\t            this.rp0 = this.rp1 = this.rp2 = 0;\n\t            /* fall through */\n\t        case 'prep' :\n\t            this.fv = this.pv = this.dpv = xUnitVector;\n\t            this.round = roundToGrid;\n\t    }\n\t}\n\n\t/*\n\t* Executes a glyph program.\n\t*\n\t* This does the hinting for each glyph.\n\t*\n\t* Returns an array of moved points.\n\t*\n\t* glyph: the glyph to hint\n\t* ppem: the size the glyph is rendered for\n\t*/\n\tHinting.prototype.exec = function(glyph, ppem) {\n\t    if (typeof ppem !== 'number') {\n\t        throw new Error('Point size is not a number!');\n\t    }\n\n\t    // Received a fatal error, don't do any hinting anymore.\n\t    if (this._errorState > 2) { return; }\n\n\t    var font = this.font;\n\t    var prepState = this._prepState;\n\n\t    if (!prepState || prepState.ppem !== ppem) {\n\t        var fpgmState = this._fpgmState;\n\n\t        if (!fpgmState) {\n\t            // Executes the fpgm state.\n\t            // This is used by fonts to define functions.\n\t            State.prototype = defaultState;\n\n\t            fpgmState =\n\t            this._fpgmState =\n\t                new State('fpgm', font.tables.fpgm);\n\n\t            fpgmState.funcs = [ ];\n\t            fpgmState.font = font;\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC FPGM---');\n\t                fpgmState.step = -1;\n\t            }\n\n\t            try {\n\t                exec(fpgmState);\n\t            } catch (e) {\n\t                console.log('Hinting error in FPGM:' + e);\n\t                this._errorState = 3;\n\t                return;\n\t            }\n\t        }\n\n\t        // Executes the prep program for this ppem setting.\n\t        // This is used by fonts to set cvt values\n\t        // depending on to be rendered font size.\n\n\t        State.prototype = fpgmState;\n\t        prepState =\n\t        this._prepState =\n\t            new State('prep', font.tables.prep);\n\n\t        prepState.ppem = ppem;\n\n\t        // Creates a copy of the cvt table\n\t        // and scales it to the current ppem setting.\n\t        var oCvt = font.tables.cvt;\n\t        if (oCvt) {\n\t            var cvt = prepState.cvt = new Array(oCvt.length);\n\t            var scale = ppem / font.unitsPerEm;\n\t            for (var c = 0; c < oCvt.length; c++) {\n\t                cvt[c] = oCvt[c] * scale;\n\t            }\n\t        } else {\n\t            prepState.cvt = [];\n\t        }\n\n\t        if (exports.DEBUG) {\n\t            console.log('---EXEC PREP---');\n\t            prepState.step = -1;\n\t        }\n\n\t        try {\n\t            exec(prepState);\n\t        } catch (e) {\n\t            if (this._errorState < 2) {\n\t                console.log('Hinting error in PREP:' + e);\n\t            }\n\t            this._errorState = 2;\n\t        }\n\t    }\n\n\t    if (this._errorState > 1) { return; }\n\n\t    try {\n\t        return execGlyph(glyph, prepState);\n\t    } catch (e) {\n\t        if (this._errorState < 1) {\n\t            console.log('Hinting error:' + e);\n\t            console.log('Note: further hinting errors are silenced');\n\t        }\n\t        this._errorState = 1;\n\t        return undefined;\n\t    }\n\t};\n\n\t/*\n\t* Executes the hinting program for a glyph.\n\t*/\n\texecGlyph = function(glyph, prepState) {\n\t    // original point positions\n\t    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n\t    var yScale = xScale;\n\t    var components = glyph.components;\n\t    var contours;\n\t    var gZone;\n\t    var state;\n\n\t    State.prototype = prepState;\n\t    if (!components) {\n\t        state = new State('glyf', glyph.instructions);\n\t        if (exports.DEBUG) {\n\t            console.log('---EXEC GLYPH---');\n\t            state.step = -1;\n\t        }\n\t        execComponent(glyph, state, xScale, yScale);\n\t        gZone = state.gZone;\n\t    } else {\n\t        var font = prepState.font;\n\t        gZone = [];\n\t        contours = [];\n\t        for (var i = 0; i < components.length; i++) {\n\t            var c = components[i];\n\t            var cg = font.glyphs.get(c.glyphIndex);\n\n\t            state = new State('glyf', cg.instructions);\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC COMP ' + i + '---');\n\t                state.step = -1;\n\t            }\n\n\t            execComponent(cg, state, xScale, yScale);\n\t            // appends the computed points to the result array\n\t            // post processes the component points\n\t            var dx = Math.round(c.dx * xScale);\n\t            var dy = Math.round(c.dy * yScale);\n\t            var gz = state.gZone;\n\t            var cc = state.contours;\n\t            for (var pi = 0; pi < gz.length; pi++) {\n\t                var p = gz[pi];\n\t                p.xTouched = p.yTouched = false;\n\t                p.xo = p.x = p.x + dx;\n\t                p.yo = p.y = p.y + dy;\n\t            }\n\n\t            var gLen = gZone.length;\n\t            gZone.push.apply(gZone, gz);\n\t            for (var j = 0; j < cc.length; j++) {\n\t                contours.push(cc[j] + gLen);\n\t            }\n\t        }\n\n\t        if (glyph.instructions && !state.inhibitGridFit) {\n\t            // the composite has instructions on its own\n\t            state = new State('glyf', glyph.instructions);\n\n\t            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n\t            state.contours = contours;\n\n\t            // note: HPZero cannot be used here, since\n\t            //       the point might be modified\n\t            gZone.push(\n\t                new HPoint(0, 0),\n\t                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n\t            );\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC COMPOSITE---');\n\t                state.step = -1;\n\t            }\n\n\t            exec(state);\n\n\t            gZone.length -= 2;\n\t        }\n\t    }\n\n\t    return gZone;\n\t};\n\n\t/*\n\t* Executes the hinting program for a component of a multi-component glyph\n\t* or of the glyph itself for a non-component glyph.\n\t*/\n\texecComponent = function(glyph, state, xScale, yScale)\n\t{\n\t    var points = glyph.points || [];\n\t    var pLen = points.length;\n\t    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n\t    var contours = state.contours = [];\n\n\t    // Scales the original points and\n\t    // makes copies for the hinted points.\n\t    var cp; // current point\n\t    for (var i = 0; i < pLen; i++) {\n\t        cp = points[i];\n\n\t        gZone[i] = new HPoint(\n\t            cp.x * xScale,\n\t            cp.y * yScale,\n\t            cp.lastPointOfContour,\n\t            cp.onCurve\n\t        );\n\t    }\n\n\t    // Chain links the contours.\n\t    var sp; // start point\n\t    var np; // next point\n\n\t    for (var i$1 = 0; i$1 < pLen; i$1++) {\n\t        cp = gZone[i$1];\n\n\t        if (!sp) {\n\t            sp = cp;\n\t            contours.push(i$1);\n\t        }\n\n\t        if (cp.lastPointOfContour) {\n\t            cp.nextPointOnContour = sp;\n\t            sp.prevPointOnContour = cp;\n\t            sp = undefined;\n\t        } else {\n\t            np = gZone[i$1 + 1];\n\t            cp.nextPointOnContour = np;\n\t            np.prevPointOnContour = cp;\n\t        }\n\t    }\n\n\t    if (state.inhibitGridFit) { return; }\n\n\t    if (exports.DEBUG) {\n\t        console.log('PROCESSING GLYPH', state.stack);\n\t        for (var i$2 = 0; i$2 < pLen; i$2++) {\n\t            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n\t        }\n\t    }\n\n\t    gZone.push(\n\t        new HPoint(0, 0),\n\t        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n\t    );\n\n\t    exec(state);\n\n\t    // Removes the extra points.\n\t    gZone.length -= 2;\n\n\t    if (exports.DEBUG) {\n\t        console.log('FINISHED GLYPH', state.stack);\n\t        for (var i$3 = 0; i$3 < pLen; i$3++) {\n\t            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n\t        }\n\t    }\n\t};\n\n\t/*\n\t* Executes the program loaded in state.\n\t*/\n\texec = function(state) {\n\t    var prog = state.prog;\n\n\t    if (!prog) { return; }\n\n\t    var pLen = prog.length;\n\t    var ins;\n\n\t    for (state.ip = 0; state.ip < pLen; state.ip++) {\n\t        if (exports.DEBUG) { state.step++; }\n\t        ins = instructionTable[prog[state.ip]];\n\n\t        if (!ins) {\n\t            throw new Error(\n\t                'unknown instruction: 0x' +\n\t                Number(prog[state.ip]).toString(16)\n\t            );\n\t        }\n\n\t        ins(state);\n\n\t        // very extensive debugging for each step\n\t        /*\n\t        if (exports.DEBUG) {\n\t            var da;\n\t            if (state.gZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.gZone.length; i++)\n\t                {\n\t                    da.push(i + ' ' +\n\t                        state.gZone[i].x * 64 + ' ' +\n\t                        state.gZone[i].y * 64 + ' ' +\n\t                        (state.gZone[i].xTouched ? 'x' : '') +\n\t                        (state.gZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('GZ', da);\n\t            }\n\n\t            if (state.tZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.tZone.length; i++) {\n\t                    da.push(i + ' ' +\n\t                        state.tZone[i].x * 64 + ' ' +\n\t                        state.tZone[i].y * 64 + ' ' +\n\t                        (state.tZone[i].xTouched ? 'x' : '') +\n\t                        (state.tZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('TZ', da);\n\t            }\n\n\t            if (state.stack.length > 10) {\n\t                console.log(\n\t                    state.stack.length,\n\t                    '...', state.stack.slice(state.stack.length - 10)\n\t                );\n\t            } else {\n\t                console.log(state.stack.length, state.stack);\n\t            }\n\t        }\n\t        */\n\t    }\n\t};\n\n\t/*\n\t* Initializes the twilight zone.\n\t*\n\t* This is only done if a SZPx instruction\n\t* refers to the twilight zone.\n\t*/\n\tfunction initTZone(state)\n\t{\n\t    var tZone = state.tZone = new Array(state.gZone.length);\n\n\t    // no idea if this is actually correct...\n\t    for (var i = 0; i < tZone.length; i++)\n\t    {\n\t        tZone[i] = new HPoint(0, 0);\n\t    }\n\t}\n\n\t/*\n\t* Skips the instruction pointer ahead over an IF/ELSE block.\n\t* handleElse .. if true breaks on matching ELSE\n\t*/\n\tfunction skip(state, handleElse)\n\t{\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\t    var nesting = 1;\n\t    var ins;\n\n\t    do {\n\t        ins = prog[++ip];\n\t        if (ins === 0x58) // IF\n\t            { nesting++; }\n\t        else if (ins === 0x59) // EIF\n\t            { nesting--; }\n\t        else if (ins === 0x40) // NPUSHB\n\t            { ip += prog[ip + 1] + 1; }\n\t        else if (ins === 0x41) // NPUSHW\n\t            { ip += 2 * prog[ip + 1] + 1; }\n\t        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n\t            { ip += ins - 0xB0 + 1; }\n\t        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n\t            { ip += (ins - 0xB8 + 1) * 2; }\n\t        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n\t            { break; }\n\t    } while (nesting > 0);\n\n\t    state.ip = ip;\n\t}\n\n\t/*----------------------------------------------------------*\n\t*          And then a lot of instructions...                *\n\t*----------------------------------------------------------*/\n\n\t// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n\t// 0x00-0x01\n\tfunction SVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }\n\n\t    state.fv = state.pv = state.dpv = v;\n\t}\n\n\t// SPVTCA[a] Set Projection Vector to Coordinate Axis\n\t// 0x02-0x03\n\tfunction SPVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }\n\n\t    state.pv = state.dpv = v;\n\t}\n\n\t// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n\t// 0x04-0x05\n\tfunction SFVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }\n\n\t    state.fv = v;\n\t}\n\n\t// SPVTL[a] Set Projection Vector To Line\n\t// 0x06-0x07\n\tfunction SPVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.pv = state.dpv = getUnitVector(dx, dy);\n\t}\n\n\t// SFVTL[a] Set Freedom Vector To Line\n\t// 0x08-0x09\n\tfunction SFVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.fv = getUnitVector(dx, dy);\n\t}\n\n\t// SPVFS[] Set Projection Vector From Stack\n\t// 0x0A\n\tfunction SPVFS(state) {\n\t    var stack = state.stack;\n\t    var y = stack.pop();\n\t    var x = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n\t    state.pv = state.dpv = getUnitVector(x, y);\n\t}\n\n\t// SFVFS[] Set Freedom Vector From Stack\n\t// 0x0B\n\tfunction SFVFS(state) {\n\t    var stack = state.stack;\n\t    var y = stack.pop();\n\t    var x = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n\t    state.fv = getUnitVector(x, y);\n\t}\n\n\t// GPV[] Get Projection Vector\n\t// 0x0C\n\tfunction GPV(state) {\n\t    var stack = state.stack;\n\t    var pv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }\n\n\t    stack.push(pv.x * 0x4000);\n\t    stack.push(pv.y * 0x4000);\n\t}\n\n\t// GFV[] Get Freedom Vector\n\t// 0x0C\n\tfunction GFV(state) {\n\t    var stack = state.stack;\n\t    var fv = state.fv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }\n\n\t    stack.push(fv.x * 0x4000);\n\t    stack.push(fv.y * 0x4000);\n\t}\n\n\t// SFVTPV[] Set Freedom Vector To Projection Vector\n\t// 0x0E\n\tfunction SFVTPV(state) {\n\t    state.fv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }\n\t}\n\n\t// ISECT[] moves point p to the InterSECTion of two lines\n\t// 0x0F\n\tfunction ISECT(state)\n\t{\n\t    var stack = state.stack;\n\t    var pa0i = stack.pop();\n\t    var pa1i = stack.pop();\n\t    var pb0i = stack.pop();\n\t    var pb1i = stack.pop();\n\t    var pi = stack.pop();\n\t    var z0 = state.z0;\n\t    var z1 = state.z1;\n\t    var pa0 = z0[pa0i];\n\t    var pa1 = z0[pa1i];\n\t    var pb0 = z1[pb0i];\n\t    var pb1 = z1[pb1i];\n\t    var p = state.z2[pi];\n\n\t    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }\n\n\t    // math from\n\t    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n\t    var x1 = pa0.x;\n\t    var y1 = pa0.y;\n\t    var x2 = pa1.x;\n\t    var y2 = pa1.y;\n\t    var x3 = pb0.x;\n\t    var y3 = pb0.y;\n\t    var x4 = pb1.x;\n\t    var y4 = pb1.y;\n\n\t    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t    var f1 = x1 * y2 - y1 * x2;\n\t    var f2 = x3 * y4 - y3 * x4;\n\n\t    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n\t    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n\t}\n\n\t// SRP0[] Set Reference Point 0\n\t// 0x10\n\tfunction SRP0(state) {\n\t    state.rp0 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }\n\t}\n\n\t// SRP1[] Set Reference Point 1\n\t// 0x11\n\tfunction SRP1(state) {\n\t    state.rp1 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }\n\t}\n\n\t// SRP1[] Set Reference Point 2\n\t// 0x12\n\tfunction SRP2(state) {\n\t    state.rp2 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }\n\t}\n\n\t// SZP0[] Set Zone Pointer 0\n\t// 0x13\n\tfunction SZP0(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }\n\n\t    state.zp0 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z0 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z0 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZP1[] Set Zone Pointer 1\n\t// 0x14\n\tfunction SZP1(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }\n\n\t    state.zp1 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z1 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z1 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZP2[] Set Zone Pointer 2\n\t// 0x15\n\tfunction SZP2(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }\n\n\t    state.zp2 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z2 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z2 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZPS[] Set Zone PointerS\n\t// 0x16\n\tfunction SZPS(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }\n\n\t    state.zp0 = state.zp1 = state.zp2 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z0 = state.z1 = state.z2 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z0 = state.z1 = state.z2 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SLOOP[] Set LOOP variable\n\t// 0x17\n\tfunction SLOOP(state) {\n\t    state.loop = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }\n\t}\n\n\t// RTG[] Round To Grid\n\t// 0x18\n\tfunction RTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }\n\n\t    state.round = roundToGrid;\n\t}\n\n\t// RTHG[] Round To Half Grid\n\t// 0x19\n\tfunction RTHG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }\n\n\t    state.round = roundToHalfGrid;\n\t}\n\n\t// SMD[] Set Minimum Distance\n\t// 0x1A\n\tfunction SMD(state) {\n\t    var d = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }\n\n\t    state.minDis = d / 0x40;\n\t}\n\n\t// ELSE[] ELSE clause\n\t// 0x1B\n\tfunction ELSE(state) {\n\t    // This instruction has been reached by executing a then branch\n\t    // so it just skips ahead until matching EIF.\n\t    //\n\t    // In case the IF was negative the IF[] instruction already\n\t    // skipped forward over the ELSE[]\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }\n\n\t    skip(state, false);\n\t}\n\n\t// JMPR[] JuMP Relative\n\t// 0x1C\n\tfunction JMPR(state) {\n\t    var o = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }\n\n\t    // A jump by 1 would do nothing.\n\t    state.ip += o - 1;\n\t}\n\n\t// SCVTCI[] Set Control Value Table Cut-In\n\t// 0x1D\n\tfunction SCVTCI(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }\n\n\t    state.cvCutIn = n / 0x40;\n\t}\n\n\t// DUP[] DUPlicate top stack element\n\t// 0x20\n\tfunction DUP(state) {\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }\n\n\t    stack.push(stack[stack.length - 1]);\n\t}\n\n\t// POP[] POP top stack element\n\t// 0x21\n\tfunction POP(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }\n\n\t    state.stack.pop();\n\t}\n\n\t// CLEAR[] CLEAR the stack\n\t// 0x22\n\tfunction CLEAR(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }\n\n\t    state.stack.length = 0;\n\t}\n\n\t// SWAP[] SWAP the top two elements on the stack\n\t// 0x23\n\tfunction SWAP(state) {\n\t    var stack = state.stack;\n\n\t    var a = stack.pop();\n\t    var b = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }\n\n\t    stack.push(a);\n\t    stack.push(b);\n\t}\n\n\t// DEPTH[] DEPTH of the stack\n\t// 0x24\n\tfunction DEPTH(state) {\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }\n\n\t    stack.push(stack.length);\n\t}\n\n\t// LOOPCALL[] LOOPCALL function\n\t// 0x2A\n\tfunction LOOPCALL(state) {\n\t    var stack = state.stack;\n\t    var fn = stack.pop();\n\t    var c = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }\n\n\t    // saves callers program\n\t    var cip = state.ip;\n\t    var cprog = state.prog;\n\n\t    state.prog = state.funcs[fn];\n\n\t    // executes the function\n\t    for (var i = 0; i < c; i++) {\n\t        exec(state);\n\n\t        if (exports.DEBUG) { console.log(\n\t            ++state.step,\n\t            i + 1 < c ? 'next loopcall' : 'done loopcall',\n\t            i\n\t        ); }\n\t    }\n\n\t    // restores the callers program\n\t    state.ip = cip;\n\t    state.prog = cprog;\n\t}\n\n\t// CALL[] CALL function\n\t// 0x2B\n\tfunction CALL(state) {\n\t    var fn = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }\n\n\t    // saves callers program\n\t    var cip = state.ip;\n\t    var cprog = state.prog;\n\n\t    state.prog = state.funcs[fn];\n\n\t    // executes the function\n\t    exec(state);\n\n\t    // restores the callers program\n\t    state.ip = cip;\n\t    state.prog = cprog;\n\n\t    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }\n\t}\n\n\t// CINDEX[] Copy the INDEXed element to the top of the stack\n\t// 0x25\n\tfunction CINDEX(state) {\n\t    var stack = state.stack;\n\t    var k = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }\n\n\t    // In case of k == 1, it copies the last element after popping\n\t    // thus stack.length - k.\n\t    stack.push(stack[stack.length - k]);\n\t}\n\n\t// MINDEX[] Move the INDEXed element to the top of the stack\n\t// 0x26\n\tfunction MINDEX(state) {\n\t    var stack = state.stack;\n\t    var k = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }\n\n\t    stack.push(stack.splice(stack.length - k, 1)[0]);\n\t}\n\n\t// FDEF[] Function DEFinition\n\t// 0x2C\n\tfunction FDEF(state) {\n\t    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }\n\t    var stack = state.stack;\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\n\t    var fn = stack.pop();\n\t    var ipBegin = ip;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }\n\n\t    while (prog[++ip] !== 0x2D){ }\n\n\t    state.ip = ip;\n\t    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n\t}\n\n\t// MDAP[a] Move Direct Absolute Point\n\t// 0x2E-0x2F\n\tfunction MDAP(round, state) {\n\t    var pi = state.stack.pop();\n\t    var p = state.z0[pi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }\n\n\t    var d = pv.distance(p, HPZero);\n\n\t    if (round) { d = state.round(d); }\n\n\t    fv.setRelative(p, HPZero, d, pv);\n\t    fv.touch(p);\n\n\t    state.rp0 = state.rp1 = pi;\n\t}\n\n\t// IUP[a] Interpolate Untouched Points through the outline\n\t// 0x30\n\tfunction IUP(v, state) {\n\t    var z2 = state.z2;\n\t    var pLen = z2.length - 2;\n\t    var cp;\n\t    var pp;\n\t    var np;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }\n\n\t    for (var i = 0; i < pLen; i++) {\n\t        cp = z2[i]; // current point\n\n\t        // if this point has been touched go on\n\t        if (v.touched(cp)) { continue; }\n\n\t        pp = cp.prevTouched(v);\n\n\t        // no point on the contour has been touched?\n\t        if (pp === cp) { continue; }\n\n\t        np = cp.nextTouched(v);\n\n\t        if (pp === np) {\n\t            // only one point on the contour has been touched\n\t            // so simply moves the point like that\n\n\t            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n\t        }\n\n\t        v.interpolate(cp, pp, np, v);\n\t    }\n\t}\n\n\t// SHP[] SHift Point using reference point\n\t// 0x32-0x33\n\tfunction SHP(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var loop = state.loop;\n\t    var z2 = state.z2;\n\n\t    while (loop--)\n\t    {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        var d = pv.distance(rp, rp, false, true);\n\t        fv.setRelative(p, p, d, pv);\n\t        fv.touch(p);\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ?\n\t                   'loop ' + (state.loop - loop) + ': ' :\n\t                   ''\n\t                ) +\n\t                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n\t            );\n\t        }\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// SHC[] SHift Contour using reference point\n\t// 0x36-0x37\n\tfunction SHC(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var ci = stack.pop();\n\t    var sp = state.z2[state.contours[ci]];\n\t    var p = sp;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }\n\n\t    var d = pv.distance(rp, rp, false, true);\n\n\t    do {\n\t        if (p !== rp) { fv.setRelative(p, p, d, pv); }\n\t        p = p.nextPointOnContour;\n\t    } while (p !== sp);\n\t}\n\n\t// SHZ[] SHift Zone using reference point\n\t// 0x36-0x37\n\tfunction SHZ(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    var e = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }\n\n\t    var z;\n\t    switch (e) {\n\t        case 0 : z = state.tZone; break;\n\t        case 1 : z = state.gZone; break;\n\t        default : throw new Error('Invalid zone');\n\t    }\n\n\t    var p;\n\t    var d = pv.distance(rp, rp, false, true);\n\t    var pLen = z.length - 2;\n\t    for (var i = 0; i < pLen; i++)\n\t    {\n\t        p = z[i];\n\t        fv.setRelative(p, p, d, pv);\n\t        //if (p !== rp) fv.setRelative(p, p, d, pv);\n\t    }\n\t}\n\n\t// SHPIX[] SHift point by a PIXel amount\n\t// 0x38\n\tfunction SHPIX(state) {\n\t    var stack = state.stack;\n\t    var loop = state.loop;\n\t    var fv = state.fv;\n\t    var d = stack.pop() / 0x40;\n\t    var z2 = state.z2;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'SHPIX[]', pi, d\n\t            );\n\t        }\n\n\t        fv.setRelative(p, p, d);\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// IP[] Interpolate Point\n\t// 0x39\n\tfunction IP(state) {\n\t    var stack = state.stack;\n\t    var rp1i = state.rp1;\n\t    var rp2i = state.rp2;\n\t    var loop = state.loop;\n\t    var rp1 = state.z0[rp1i];\n\t    var rp2 = state.z1[rp2i];\n\t    var fv = state.fv;\n\t    var pv = state.dpv;\n\t    var z2 = state.z2;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'IP[]', pi, rp1i, '<->', rp2i\n\t            );\n\t        }\n\n\t        fv.interpolate(p, rp1, rp2, pv);\n\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// MSIRP[a] Move Stack Indirect Relative Point\n\t// 0x3A-0x3B\n\tfunction MSIRP(a, state) {\n\t    var stack = state.stack;\n\t    var d = stack.pop() / 64;\n\t    var pi = stack.pop();\n\t    var p = state.z1[pi];\n\t    var rp0 = state.z0[state.rp0];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    fv.setRelative(p, rp0, d, pv);\n\t    fv.touch(p);\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }\n\n\t    state.rp1 = state.rp0;\n\t    state.rp2 = pi;\n\t    if (a) { state.rp0 = pi; }\n\t}\n\n\t// ALIGNRP[] Align to reference point.\n\t// 0x3C\n\tfunction ALIGNRP(state) {\n\t    var stack = state.stack;\n\t    var rp0i = state.rp0;\n\t    var rp0 = state.z0[rp0i];\n\t    var loop = state.loop;\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var z1 = state.z1;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z1[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'ALIGNRP[]', pi\n\t            );\n\t        }\n\n\t        fv.setRelative(p, rp0, 0, pv);\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// RTG[] Round To Double Grid\n\t// 0x3D\n\tfunction RTDG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }\n\n\t    state.round = roundToDoubleGrid;\n\t}\n\n\t// MIAP[a] Move Indirect Absolute Point\n\t// 0x3E-0x3F\n\tfunction MIAP(round, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var pi = stack.pop();\n\t    var p = state.z0[pi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var cv = state.cvt[n];\n\n\t    if (exports.DEBUG) {\n\t        console.log(\n\t            state.step,\n\t            'MIAP[' + round + ']',\n\t            n, '(', cv, ')', pi\n\t        );\n\t    }\n\n\t    var d = pv.distance(p, HPZero);\n\n\t    if (round) {\n\t        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\n\t        d = state.round(d);\n\t    }\n\n\t    fv.setRelative(p, HPZero, d, pv);\n\n\t    if (state.zp0 === 0) {\n\t        p.xo = p.x;\n\t        p.yo = p.y;\n\t    }\n\n\t    fv.touch(p);\n\n\t    state.rp0 = state.rp1 = pi;\n\t}\n\n\t// NPUSB[] PUSH N Bytes\n\t// 0x40\n\tfunction NPUSHB(state) {\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\t    var stack = state.stack;\n\n\t    var n = prog[++ip];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }\n\n\t    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n\t    state.ip = ip;\n\t}\n\n\t// NPUSHW[] PUSH N Words\n\t// 0x41\n\tfunction NPUSHW(state) {\n\t    var ip = state.ip;\n\t    var prog = state.prog;\n\t    var stack = state.stack;\n\t    var n = prog[++ip];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var w = (prog[++ip] << 8) | prog[++ip];\n\t        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n\t        stack.push(w);\n\t    }\n\n\t    state.ip = ip;\n\t}\n\n\t// WS[] Write Store\n\t// 0x42\n\tfunction WS(state) {\n\t    var stack = state.stack;\n\t    var store = state.store;\n\n\t    if (!store) { store = state.store = []; }\n\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }\n\n\t    store[l] = v;\n\t}\n\n\t// RS[] Read Store\n\t// 0x43\n\tfunction RS(state) {\n\t    var stack = state.stack;\n\t    var store = state.store;\n\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'RS', l); }\n\n\t    var v = (store && store[l]) || 0;\n\n\t    stack.push(v);\n\t}\n\n\t// WCVTP[] Write Control Value Table in Pixel units\n\t// 0x44\n\tfunction WCVTP(state) {\n\t    var stack = state.stack;\n\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }\n\n\t    state.cvt[l] = v / 0x40;\n\t}\n\n\t// RCVT[] Read Control Value Table entry\n\t// 0x45\n\tfunction RCVT(state) {\n\t    var stack = state.stack;\n\t    var cvte = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }\n\n\t    stack.push(state.cvt[cvte] * 0x40);\n\t}\n\n\t// GC[] Get Coordinate projected onto the projection vector\n\t// 0x46-0x47\n\tfunction GC(a, state) {\n\t    var stack = state.stack;\n\t    var pi = stack.pop();\n\t    var p = state.z2[pi];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }\n\n\t    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n\t}\n\n\t// MD[a] Measure Distance\n\t// 0x49-0x4A\n\tfunction MD(a, state) {\n\t    var stack = state.stack;\n\t    var pi2 = stack.pop();\n\t    var pi1 = stack.pop();\n\t    var p2 = state.z1[pi2];\n\t    var p1 = state.z0[pi1];\n\t    var d = state.dpv.distance(p1, p2, a, a);\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }\n\n\t    state.stack.push(Math.round(d * 64));\n\t}\n\n\t// MPPEM[] Measure Pixels Per EM\n\t// 0x4B\n\tfunction MPPEM(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }\n\t    state.stack.push(state.ppem);\n\t}\n\n\t// FLIPON[] set the auto FLIP Boolean to ON\n\t// 0x4D\n\tfunction FLIPON(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }\n\t    state.autoFlip = true;\n\t}\n\n\t// LT[] Less Than\n\t// 0x50\n\tfunction LT(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }\n\n\t    stack.push(e1 < e2 ? 1 : 0);\n\t}\n\n\t// LTEQ[] Less Than or EQual\n\t// 0x53\n\tfunction LTEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }\n\n\t    stack.push(e1 <= e2 ? 1 : 0);\n\t}\n\n\t// GTEQ[] Greater Than\n\t// 0x52\n\tfunction GT(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }\n\n\t    stack.push(e1 > e2 ? 1 : 0);\n\t}\n\n\t// GTEQ[] Greater Than or EQual\n\t// 0x53\n\tfunction GTEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }\n\n\t    stack.push(e1 >= e2 ? 1 : 0);\n\t}\n\n\t// EQ[] EQual\n\t// 0x54\n\tfunction EQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }\n\n\t    stack.push(e2 === e1 ? 1 : 0);\n\t}\n\n\t// NEQ[] Not EQual\n\t// 0x55\n\tfunction NEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }\n\n\t    stack.push(e2 !== e1 ? 1 : 0);\n\t}\n\n\t// ODD[] ODD\n\t// 0x56\n\tfunction ODD(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }\n\n\t    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n\t}\n\n\t// EVEN[] EVEN\n\t// 0x57\n\tfunction EVEN(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }\n\n\t    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n\t}\n\n\t// IF[] IF test\n\t// 0x58\n\tfunction IF(state) {\n\t    var test = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }\n\n\t    // if test is true it just continues\n\t    // if not the ip is skipped until matching ELSE or EIF\n\t    if (!test) {\n\t        skip(state, true);\n\n\t        if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }\n\t    }\n\t}\n\n\t// EIF[] End IF\n\t// 0x59\n\tfunction EIF(state) {\n\t    // this can be reached normally when\n\t    // executing an else branch.\n\t    // -> just ignore it\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n\t}\n\n\t// AND[] logical AND\n\t// 0x5A\n\tfunction AND(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }\n\n\t    stack.push(e2 && e1 ? 1 : 0);\n\t}\n\n\t// OR[] logical OR\n\t// 0x5B\n\tfunction OR(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }\n\n\t    stack.push(e2 || e1 ? 1 : 0);\n\t}\n\n\t// NOT[] logical NOT\n\t// 0x5C\n\tfunction NOT(state) {\n\t    var stack = state.stack;\n\t    var e = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }\n\n\t    stack.push(e ? 0 : 1);\n\t}\n\n\t// DELTAP1[] DELTA exception P1\n\t// DELTAP2[] DELTA exception P2\n\t// DELTAP3[] DELTA exception P3\n\t// 0x5D, 0x71, 0x72\n\tfunction DELTAP123(b, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var ppem = state.ppem;\n\t    var base = state.deltaBase + (b - 1) * 16;\n\t    var ds = state.deltaShift;\n\t    var z0 = state.z0;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var pi = stack.pop();\n\t        var arg = stack.pop();\n\t        var appem = base + ((arg & 0xF0) >> 4);\n\t        if (appem !== ppem) { continue; }\n\n\t        var mag = (arg & 0x0F) - 8;\n\t        if (mag >= 0) { mag++; }\n\t        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }\n\n\t        var p = z0[pi];\n\t        fv.setRelative(p, p, mag * ds, pv);\n\t    }\n\t}\n\n\t// SDB[] Set Delta Base in the graphics state\n\t// 0x5E\n\tfunction SDB(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }\n\n\t    state.deltaBase = n;\n\t}\n\n\t// SDS[] Set Delta Shift in the graphics state\n\t// 0x5F\n\tfunction SDS(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }\n\n\t    state.deltaShift = Math.pow(0.5, n);\n\t}\n\n\t// ADD[] ADD\n\t// 0x60\n\tfunction ADD(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }\n\n\t    stack.push(n1 + n2);\n\t}\n\n\t// SUB[] SUB\n\t// 0x61\n\tfunction SUB(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }\n\n\t    stack.push(n1 - n2);\n\t}\n\n\t// DIV[] DIV\n\t// 0x62\n\tfunction DIV(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }\n\n\t    stack.push(n1 * 64 / n2);\n\t}\n\n\t// MUL[] MUL\n\t// 0x63\n\tfunction MUL(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }\n\n\t    stack.push(n1 * n2 / 64);\n\t}\n\n\t// ABS[] ABSolute value\n\t// 0x64\n\tfunction ABS(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }\n\n\t    stack.push(Math.abs(n));\n\t}\n\n\t// NEG[] NEGate\n\t// 0x65\n\tfunction NEG(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }\n\n\t    stack.push(-n);\n\t}\n\n\t// FLOOR[] FLOOR\n\t// 0x66\n\tfunction FLOOR(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }\n\n\t    stack.push(Math.floor(n / 0x40) * 0x40);\n\t}\n\n\t// CEILING[] CEILING\n\t// 0x67\n\tfunction CEILING(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }\n\n\t    stack.push(Math.ceil(n / 0x40) * 0x40);\n\t}\n\n\t// ROUND[ab] ROUND value\n\t// 0x68-0x6B\n\tfunction ROUND(dt, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }\n\n\t    stack.push(state.round(n / 0x40) * 0x40);\n\t}\n\n\t// WCVTF[] Write Control Value Table in Funits\n\t// 0x70\n\tfunction WCVTF(state) {\n\t    var stack = state.stack;\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }\n\n\t    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n\t}\n\n\t// DELTAC1[] DELTA exception C1\n\t// DELTAC2[] DELTA exception C2\n\t// DELTAC3[] DELTA exception C3\n\t// 0x73, 0x74, 0x75\n\tfunction DELTAC123(b, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var ppem = state.ppem;\n\t    var base = state.deltaBase + (b - 1) * 16;\n\t    var ds = state.deltaShift;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var c = stack.pop();\n\t        var arg = stack.pop();\n\t        var appem = base + ((arg & 0xF0) >> 4);\n\t        if (appem !== ppem) { continue; }\n\n\t        var mag = (arg & 0x0F) - 8;\n\t        if (mag >= 0) { mag++; }\n\n\t        var delta = mag * ds;\n\n\t        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }\n\n\t        state.cvt[c] += delta;\n\t    }\n\t}\n\n\t// SROUND[] Super ROUND\n\t// 0x76\n\tfunction SROUND(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }\n\n\t    state.round = roundSuper;\n\n\t    var period;\n\n\t    switch (n & 0xC0) {\n\t        case 0x00:\n\t            period = 0.5;\n\t            break;\n\t        case 0x40:\n\t            period = 1;\n\t            break;\n\t        case 0x80:\n\t            period = 2;\n\t            break;\n\t        default:\n\t            throw new Error('invalid SROUND value');\n\t    }\n\n\t    state.srPeriod = period;\n\n\t    switch (n & 0x30) {\n\t        case 0x00:\n\t            state.srPhase = 0;\n\t            break;\n\t        case 0x10:\n\t            state.srPhase = 0.25 * period;\n\t            break;\n\t        case 0x20:\n\t            state.srPhase = 0.5  * period;\n\t            break;\n\t        case 0x30:\n\t            state.srPhase = 0.75 * period;\n\t            break;\n\t        default: throw new Error('invalid SROUND value');\n\t    }\n\n\t    n &= 0x0F;\n\n\t    if (n === 0) { state.srThreshold = 0; }\n\t    else { state.srThreshold = (n / 8 - 0.5) * period; }\n\t}\n\n\t// S45ROUND[] Super ROUND 45 degrees\n\t// 0x77\n\tfunction S45ROUND(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }\n\n\t    state.round = roundSuper;\n\n\t    var period;\n\n\t    switch (n & 0xC0) {\n\t        case 0x00:\n\t            period = Math.sqrt(2) / 2;\n\t            break;\n\t        case 0x40:\n\t            period = Math.sqrt(2);\n\t            break;\n\t        case 0x80:\n\t            period = 2 * Math.sqrt(2);\n\t            break;\n\t        default:\n\t            throw new Error('invalid S45ROUND value');\n\t    }\n\n\t    state.srPeriod = period;\n\n\t    switch (n & 0x30) {\n\t        case 0x00:\n\t            state.srPhase = 0;\n\t            break;\n\t        case 0x10:\n\t            state.srPhase = 0.25 * period;\n\t            break;\n\t        case 0x20:\n\t            state.srPhase = 0.5  * period;\n\t            break;\n\t        case 0x30:\n\t            state.srPhase = 0.75 * period;\n\t            break;\n\t        default:\n\t            throw new Error('invalid S45ROUND value');\n\t    }\n\n\t    n &= 0x0F;\n\n\t    if (n === 0) { state.srThreshold = 0; }\n\t    else { state.srThreshold = (n / 8 - 0.5) * period; }\n\t}\n\n\t// ROFF[] Round Off\n\t// 0x7A\n\tfunction ROFF(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }\n\n\t    state.round = roundOff;\n\t}\n\n\t// RUTG[] Round Up To Grid\n\t// 0x7C\n\tfunction RUTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }\n\n\t    state.round = roundUpToGrid;\n\t}\n\n\t// RDTG[] Round Down To Grid\n\t// 0x7D\n\tfunction RDTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }\n\n\t    state.round = roundDownToGrid;\n\t}\n\n\t// SCANCTRL[] SCAN conversion ConTRoL\n\t// 0x85\n\tfunction SCANCTRL(state) {\n\t    var n = state.stack.pop();\n\n\t    // ignored by opentype.js\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }\n\t}\n\n\t// SDPVTL[a] Set Dual Projection Vector To Line\n\t// 0x86-0x87\n\tfunction SDPVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.dpv = getUnitVector(dx, dy);\n\t}\n\n\t// GETINFO[] GET INFOrmation\n\t// 0x88\n\tfunction GETINFO(state) {\n\t    var stack = state.stack;\n\t    var sel = stack.pop();\n\t    var r = 0;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }\n\n\t    // v35 as in no subpixel hinting\n\t    if (sel & 0x01) { r = 35; }\n\n\t    // TODO rotation and stretch currently not supported\n\t    // and thus those GETINFO are always 0.\n\n\t    // opentype.js is always gray scaling\n\t    if (sel & 0x20) { r |= 0x1000; }\n\n\t    stack.push(r);\n\t}\n\n\t// ROLL[] ROLL the top three stack elements\n\t// 0x8A\n\tfunction ROLL(state) {\n\t    var stack = state.stack;\n\t    var a = stack.pop();\n\t    var b = stack.pop();\n\t    var c = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }\n\n\t    stack.push(b);\n\t    stack.push(a);\n\t    stack.push(c);\n\t}\n\n\t// MAX[] MAXimum of top two stack elements\n\t// 0x8B\n\tfunction MAX(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }\n\n\t    stack.push(Math.max(e1, e2));\n\t}\n\n\t// MIN[] MINimum of top two stack elements\n\t// 0x8C\n\tfunction MIN(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }\n\n\t    stack.push(Math.min(e1, e2));\n\t}\n\n\t// SCANTYPE[] SCANTYPE\n\t// 0x8D\n\tfunction SCANTYPE(state) {\n\t    var n = state.stack.pop();\n\t    // ignored by opentype.js\n\t    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }\n\t}\n\n\t// INSTCTRL[] INSTCTRL\n\t// 0x8D\n\tfunction INSTCTRL(state) {\n\t    var s = state.stack.pop();\n\t    var v = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }\n\n\t    switch (s) {\n\t        case 1 : state.inhibitGridFit = !!v; return;\n\t        case 2 : state.ignoreCvt = !!v; return;\n\t        default: throw new Error('invalid INSTCTRL[] selector');\n\t    }\n\t}\n\n\t// PUSHB[abc] PUSH Bytes\n\t// 0xB0-0xB7\n\tfunction PUSHB(n, state) {\n\t    var stack = state.stack;\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }\n\n\t    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n\t    state.ip = ip;\n\t}\n\n\t// PUSHW[abc] PUSH Words\n\t// 0xB8-0xBF\n\tfunction PUSHW(n, state) {\n\t    var ip = state.ip;\n\t    var prog = state.prog;\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var w = (prog[++ip] << 8) | prog[++ip];\n\t        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n\t        stack.push(w);\n\t    }\n\n\t    state.ip = ip;\n\t}\n\n\t// MDRP[abcde] Move Direct Relative Point\n\t// 0xD0-0xEF\n\t// (if indirect is 0)\n\t//\n\t// and\n\t//\n\t// MIRP[abcde] Move Indirect Relative Point\n\t// 0xE0-0xFF\n\t// (if indirect is 1)\n\n\tfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n\t    var stack = state.stack;\n\t    var cvte = indirect && stack.pop();\n\t    var pi = stack.pop();\n\t    var rp0i = state.rp0;\n\t    var rp = state.z0[rp0i];\n\t    var p = state.z1[pi];\n\n\t    var md = state.minDis;\n\t    var fv = state.fv;\n\t    var pv = state.dpv;\n\t    var od; // original distance\n\t    var d; // moving distance\n\t    var sign; // sign of distance\n\t    var cv;\n\n\t    d = od = pv.distance(p, rp, true, true);\n\t    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n\t    // TODO consider autoFlip\n\t    d = Math.abs(d);\n\n\t    if (indirect) {\n\t        cv = state.cvt[cvte];\n\n\t        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\t    }\n\n\t    if (keepD && d < md) { d = md; }\n\n\t    if (ro) { d = state.round(d); }\n\n\t    fv.setRelative(p, rp, sign * d, pv);\n\t    fv.touch(p);\n\n\t    if (exports.DEBUG) {\n\t        console.log(\n\t            state.step,\n\t            (indirect ? 'MIRP[' : 'MDRP[') +\n\t            (setRp0 ? 'M' : 'm') +\n\t            (keepD ? '>' : '_') +\n\t            (ro ? 'R' : '_') +\n\t            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n\t            ']',\n\t            indirect ?\n\t                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n\t                '',\n\t            pi,\n\t            '(d =', od, '->', sign * d, ')'\n\t        );\n\t    }\n\n\t    state.rp1 = state.rp0;\n\t    state.rp2 = pi;\n\t    if (setRp0) { state.rp0 = pi; }\n\t}\n\n\t/*\n\t* The instruction table.\n\t*/\n\tinstructionTable = [\n\t    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n\t    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n\t    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n\t    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n\t    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n\t    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n\t    /* 0x06 */ SPVTL.bind(undefined, 0),\n\t    /* 0x07 */ SPVTL.bind(undefined, 1),\n\t    /* 0x08 */ SFVTL.bind(undefined, 0),\n\t    /* 0x09 */ SFVTL.bind(undefined, 1),\n\t    /* 0x0A */ SPVFS,\n\t    /* 0x0B */ SFVFS,\n\t    /* 0x0C */ GPV,\n\t    /* 0x0D */ GFV,\n\t    /* 0x0E */ SFVTPV,\n\t    /* 0x0F */ ISECT,\n\t    /* 0x10 */ SRP0,\n\t    /* 0x11 */ SRP1,\n\t    /* 0x12 */ SRP2,\n\t    /* 0x13 */ SZP0,\n\t    /* 0x14 */ SZP1,\n\t    /* 0x15 */ SZP2,\n\t    /* 0x16 */ SZPS,\n\t    /* 0x17 */ SLOOP,\n\t    /* 0x18 */ RTG,\n\t    /* 0x19 */ RTHG,\n\t    /* 0x1A */ SMD,\n\t    /* 0x1B */ ELSE,\n\t    /* 0x1C */ JMPR,\n\t    /* 0x1D */ SCVTCI,\n\t    /* 0x1E */ undefined,   // TODO SSWCI\n\t    /* 0x1F */ undefined,   // TODO SSW\n\t    /* 0x20 */ DUP,\n\t    /* 0x21 */ POP,\n\t    /* 0x22 */ CLEAR,\n\t    /* 0x23 */ SWAP,\n\t    /* 0x24 */ DEPTH,\n\t    /* 0x25 */ CINDEX,\n\t    /* 0x26 */ MINDEX,\n\t    /* 0x27 */ undefined,   // TODO ALIGNPTS\n\t    /* 0x28 */ undefined,\n\t    /* 0x29 */ undefined,   // TODO UTP\n\t    /* 0x2A */ LOOPCALL,\n\t    /* 0x2B */ CALL,\n\t    /* 0x2C */ FDEF,\n\t    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n\t    /* 0x2E */ MDAP.bind(undefined, 0),\n\t    /* 0x2F */ MDAP.bind(undefined, 1),\n\t    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n\t    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n\t    /* 0x32 */ SHP.bind(undefined, 0),\n\t    /* 0x33 */ SHP.bind(undefined, 1),\n\t    /* 0x34 */ SHC.bind(undefined, 0),\n\t    /* 0x35 */ SHC.bind(undefined, 1),\n\t    /* 0x36 */ SHZ.bind(undefined, 0),\n\t    /* 0x37 */ SHZ.bind(undefined, 1),\n\t    /* 0x38 */ SHPIX,\n\t    /* 0x39 */ IP,\n\t    /* 0x3A */ MSIRP.bind(undefined, 0),\n\t    /* 0x3B */ MSIRP.bind(undefined, 1),\n\t    /* 0x3C */ ALIGNRP,\n\t    /* 0x3D */ RTDG,\n\t    /* 0x3E */ MIAP.bind(undefined, 0),\n\t    /* 0x3F */ MIAP.bind(undefined, 1),\n\t    /* 0x40 */ NPUSHB,\n\t    /* 0x41 */ NPUSHW,\n\t    /* 0x42 */ WS,\n\t    /* 0x43 */ RS,\n\t    /* 0x44 */ WCVTP,\n\t    /* 0x45 */ RCVT,\n\t    /* 0x46 */ GC.bind(undefined, 0),\n\t    /* 0x47 */ GC.bind(undefined, 1),\n\t    /* 0x48 */ undefined,   // TODO SCFS\n\t    /* 0x49 */ MD.bind(undefined, 0),\n\t    /* 0x4A */ MD.bind(undefined, 1),\n\t    /* 0x4B */ MPPEM,\n\t    /* 0x4C */ undefined,   // TODO MPS\n\t    /* 0x4D */ FLIPON,\n\t    /* 0x4E */ undefined,   // TODO FLIPOFF\n\t    /* 0x4F */ undefined,   // TODO DEBUG\n\t    /* 0x50 */ LT,\n\t    /* 0x51 */ LTEQ,\n\t    /* 0x52 */ GT,\n\t    /* 0x53 */ GTEQ,\n\t    /* 0x54 */ EQ,\n\t    /* 0x55 */ NEQ,\n\t    /* 0x56 */ ODD,\n\t    /* 0x57 */ EVEN,\n\t    /* 0x58 */ IF,\n\t    /* 0x59 */ EIF,\n\t    /* 0x5A */ AND,\n\t    /* 0x5B */ OR,\n\t    /* 0x5C */ NOT,\n\t    /* 0x5D */ DELTAP123.bind(undefined, 1),\n\t    /* 0x5E */ SDB,\n\t    /* 0x5F */ SDS,\n\t    /* 0x60 */ ADD,\n\t    /* 0x61 */ SUB,\n\t    /* 0x62 */ DIV,\n\t    /* 0x63 */ MUL,\n\t    /* 0x64 */ ABS,\n\t    /* 0x65 */ NEG,\n\t    /* 0x66 */ FLOOR,\n\t    /* 0x67 */ CEILING,\n\t    /* 0x68 */ ROUND.bind(undefined, 0),\n\t    /* 0x69 */ ROUND.bind(undefined, 1),\n\t    /* 0x6A */ ROUND.bind(undefined, 2),\n\t    /* 0x6B */ ROUND.bind(undefined, 3),\n\t    /* 0x6C */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6D */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6E */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6F */ undefined,   // TODO NROUND[ab]\n\t    /* 0x70 */ WCVTF,\n\t    /* 0x71 */ DELTAP123.bind(undefined, 2),\n\t    /* 0x72 */ DELTAP123.bind(undefined, 3),\n\t    /* 0x73 */ DELTAC123.bind(undefined, 1),\n\t    /* 0x74 */ DELTAC123.bind(undefined, 2),\n\t    /* 0x75 */ DELTAC123.bind(undefined, 3),\n\t    /* 0x76 */ SROUND,\n\t    /* 0x77 */ S45ROUND,\n\t    /* 0x78 */ undefined,   // TODO JROT[]\n\t    /* 0x79 */ undefined,   // TODO JROF[]\n\t    /* 0x7A */ ROFF,\n\t    /* 0x7B */ undefined,\n\t    /* 0x7C */ RUTG,\n\t    /* 0x7D */ RDTG,\n\t    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n\t    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n\t    /* 0x80 */ undefined,   // TODO FLIPPT\n\t    /* 0x81 */ undefined,   // TODO FLIPRGON\n\t    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n\t    /* 0x83 */ undefined,\n\t    /* 0x84 */ undefined,\n\t    /* 0x85 */ SCANCTRL,\n\t    /* 0x86 */ SDPVTL.bind(undefined, 0),\n\t    /* 0x87 */ SDPVTL.bind(undefined, 1),\n\t    /* 0x88 */ GETINFO,\n\t    /* 0x89 */ undefined,   // TODO IDEF\n\t    /* 0x8A */ ROLL,\n\t    /* 0x8B */ MAX,\n\t    /* 0x8C */ MIN,\n\t    /* 0x8D */ SCANTYPE,\n\t    /* 0x8E */ INSTCTRL,\n\t    /* 0x8F */ undefined,\n\t    /* 0x90 */ undefined,\n\t    /* 0x91 */ undefined,\n\t    /* 0x92 */ undefined,\n\t    /* 0x93 */ undefined,\n\t    /* 0x94 */ undefined,\n\t    /* 0x95 */ undefined,\n\t    /* 0x96 */ undefined,\n\t    /* 0x97 */ undefined,\n\t    /* 0x98 */ undefined,\n\t    /* 0x99 */ undefined,\n\t    /* 0x9A */ undefined,\n\t    /* 0x9B */ undefined,\n\t    /* 0x9C */ undefined,\n\t    /* 0x9D */ undefined,\n\t    /* 0x9E */ undefined,\n\t    /* 0x9F */ undefined,\n\t    /* 0xA0 */ undefined,\n\t    /* 0xA1 */ undefined,\n\t    /* 0xA2 */ undefined,\n\t    /* 0xA3 */ undefined,\n\t    /* 0xA4 */ undefined,\n\t    /* 0xA5 */ undefined,\n\t    /* 0xA6 */ undefined,\n\t    /* 0xA7 */ undefined,\n\t    /* 0xA8 */ undefined,\n\t    /* 0xA9 */ undefined,\n\t    /* 0xAA */ undefined,\n\t    /* 0xAB */ undefined,\n\t    /* 0xAC */ undefined,\n\t    /* 0xAD */ undefined,\n\t    /* 0xAE */ undefined,\n\t    /* 0xAF */ undefined,\n\t    /* 0xB0 */ PUSHB.bind(undefined, 1),\n\t    /* 0xB1 */ PUSHB.bind(undefined, 2),\n\t    /* 0xB2 */ PUSHB.bind(undefined, 3),\n\t    /* 0xB3 */ PUSHB.bind(undefined, 4),\n\t    /* 0xB4 */ PUSHB.bind(undefined, 5),\n\t    /* 0xB5 */ PUSHB.bind(undefined, 6),\n\t    /* 0xB6 */ PUSHB.bind(undefined, 7),\n\t    /* 0xB7 */ PUSHB.bind(undefined, 8),\n\t    /* 0xB8 */ PUSHW.bind(undefined, 1),\n\t    /* 0xB9 */ PUSHW.bind(undefined, 2),\n\t    /* 0xBA */ PUSHW.bind(undefined, 3),\n\t    /* 0xBB */ PUSHW.bind(undefined, 4),\n\t    /* 0xBC */ PUSHW.bind(undefined, 5),\n\t    /* 0xBD */ PUSHW.bind(undefined, 6),\n\t    /* 0xBE */ PUSHW.bind(undefined, 7),\n\t    /* 0xBF */ PUSHW.bind(undefined, 8),\n\t    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n\t    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n\t    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n\t    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n\t    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n\t    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n\t    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n\t    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n\t    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n\t    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n\t    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n\t    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n\t    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n\t    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n\t    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n\t    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n\t    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n\t    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n\t    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n\t    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n\t    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n\t    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n\t    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n\t    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n\t    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n\t    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n\t    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n\t    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n\t    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n\t    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n\t    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n\t    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n\t    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n\t    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n\t    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n\t    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n\t    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n\t    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n\t    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n\t    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n\t    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n\t    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n\t    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n\t    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n\t    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n\t    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n\t    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n\t    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n\t    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n\t    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n\t    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n\t    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n\t    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n\t    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n\t    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n\t    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n\t    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n\t    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n\t    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n\t    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n\t    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n\t    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n\t    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n\t    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n\t];\n\n\t/*****************************\n\t  Mathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n\t                        (pv)\n\t                     .-'\n\t              rpd .-'\n\t               .-*\n\t          d .-'90°'\n\t         .-'       '\n\t      .-'           '\n\t   *-'               ' b\n\t  rp                  '\n\t                       '\n\t                        '\n\t            p *----------*-------------- (fv)\n\t                          pm\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b\n\n\t   y - rpdy = pvns * (x- rpdx)\n\n\t   y = p.y\n\n\t   x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n\t    * pm\n\t    |\\\n\t    | \\\n\t    |  \\\n\t    |   \\\n\t    |    \\\n\t    |     \\\n\t    |      \\\n\t    |       \\\n\t    |        \\\n\t    |         \\ b\n\t    |          \\\n\t    |           \\\n\t    |            \\    .-' (pv)\n\t    |         90° \\.-'\n\t    |           .-'* rpd\n\t    |        .-'\n\t    *     *-'  d\n\t    p     rp\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b:\n\t           pvns ... normal slope to pv\n\n\t   y - rpdy = pvns * (x - rpdx)\n\n\t   x = p.x\n\n\t   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n\t                              .'(fv)\n\t                            .'\n\t                          .* pm\n\t                        .' !\n\t                      .'    .\n\t                    .'      !\n\t                  .'         . b\n\t                .'           !\n\t               *              .\n\t              p               !\n\t                         90°   .    ... (pv)\n\t                           ...-*-'''\n\t                  ...---'''    rpd\n\t         ...---'''   d\n\t   *--'''\n\t  rp\n\n\t    rpdx = rpx + d * pv.x\n\t    rpdy = rpy + d * pv.y\n\n\t equation of line b:\n\t    pvns... normal slope to pv\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n\t    fvs ... slope of freedom vector (=fy/fx)\n\n\t    y - py = fvs * (x - px)\n\n\n\t  on pm both equations are true for same x/y\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t    y - py = fvs * (x - px)\n\n\t  form to y and set equal:\n\n\t    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n\t  expand:\n\n\t    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n\t  switch:\n\n\t    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n\t  solve for x:\n\n\t    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n\t          fvs * px - pvns * rpdx + rpdy - py\n\t    x =  -----------------------------------\n\t                 fvs - pvns\n\n\t  and:\n\n\t    y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n\t           (+6)\n\t    rp1o *---->*rp1\n\t         .     .                          (+12)\n\t         .     .                  rp2o *---------->* rp2\n\t         .     .                       .           .\n\t         .     .                       .           .\n\t         .    10          20           .           .\n\t         |.........|...................|           .\n\t               .   .                               .\n\t               .   . (+8)                          .\n\t                po *------>*p                      .\n\t               .           .                       .\n\t               .    12     .          24           .\n\t               |...........|.......................|\n\t                                  36\n\n\n\t-------\n\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .                      (-10)\n\t         .         .              rp2 *<---------* rpo2\n\t         .         .                   .         .\n\t         .         .                   .         .\n\t         .    10   .          30       .         .\n\t         |.........|.............................|\n\t                   .                   .\n\t                   . (+5)              .\n\t                po *--->* p            .\n\t                   .    .              .\n\t                   .    .   20         .\n\t                   |....|..............|\n\t                     5        15\n\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .\n\t    rp2o *-------->*rp2\n\n\n\t                               (+10)\n\t                          po *-------->* p\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .(+30)\n\t    rp2o *---------------------------->*rp2\n\n\n\t                                        (+25)\n\t                          po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:\n\t*****/\n\n\t/**\n\t * Converts a string into a list of tokens.\n\t */\n\n\t/**\n\t * Create a new token\n\t * @param {string} char a single char\n\t */\n\tfunction Token(char) {\n\t    this.char = char;\n\t    this.state = {};\n\t    this.activeState = null;\n\t}\n\n\t/**\n\t * Create a new context range\n\t * @param {number} startIndex range start index\n\t * @param {number} endOffset range end index offset\n\t * @param {string} contextName owner context name\n\t */\n\tfunction ContextRange(startIndex, endOffset, contextName) {\n\t    this.contextName = contextName;\n\t    this.startIndex = startIndex;\n\t    this.endOffset = endOffset;\n\t}\n\n\t/**\n\t * Check context start and end\n\t * @param {string} contextName a unique context name\n\t * @param {function} checkStart a predicate function the indicates a context's start\n\t * @param {function} checkEnd a predicate function the indicates a context's end\n\t */\n\tfunction ContextChecker(contextName, checkStart, checkEnd) {\n\t    this.contextName = contextName;\n\t    this.openRange = null;\n\t    this.ranges = [];\n\t    this.checkStart = checkStart;\n\t    this.checkEnd = checkEnd;\n\t}\n\n\t/**\n\t * @typedef ContextParams\n\t * @type Object\n\t * @property {array} context context items\n\t * @property {number} currentIndex current item index\n\t */\n\n\t/**\n\t * Create a context params\n\t * @param {array} context a list of items\n\t * @param {number} currentIndex current item index\n\t */\n\tfunction ContextParams(context, currentIndex) {\n\t    this.context = context;\n\t    this.index = currentIndex;\n\t    this.length = context.length;\n\t    this.current = context[currentIndex];\n\t    this.backtrack = context.slice(0, currentIndex);\n\t    this.lookahead = context.slice(currentIndex + 1);\n\t}\n\n\t/**\n\t * Create an event instance\n\t * @param {string} eventId event unique id\n\t */\n\tfunction Event(eventId) {\n\t    this.eventId = eventId;\n\t    this.subscribers = [];\n\t}\n\n\t/**\n\t * Initialize a core events and auto subscribe required event handlers\n\t * @param {any} events an object that enlists core events handlers\n\t */\n\tfunction initializeCoreEvents(events) {\n\t    var this$1 = this;\n\n\t    var coreEvents = [\n\t        'start', 'end', 'next', 'newToken', 'contextStart',\n\t        'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n\t        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n\t    ];\n\n\t    coreEvents.forEach(function (eventId) {\n\t        Object.defineProperty(this$1.events, eventId, {\n\t            value: new Event(eventId)\n\t        });\n\t    });\n\n\t    if (!!events) {\n\t        coreEvents.forEach(function (eventId) {\n\t            var event = events[eventId];\n\t            if (typeof event === 'function') {\n\t                this$1.events[eventId].subscribe(event);\n\t            }\n\t        });\n\t    }\n\t    var requiresContextUpdate = [\n\t        'insertToken', 'removeToken', 'removeRange',\n\t        'replaceToken', 'replaceRange', 'composeRUD'\n\t    ];\n\t    requiresContextUpdate.forEach(function (eventId) {\n\t        this$1.events[eventId].subscribe(\n\t            this$1.updateContextsRanges\n\t        );\n\t    });\n\t}\n\n\t/**\n\t * Converts a string into a list of tokens\n\t * @param {any} events tokenizer core events\n\t */\n\tfunction Tokenizer(events) {\n\t    this.tokens = [];\n\t    this.registeredContexts = {};\n\t    this.contextCheckers = [];\n\t    this.events = {};\n\t    this.registeredModifiers = [];\n\n\t    initializeCoreEvents.call(this, events);\n\t}\n\n\t/**\n\t * Sets the state of a token, usually called by a state modifier.\n\t * @param {string} key state item key\n\t * @param {any} value state item value\n\t */\n\tToken.prototype.setState = function(key, value) {\n\t    this.state[key] = value;\n\t    this.activeState = { key: key, value: this.state[key] };\n\t    return this.activeState;\n\t};\n\n\tToken.prototype.getState = function (stateId) {\n\t    return this.state[stateId] || null;\n\t};\n\n\t/**\n\t * Checks if an index exists in the tokens list.\n\t * @param {number} index token index\n\t */\n\tTokenizer.prototype.inboundIndex = function(index) {\n\t    return index >= 0 && index < this.tokens.length;\n\t};\n\n\t/**\n\t * Compose and apply a list of operations (replace, update, delete)\n\t * @param {array} RUDs replace, update and delete operations\n\t * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n\t */\n\tTokenizer.prototype.composeRUD = function (RUDs) {\n\t    var this$1 = this;\n\n\t    var silent = true;\n\t    var state = RUDs.map(function (RUD) { return (\n\t        this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))\n\t    ); });\n\t    var hasFAILObject = function (obj) { return (\n\t        typeof obj === 'object' &&\n\t        obj.hasOwnProperty('FAIL')\n\t    ); };\n\t    if (state.every(hasFAILObject)) {\n\t        return {\n\t            FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n\t            report: state.filter(hasFAILObject)\n\t        };\n\t    }\n\t    this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);\n\t};\n\n\t/**\n\t * Replace a range of tokens with a list of tokens\n\t * @param {number} startIndex range start index\n\t * @param {number} offset range offset\n\t * @param {token} tokens a list of tokens to replace\n\t * @param {boolean} silent dispatch events and update context ranges\n\t */\n\tTokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n\t    offset = offset !== null ? offset : this.tokens.length;\n\t    var isTokenType = tokens.every(function (token) { return token instanceof Token; });\n\t    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n\t        var replaced = this.tokens.splice.apply(\n\t            this.tokens, [startIndex, offset].concat(tokens)\n\t        );\n\t        if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }\n\t        return [replaced, tokens];\n\t    } else {\n\t        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n\t    }\n\t};\n\n\t/**\n\t * Replace a token with another token\n\t * @param {number} index token index\n\t * @param {token} token a token to replace\n\t * @param {boolean} silent dispatch events and update context ranges\n\t */\n\tTokenizer.prototype.replaceToken = function (index, token, silent) {\n\t    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n\t        var replaced = this.tokens.splice(index, 1, token);\n\t        if (!silent) { this.dispatch('replaceToken', [index, token]); }\n\t        return [replaced[0], token];\n\t    } else {\n\t        return { FAIL: 'replaceToken: invalid token or index.' };\n\t    }\n\t};\n\n\t/**\n\t * Removes a range of tokens\n\t * @param {number} startIndex range start index\n\t * @param {number} offset range offset\n\t * @param {boolean} silent dispatch events and update context ranges\n\t */\n\tTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n\t    offset = !isNaN(offset) ? offset : this.tokens.length;\n\t    var tokens = this.tokens.splice(startIndex, offset);\n\t    if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }\n\t    return tokens;\n\t};\n\n\t/**\n\t * Remove a token at a certain index\n\t * @param {number} index token index\n\t * @param {boolean} silent dispatch events and update context ranges\n\t */\n\tTokenizer.prototype.removeToken = function(index, silent) {\n\t    if (!isNaN(index) && this.inboundIndex(index)) {\n\t        var token = this.tokens.splice(index, 1);\n\t        if (!silent) { this.dispatch('removeToken', [token, index]); }\n\t        return token;\n\t    } else {\n\t        return { FAIL: 'removeToken: invalid token index.' };\n\t    }\n\t};\n\n\t/**\n\t * Insert a list of tokens at a certain index\n\t * @param {array} tokens a list of tokens to insert\n\t * @param {number} index insert the list of tokens at index\n\t * @param {boolean} silent dispatch events and update context ranges\n\t */\n\tTokenizer.prototype.insertToken = function (tokens, index, silent) {\n\t    var tokenType = tokens.every(\n\t        function (token) { return token instanceof Token; }\n\t    );\n\t    if (tokenType) {\n\t        this.tokens.splice.apply(\n\t            this.tokens, [index, 0].concat(tokens)\n\t        );\n\t        if (!silent) { this.dispatch('insertToken', [tokens, index]); }\n\t        return tokens;\n\t    } else {\n\t        return { FAIL: 'insertToken: invalid token(s).' };\n\t    }\n\t};\n\n\t/**\n\t * A state modifier that is called on 'newToken' event\n\t * @param {string} modifierId state modifier id\n\t * @param {function} condition a predicate function that returns true or false\n\t * @param {function} modifier a function to update token state\n\t */\n\tTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n\t    this.events.newToken.subscribe(function(token, contextParams) {\n\t        var conditionParams = [token, contextParams];\n\t        var canApplyModifier = (\n\t            condition === null ||\n\t            condition.apply(this, conditionParams) === true\n\t        );\n\t        var modifierParams = [token, contextParams];\n\t        if (canApplyModifier) {\n\t            var newStateValue = modifier.apply(this, modifierParams);\n\t            token.setState(modifierId, newStateValue);\n\t        }\n\t    });\n\t    this.registeredModifiers.push(modifierId);\n\t};\n\n\t/**\n\t * Subscribe a handler to an event\n\t * @param {function} eventHandler an event handler function\n\t */\n\tEvent.prototype.subscribe = function (eventHandler) {\n\t    if (typeof eventHandler === 'function') {\n\t        return ((this.subscribers.push(eventHandler)) - 1);\n\t    } else {\n\t        return { FAIL: (\"invalid '\" + (this.eventId) + \"' event handler\")};\n\t    }\n\t};\n\n\t/**\n\t * Unsubscribe an event handler\n\t * @param {string} subsId subscription id\n\t */\n\tEvent.prototype.unsubscribe = function (subsId) {\n\t    this.subscribers.splice(subsId, 1);\n\t};\n\n\t/**\n\t * Sets context params current value index\n\t * @param {number} index context params current value index\n\t */\n\tContextParams.prototype.setCurrentIndex = function(index) {\n\t    this.index = index;\n\t    this.current = this.context[index];\n\t    this.backtrack = this.context.slice(0, index);\n\t    this.lookahead = this.context.slice(index + 1);\n\t};\n\n\t/**\n\t * Get an item at an offset from the current value\n\t * example (current value is 3):\n\t *  1    2   [3]   4    5   |   items values\n\t * -2   -1    0    1    2   |   offset values\n\t * @param {number} offset an offset from current value index\n\t */\n\tContextParams.prototype.get = function (offset) {\n\t    switch (true) {\n\t        case (offset === 0):\n\t            return this.current;\n\t        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n\t            return this.backtrack.slice(offset)[0];\n\t        case (offset > 0 && offset <= this.lookahead.length):\n\t            return this.lookahead[offset - 1];\n\t        default:\n\t            return null;\n\t    }\n\t};\n\n\t/**\n\t * Converts a context range into a string value\n\t * @param {contextRange} range a context range\n\t */\n\tTokenizer.prototype.rangeToText = function (range) {\n\t    if (range instanceof ContextRange) {\n\t        return (\n\t            this.getRangeTokens(range)\n\t                .map(function (token) { return token.char; }).join('')\n\t        );\n\t    }\n\t};\n\n\t/**\n\t * Converts all tokens into a string\n\t */\n\tTokenizer.prototype.getText = function () {\n\t    return this.tokens.map(function (token) { return token.char; }).join('');\n\t};\n\n\t/**\n\t * Get a context by name\n\t * @param {string} contextName context name to get\n\t */\n\tTokenizer.prototype.getContext = function (contextName) {\n\t    var context = this.registeredContexts[contextName];\n\t    return !!context ? context : null;\n\t};\n\n\t/**\n\t * Subscribes a new event handler to an event\n\t * @param {string} eventName event name to subscribe to\n\t * @param {function} eventHandler a function to be invoked on event\n\t */\n\tTokenizer.prototype.on = function(eventName, eventHandler) {\n\t    var event = this.events[eventName];\n\t    if (!!event) {\n\t        return event.subscribe(eventHandler);\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\t/**\n\t * Dispatches an event\n\t * @param {string} eventName event name\n\t * @param {any} args event handler arguments\n\t */\n\tTokenizer.prototype.dispatch = function(eventName, args) {\n\t    var this$1 = this;\n\n\t    var event = this.events[eventName];\n\t    if (event instanceof Event) {\n\t        event.subscribers.forEach(function (subscriber) {\n\t            subscriber.apply(this$1, args || []);\n\t        });\n\t    }\n\t};\n\n\t/**\n\t * Register a new context checker\n\t * @param {string} contextName a unique context name\n\t * @param {function} contextStartCheck a predicate function that returns true on context start\n\t * @param {function} contextEndCheck  a predicate function that returns true on context end\n\t * TODO: call tokenize on registration to update context ranges with the new context.\n\t */\n\tTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n\t    if (!!this.getContext(contextName)) { return {\n\t        FAIL:\n\t        (\"context name '\" + contextName + \"' is already registered.\")\n\t    }; }\n\t    if (typeof contextStartCheck !== 'function') { return {\n\t        FAIL:\n\t        \"missing context start check.\"\n\t    }; }\n\t    if (typeof contextEndCheck !== 'function') { return {\n\t        FAIL:\n\t        \"missing context end check.\"\n\t    }; }\n\t    var contextCheckers = new ContextChecker(\n\t        contextName, contextStartCheck, contextEndCheck\n\t    );\n\t    this.registeredContexts[contextName] = contextCheckers;\n\t    this.contextCheckers.push(contextCheckers);\n\t    return contextCheckers;\n\t};\n\n\t/**\n\t * Gets a context range tokens\n\t * @param {contextRange} range a context range\n\t */\n\tTokenizer.prototype.getRangeTokens = function(range) {\n\t    var endIndex = range.startIndex + range.endOffset;\n\t    return [].concat(\n\t        this.tokens\n\t            .slice(range.startIndex, endIndex)\n\t    );\n\t};\n\n\t/**\n\t * Gets the ranges of a context\n\t * @param {string} contextName context name\n\t */\n\tTokenizer.prototype.getContextRanges = function(contextName) {\n\t    var context = this.getContext(contextName);\n\t    if (!!context) {\n\t        return context.ranges;\n\t    } else {\n\t        return { FAIL: (\"context checker '\" + contextName + \"' is not registered.\") };\n\t    }\n\t};\n\n\t/**\n\t * Resets context ranges to run context update\n\t */\n\tTokenizer.prototype.resetContextsRanges = function () {\n\t    var registeredContexts = this.registeredContexts;\n\t    for (var contextName in registeredContexts) {\n\t        if (registeredContexts.hasOwnProperty(contextName)) {\n\t            var context = registeredContexts[contextName];\n\t            context.ranges = [];\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Updates context ranges\n\t */\n\tTokenizer.prototype.updateContextsRanges = function () {\n\t    this.resetContextsRanges();\n\t    var chars = this.tokens.map(function (token) { return token.char; });\n\t    for (var i = 0; i < chars.length; i++) {\n\t        var contextParams = new ContextParams(chars, i);\n\t        this.runContextCheck(contextParams);\n\t    }\n\t    this.dispatch('updateContextsRanges', [this.registeredContexts]);\n\t};\n\n\t/**\n\t * Sets the end offset of an open range\n\t * @param {number} offset range end offset\n\t * @param {string} contextName context name\n\t */\n\tTokenizer.prototype.setEndOffset = function (offset, contextName) {\n\t    var startIndex = this.getContext(contextName).openRange.startIndex;\n\t    var range = new ContextRange(startIndex, offset, contextName);\n\t    var ranges = this.getContext(contextName).ranges;\n\t    range.rangeId = contextName + \".\" + (ranges.length);\n\t    ranges.push(range);\n\t    this.getContext(contextName).openRange = null;\n\t    return range;\n\t};\n\n\t/**\n\t * Runs a context check on the current context\n\t * @param {contextParams} contextParams current context params\n\t */\n\tTokenizer.prototype.runContextCheck = function(contextParams) {\n\t    var this$1 = this;\n\n\t    var index = contextParams.index;\n\t    this.contextCheckers.forEach(function (contextChecker) {\n\t        var contextName = contextChecker.contextName;\n\t        var openRange = this$1.getContext(contextName).openRange;\n\t        if (!openRange && contextChecker.checkStart(contextParams)) {\n\t            openRange = new ContextRange(index, null, contextName);\n\t            this$1.getContext(contextName).openRange = openRange;\n\t            this$1.dispatch('contextStart', [contextName, index]);\n\t        }\n\t        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n\t            var offset = (index - openRange.startIndex) + 1;\n\t            var range = this$1.setEndOffset(offset, contextName);\n\t            this$1.dispatch('contextEnd', [contextName, range]);\n\t        }\n\t    });\n\t};\n\n\t/**\n\t * Converts a text into a list of tokens\n\t * @param {string} text a text to tokenize\n\t */\n\tTokenizer.prototype.tokenize = function (text) {\n\t    this.tokens = [];\n\t    this.resetContextsRanges();\n\t    var chars = Array.from(text);\n\t    this.dispatch('start');\n\t    for (var i = 0; i < chars.length; i++) {\n\t        var char = chars[i];\n\t        var contextParams = new ContextParams(chars, i);\n\t        this.dispatch('next', [contextParams]);\n\t        this.runContextCheck(contextParams);\n\t        var token = new Token(char);\n\t        this.tokens.push(token);\n\t        this.dispatch('newToken', [token, contextParams]);\n\t    }\n\t    this.dispatch('end', [this.tokens]);\n\t    return this.tokens;\n\t};\n\n\t// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n\t// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n\t// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n\t// jscs:disable maximumLineLength\n\t/**\n\t * Check if a char is Arabic\n\t * @param {string} c a single char\n\t */\n\tfunction isArabicChar(c) {\n\t    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n\t}\n\n\t/**\n\t * Check if a char is an isolated arabic char\n\t * @param {string} c a single char\n\t */\n\tfunction isIsolatedArabicChar(char) {\n\t    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n\t}\n\n\t/**\n\t * Check if a char is an Arabic Tashkeel char\n\t * @param {string} c a single char\n\t */\n\tfunction isTashkeelArabicChar(char) {\n\t    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n\t}\n\n\t/**\n\t * Check if a char is Latin\n\t * @param {string} c a single char\n\t */\n\tfunction isLatinChar(c) {\n\t    return /[A-z]/.test(c);\n\t}\n\n\t/**\n\t * Check if a char is whitespace char\n\t * @param {string} c a single char\n\t */\n\tfunction isWhiteSpace(c) {\n\t    return /\\s/.test(c);\n\t}\n\n\t/**\n\t * Query a feature by some of it's properties to lookup a glyph substitution.\n\t */\n\n\t/**\n\t * Create feature query instance\n\t * @param {Font} font opentype font instance\n\t */\n\tfunction FeatureQuery(font) {\n\t    this.font = font;\n\t    this.features = {};\n\t}\n\n\t/**\n\t * @typedef SubstitutionAction\n\t * @type Object\n\t * @property {number} id substitution type\n\t * @property {string} tag feature tag\n\t * @property {any} substitution substitution value(s)\n\t */\n\n\t/**\n\t * Create a substitution action instance\n\t * @param {SubstitutionAction} action\n\t */\n\tfunction SubstitutionAction(action) {\n\t    this.id = action.id;\n\t    this.tag = action.tag;\n\t    this.substitution = action.substitution;\n\t}\n\n\t/**\n\t * Lookup a coverage table\n\t * @param {number} glyphIndex glyph index\n\t * @param {CoverageTable} coverage coverage table\n\t */\n\tfunction lookupCoverage(glyphIndex, coverage) {\n\t    if (!glyphIndex) { return -1; }\n\t    switch (coverage.format) {\n\t        case 1:\n\t            return coverage.glyphs.indexOf(glyphIndex);\n\n\t        case 2:\n\t            var ranges = coverage.ranges;\n\t            for (var i = 0; i < ranges.length; i++) {\n\t                var range = ranges[i];\n\t                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n\t                    var offset = glyphIndex - range.start;\n\t                    return range.index + offset;\n\t                }\n\t            }\n\t            break;\n\t        default:\n\t            return -1; // not found\n\t    }\n\t    return -1;\n\t}\n\n\t/**\n\t * Handle a single substitution - format 1\n\t * @param {ContextParams} contextParams context params to lookup\n\t */\n\tfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n\t    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n\t    if (substituteIndex === -1) { return null; }\n\t    return glyphIndex + subtable.deltaGlyphId;\n\t}\n\n\t/**\n\t * Handle a single substitution - format 2\n\t * @param {ContextParams} contextParams context params to lookup\n\t */\n\tfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n\t    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n\t    if (substituteIndex === -1) { return null; }\n\t    return subtable.substitute[substituteIndex];\n\t}\n\n\t/**\n\t * Lookup a list of coverage tables\n\t * @param {any} coverageList a list of coverage tables\n\t * @param {ContextParams} contextParams context params to lookup\n\t */\n\tfunction lookupCoverageList(coverageList, contextParams) {\n\t    var lookupList = [];\n\t    for (var i = 0; i < coverageList.length; i++) {\n\t        var coverage = coverageList[i];\n\t        var glyphIndex = contextParams.current;\n\t        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n\t        var lookupIndex = lookupCoverage(glyphIndex, coverage);\n\t        if (lookupIndex !== -1) {\n\t            lookupList.push(lookupIndex);\n\t        }\n\t    }\n\t    if (lookupList.length !== coverageList.length) { return -1; }\n\t    return lookupList;\n\t}\n\n\t/**\n\t * Handle chaining context substitution - format 3\n\t * @param {ContextParams} contextParams context params to lookup\n\t */\n\tfunction chainingSubstitutionFormat3(contextParams, subtable) {\n\t    var lookupsCount = (\n\t        subtable.inputCoverage.length +\n\t        subtable.lookaheadCoverage.length +\n\t        subtable.backtrackCoverage.length\n\t    );\n\t    if (contextParams.context.length < lookupsCount) { return []; }\n\t    // INPUT LOOKUP //\n\t    var inputLookups = lookupCoverageList(\n\t        subtable.inputCoverage, contextParams\n\t    );\n\t    if (inputLookups === -1) { return []; }\n\t    // LOOKAHEAD LOOKUP //\n\t    var lookaheadOffset = subtable.inputCoverage.length - 1;\n\t    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }\n\t    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n\t    while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {\n\t        lookaheadContext.shift();\n\t    }\n\t    var lookaheadParams = new ContextParams(lookaheadContext, 0);\n\t    var lookaheadLookups = lookupCoverageList(\n\t        subtable.lookaheadCoverage, lookaheadParams\n\t    );\n\t    // BACKTRACK LOOKUP //\n\t    var backtrackContext = [].concat(contextParams.backtrack);\n\t    backtrackContext.reverse();\n\t    while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {\n\t        backtrackContext.shift();\n\t    }\n\t    if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }\n\t    var backtrackParams = new ContextParams(backtrackContext, 0);\n\t    var backtrackLookups = lookupCoverageList(\n\t        subtable.backtrackCoverage, backtrackParams\n\t    );\n\t    var contextRulesMatch = (\n\t        inputLookups.length === subtable.inputCoverage.length &&\n\t        lookaheadLookups.length === subtable.lookaheadCoverage.length &&\n\t        backtrackLookups.length === subtable.backtrackCoverage.length\n\t    );\n\t    var substitutions = [];\n\t    if (contextRulesMatch) {\n\t        for (var i = 0; i < subtable.lookupRecords.length; i++) {\n\t            var lookupRecord = subtable.lookupRecords[i];\n\t            var lookupListIndex = lookupRecord.lookupListIndex;\n\t            var lookupTable = this.getLookupByIndex(lookupListIndex);\n\t            for (var s = 0; s < lookupTable.subtables.length; s++) {\n\t                var subtable$1 = lookupTable.subtables[s];\n\t                var lookup = this.getLookupMethod(lookupTable, subtable$1);\n\t                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n\t                if (substitutionType === '12') {\n\t                    for (var n = 0; n < inputLookups.length; n++) {\n\t                        var glyphIndex = contextParams.get(n);\n\t                        var substitution = lookup(glyphIndex);\n\t                        if (substitution) { substitutions.push(substitution); }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return substitutions;\n\t}\n\n\t/**\n\t * Handle ligature substitution - format 1\n\t * @param {ContextParams} contextParams context params to lookup\n\t */\n\tfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n\t    // COVERAGE LOOKUP //\n\t    var glyphIndex = contextParams.current;\n\t    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n\t    if (ligSetIndex === -1) { return null; }\n\t    // COMPONENTS LOOKUP\n\t    // (!) note, components are ordered in the written direction.\n\t    var ligature;\n\t    var ligatureSet = subtable.ligatureSets[ligSetIndex];\n\t    for (var s = 0; s < ligatureSet.length; s++) {\n\t        ligature = ligatureSet[s];\n\t        for (var l = 0; l < ligature.components.length; l++) {\n\t            var lookaheadItem = contextParams.lookahead[l];\n\t            var component = ligature.components[l];\n\t            if (lookaheadItem !== component) { break; }\n\t            if (l === ligature.components.length - 1) { return ligature; }\n\t        }\n\t    }\n\t    return null;\n\t}\n\n\t/**\n\t * Handle decomposition substitution - format 1\n\t * @param {number} glyphIndex glyph index\n\t * @param {any} subtable subtable\n\t */\n\tfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n\t    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n\t    if (substituteIndex === -1) { return null; }\n\t    return subtable.sequences[substituteIndex];\n\t}\n\n\t/**\n\t * Get default script features indexes\n\t */\n\tFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {\n\t    var scripts = this.font.tables.gsub.scripts;\n\t    for (var s = 0; s < scripts.length; s++) {\n\t        var script = scripts[s];\n\t        if (script.tag === 'DFLT') { return (\n\t            script.script.defaultLangSys.featureIndexes\n\t        ); }\n\t    }\n\t    return [];\n\t};\n\n\t/**\n\t * Get feature indexes of a specific script\n\t * @param {string} scriptTag script tag\n\t */\n\tFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n\t    var tables = this.font.tables;\n\t    if (!tables.gsub) { return []; }\n\t    if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }\n\t    var scripts = this.font.tables.gsub.scripts;\n\t    for (var i = 0; i < scripts.length; i++) {\n\t        var script = scripts[i];\n\t        if (script.tag === scriptTag && script.script.defaultLangSys) {\n\t            return script.script.defaultLangSys.featureIndexes;\n\t        } else {\n\t            var langSysRecords = script.langSysRecords;\n\t            if (!!langSysRecords) {\n\t                for (var j = 0; j < langSysRecords.length; j++) {\n\t                    var langSysRecord = langSysRecords[j];\n\t                    if (langSysRecord.tag === scriptTag) {\n\t                        var langSys = langSysRecord.langSys;\n\t                        return langSys.featureIndexes;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return this.getDefaultScriptFeaturesIndexes();\n\t};\n\n\t/**\n\t * Map a feature tag to a gsub feature\n\t * @param {any} features gsub features\n\t * @param {string} scriptTag script tag\n\t */\n\tFeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n\t    var tags = {};\n\t    for (var i = 0; i < features.length; i++) {\n\t        var tag = features[i].tag;\n\t        var feature = features[i].feature;\n\t        tags[tag] = feature;\n\t    }\n\t    this.features[scriptTag].tags = tags;\n\t};\n\n\t/**\n\t * Get features of a specific script\n\t * @param {string} scriptTag script tag\n\t */\n\tFeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n\t    var features = this.features[scriptTag];\n\t    if (this.features.hasOwnProperty(scriptTag)) { return features; }\n\t    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n\t    if (!featuresIndexes) { return null; }\n\t    var gsub = this.font.tables.gsub;\n\t    features = featuresIndexes.map(function (index) { return gsub.features[index]; });\n\t    this.features[scriptTag] = features;\n\t    this.mapTagsToFeatures(features, scriptTag);\n\t    return features;\n\t};\n\n\t/**\n\t * Get substitution type\n\t * @param {any} lookupTable lookup table\n\t * @param {any} subtable subtable\n\t */\n\tFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n\t    var lookupType = lookupTable.lookupType.toString();\n\t    var substFormat = subtable.substFormat.toString();\n\t    return lookupType + substFormat;\n\t};\n\n\t/**\n\t * Get lookup method\n\t * @param {any} lookupTable lookup table\n\t * @param {any} subtable subtable\n\t */\n\tFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n\t    var this$1 = this;\n\n\t    var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n\t    switch (substitutionType) {\n\t        case '11':\n\t            return function (glyphIndex) { return singleSubstitutionFormat1.apply(\n\t                this$1, [glyphIndex, subtable]\n\t            ); };\n\t        case '12':\n\t            return function (glyphIndex) { return singleSubstitutionFormat2.apply(\n\t                this$1, [glyphIndex, subtable]\n\t            ); };\n\t        case '63':\n\t            return function (contextParams) { return chainingSubstitutionFormat3.apply(\n\t                this$1, [contextParams, subtable]\n\t            ); };\n\t        case '41':\n\t            return function (contextParams) { return ligatureSubstitutionFormat1.apply(\n\t                this$1, [contextParams, subtable]\n\t            ); };\n\t        case '21':\n\t            return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(\n\t                this$1, [glyphIndex, subtable]\n\t            ); };\n\t        default:\n\t            throw new Error(\n\t                \"lookupType: \" + (lookupTable.lookupType) + \" - \" +\n\t                \"substFormat: \" + (subtable.substFormat) + \" \" +\n\t                \"is not yet supported\"\n\t            );\n\t    }\n\t};\n\n\t/**\n\t * [ LOOKUP TYPES ]\n\t * -------------------------------\n\t * Single                        1;\n\t * Multiple                      2;\n\t * Alternate                     3;\n\t * Ligature                      4;\n\t * Context                       5;\n\t * ChainingContext               6;\n\t * ExtensionSubstitution         7;\n\t * ReverseChainingContext        8;\n\t * -------------------------------\n\t *\n\t */\n\n\t/**\n\t * @typedef FQuery\n\t * @type Object\n\t * @param {string} tag feature tag\n\t * @param {string} script feature script\n\t * @param {ContextParams} contextParams context params\n\t */\n\n\t/**\n\t * Lookup a feature using a query parameters\n\t * @param {FQuery} query feature query\n\t */\n\tFeatureQuery.prototype.lookupFeature = function (query) {\n\t    var contextParams = query.contextParams;\n\t    var currentIndex = contextParams.index;\n\t    var feature = this.getFeature({\n\t        tag: query.tag, script: query.script\n\t    });\n\t    if (!feature) { return new Error(\n\t        \"font '\" + (this.font.names.fullName.en) + \"' \" +\n\t        \"doesn't support feature '\" + (query.tag) + \"' \" +\n\t        \"for script '\" + (query.script) + \"'.\"\n\t    ); }\n\t    var lookups = this.getFeatureLookups(feature);\n\t    var substitutions = [].concat(contextParams.context);\n\t    for (var l = 0; l < lookups.length; l++) {\n\t        var lookupTable = lookups[l];\n\t        var subtables = this.getLookupSubtables(lookupTable);\n\t        for (var s = 0; s < subtables.length; s++) {\n\t            var subtable = subtables[s];\n\t            var substType = this.getSubstitutionType(lookupTable, subtable);\n\t            var lookup = this.getLookupMethod(lookupTable, subtable);\n\t            var substitution = (void 0);\n\t            switch (substType) {\n\t                case '11':\n\t                    substitution = lookup(contextParams.current);\n\t                    if (substitution) {\n\t                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n\t                            id: 11, tag: query.tag, substitution: substitution\n\t                        }));\n\t                    }\n\t                    break;\n\t                case '12':\n\t                    substitution = lookup(contextParams.current);\n\t                    if (substitution) {\n\t                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n\t                            id: 12, tag: query.tag, substitution: substitution\n\t                        }));\n\t                    }\n\t                    break;\n\t                case '63':\n\t                    substitution = lookup(contextParams);\n\t                    if (Array.isArray(substitution) && substitution.length) {\n\t                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n\t                            id: 63, tag: query.tag, substitution: substitution\n\t                        }));\n\t                    }\n\t                    break;\n\t                case '41':\n\t                    substitution = lookup(contextParams);\n\t                    if (substitution) {\n\t                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n\t                            id: 41, tag: query.tag, substitution: substitution\n\t                        }));\n\t                    }\n\t                    break;\n\t                case '21':\n\t                    substitution = lookup(contextParams.current);\n\t                    if (substitution) {\n\t                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n\t                            id: 21, tag: query.tag, substitution: substitution\n\t                        }));\n\t                    }\n\t                    break;\n\t            }\n\t            contextParams = new ContextParams(substitutions, currentIndex);\n\t            if (Array.isArray(substitution) && !substitution.length) { continue; }\n\t            substitution = null;\n\t        }\n\t    }\n\t    return substitutions.length ? substitutions : null;\n\t};\n\n\t/**\n\t * Checks if a font supports a specific features\n\t * @param {FQuery} query feature query object\n\t */\n\tFeatureQuery.prototype.supports = function (query) {\n\t    if (!query.script) { return false; }\n\t    this.getScriptFeatures(query.script);\n\t    var supportedScript = this.features.hasOwnProperty(query.script);\n\t    if (!query.tag) { return supportedScript; }\n\t    var supportedFeature = (\n\t        this.features[query.script].some(function (feature) { return feature.tag === query.tag; })\n\t    );\n\t    return supportedScript && supportedFeature;\n\t};\n\n\t/**\n\t * Get lookup table subtables\n\t * @param {any} lookupTable lookup table\n\t */\n\tFeatureQuery.prototype.getLookupSubtables = function (lookupTable) {\n\t    return lookupTable.subtables || null;\n\t};\n\n\t/**\n\t * Get lookup table by index\n\t * @param {number} index lookup table index\n\t */\n\tFeatureQuery.prototype.getLookupByIndex = function (index) {\n\t    var lookups = this.font.tables.gsub.lookups;\n\t    return lookups[index] || null;\n\t};\n\n\t/**\n\t * Get lookup tables for a feature\n\t * @param {string} feature\n\t */\n\tFeatureQuery.prototype.getFeatureLookups = function (feature) {\n\t    // TODO: memoize\n\t    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n\t};\n\n\t/**\n\t * Query a feature by it's properties\n\t * @param {any} query an object that describes the properties of a query\n\t */\n\tFeatureQuery.prototype.getFeature = function getFeature(query) {\n\t    if (!this.font) { return { FAIL: \"No font was found\"}; }\n\t    if (!this.features.hasOwnProperty(query.script)) {\n\t        this.getScriptFeatures(query.script);\n\t    }\n\t    var scriptFeatures = this.features[query.script];\n\t    if (!scriptFeatures) { return (\n\t        { FAIL: (\"No feature for script \" + (query.script))}\n\t    ); }\n\t    if (!scriptFeatures.tags[query.tag]) { return null; }\n\t    return this.features[query.script].tags[query.tag];\n\t};\n\n\t/**\n\t * Arabic word context checkers\n\t */\n\n\tfunction arabicWordStartCheck(contextParams) {\n\t    var char = contextParams.current;\n\t    var prevChar = contextParams.get(-1);\n\t    return (\n\t        // ? arabic first char\n\t        (prevChar === null && isArabicChar(char)) ||\n\t        // ? arabic char preceded with a non arabic char\n\t        (!isArabicChar(prevChar) && isArabicChar(char))\n\t    );\n\t}\n\n\tfunction arabicWordEndCheck(contextParams) {\n\t    var nextChar = contextParams.get(1);\n\t    return (\n\t        // ? last arabic char\n\t        (nextChar === null) ||\n\t        // ? next char is not arabic\n\t        (!isArabicChar(nextChar))\n\t    );\n\t}\n\n\tvar arabicWordCheck = {\n\t    startCheck: arabicWordStartCheck,\n\t    endCheck: arabicWordEndCheck\n\t};\n\n\t/**\n\t * Arabic sentence context checkers\n\t */\n\n\tfunction arabicSentenceStartCheck(contextParams) {\n\t    var char = contextParams.current;\n\t    var prevChar = contextParams.get(-1);\n\t    return (\n\t        // ? an arabic char preceded with a non arabic char\n\t        (isArabicChar(char) || isTashkeelArabicChar(char)) &&\n\t        !isArabicChar(prevChar)\n\t    );\n\t}\n\n\tfunction arabicSentenceEndCheck(contextParams) {\n\t    var nextChar = contextParams.get(1);\n\t    switch (true) {\n\t        case nextChar === null:\n\t            return true;\n\t        case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):\n\t            var nextIsWhitespace = isWhiteSpace(nextChar);\n\t            if (!nextIsWhitespace) { return true; }\n\t            if (nextIsWhitespace) {\n\t                var arabicCharAhead = false;\n\t                arabicCharAhead = (\n\t                    contextParams.lookahead.some(\n\t                        function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }\n\t                    )\n\t                );\n\t                if (!arabicCharAhead) { return true; }\n\t            }\n\t            break;\n\t        default:\n\t            return false;\n\t    }\n\t}\n\n\tvar arabicSentenceCheck = {\n\t    startCheck: arabicSentenceStartCheck,\n\t    endCheck: arabicSentenceEndCheck\n\t};\n\n\t/**\n\t * Apply single substitution format 1\n\t * @param {Array} substitutions substitutions\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index token index\n\t */\n\tfunction singleSubstitutionFormat1$1(action, tokens, index) {\n\t    tokens[index].setState(action.tag, action.substitution);\n\t}\n\n\t/**\n\t * Apply single substitution format 2\n\t * @param {Array} substitutions substitutions\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index token index\n\t */\n\tfunction singleSubstitutionFormat2$1(action, tokens, index) {\n\t    tokens[index].setState(action.tag, action.substitution);\n\t}\n\n\t/**\n\t * Apply chaining context substitution format 3\n\t * @param {Array} substitutions substitutions\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index token index\n\t */\n\tfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n\t    action.substitution.forEach(function (subst, offset) {\n\t        var token = tokens[index + offset];\n\t        token.setState(action.tag, subst);\n\t    });\n\t}\n\n\t/**\n\t * Apply ligature substitution format 1\n\t * @param {Array} substitutions substitutions\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index token index\n\t */\n\tfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n\t    var token = tokens[index];\n\t    token.setState(action.tag, action.substitution.ligGlyph);\n\t    var compsCount = action.substitution.components.length;\n\t    for (var i = 0; i < compsCount; i++) {\n\t        token = tokens[index + i + 1];\n\t        token.setState('deleted', true);\n\t    }\n\t}\n\n\t/**\n\t * Supported substitutions\n\t */\n\tvar SUBSTITUTIONS = {\n\t    11: singleSubstitutionFormat1$1,\n\t    12: singleSubstitutionFormat2$1,\n\t    63: chainingSubstitutionFormat3$1,\n\t    41: ligatureSubstitutionFormat1$1\n\t};\n\n\t/**\n\t * Apply substitutions to a list of tokens\n\t * @param {Array} substitutions substitutions\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index token index\n\t */\n\tfunction applySubstitution(action, tokens, index) {\n\t    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n\t        SUBSTITUTIONS[action.id](action, tokens, index);\n\t    }\n\t}\n\n\t/**\n\t * Apply Arabic presentation forms to a range of tokens\n\t */\n\n\t/**\n\t * Check if a char can be connected to it's preceding char\n\t * @param {ContextParams} charContextParams context params of a char\n\t */\n\tfunction willConnectPrev(charContextParams) {\n\t    var backtrack = [].concat(charContextParams.backtrack);\n\t    for (var i = backtrack.length - 1; i >= 0; i--) {\n\t        var prevChar = backtrack[i];\n\t        var isolated = isIsolatedArabicChar(prevChar);\n\t        var tashkeel = isTashkeelArabicChar(prevChar);\n\t        if (!isolated && !tashkeel) { return true; }\n\t        if (isolated) { return false; }\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * Check if a char can be connected to it's proceeding char\n\t * @param {ContextParams} charContextParams context params of a char\n\t */\n\tfunction willConnectNext(charContextParams) {\n\t    if (isIsolatedArabicChar(charContextParams.current)) { return false; }\n\t    for (var i = 0; i < charContextParams.lookahead.length; i++) {\n\t        var nextChar = charContextParams.lookahead[i];\n\t        var tashkeel = isTashkeelArabicChar(nextChar);\n\t        if (!tashkeel) { return true; }\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * Apply arabic presentation forms to a list of tokens\n\t * @param {ContextRange} range a range of tokens\n\t */\n\tfunction arabicPresentationForms(range) {\n\t    var this$1 = this;\n\n\t    var script = 'arab';\n\t    var tags = this.featuresTags[script];\n\t    var tokens = this.tokenizer.getRangeTokens(range);\n\t    if (tokens.length === 1) { return; }\n\t    var contextParams = new ContextParams(\n\t        tokens.map(function (token) { return token.getState('glyphIndex'); }\n\t    ), 0);\n\t    var charContextParams = new ContextParams(\n\t        tokens.map(function (token) { return token.char; }\n\t    ), 0);\n\t    tokens.forEach(function (token, index) {\n\t        if (isTashkeelArabicChar(token.char)) { return; }\n\t        contextParams.setCurrentIndex(index);\n\t        charContextParams.setCurrentIndex(index);\n\t        var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n\t        if (willConnectPrev(charContextParams)) { CONNECT |= 1; }\n\t        if (willConnectNext(charContextParams)) { CONNECT |= 2; }\n\t        var tag;\n\t        switch (CONNECT) {\n\t            case 1: (tag = 'fina'); break;\n\t            case 2: (tag = 'init'); break;\n\t            case 3: (tag = 'medi'); break;\n\t        }\n\t        if (tags.indexOf(tag) === -1) { return; }\n\t        var substitutions = this$1.query.lookupFeature({\n\t            tag: tag, script: script, contextParams: contextParams\n\t        });\n\t        if (substitutions instanceof Error) { return console.info(substitutions.message); }\n\t        substitutions.forEach(function (action, index) {\n\t            if (action instanceof SubstitutionAction) {\n\t                applySubstitution(action, tokens, index);\n\t                contextParams.context[index] = action.substitution;\n\t            }\n\t        });\n\t    });\n\t}\n\n\t/**\n\t * Apply Arabic required ligatures feature to a range of tokens\n\t */\n\n\t/**\n\t * Update context params\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index current item index\n\t */\n\tfunction getContextParams(tokens, index) {\n\t    var context = tokens.map(function (token) { return token.activeState.value; });\n\t    return new ContextParams(context, index || 0);\n\t}\n\n\t/**\n\t * Apply Arabic required ligatures to a context range\n\t * @param {ContextRange} range a range of tokens\n\t */\n\tfunction arabicRequiredLigatures(range) {\n\t    var this$1 = this;\n\n\t    var script = 'arab';\n\t    var tokens = this.tokenizer.getRangeTokens(range);\n\t    var contextParams = getContextParams(tokens);\n\t    contextParams.context.forEach(function (glyphIndex, index) {\n\t        contextParams.setCurrentIndex(index);\n\t        var substitutions = this$1.query.lookupFeature({\n\t            tag: 'rlig', script: script, contextParams: contextParams\n\t        });\n\t        if (substitutions.length) {\n\t            substitutions.forEach(\n\t                function (action) { return applySubstitution(action, tokens, index); }\n\t            );\n\t            contextParams = getContextParams(tokens);\n\t        }\n\t    });\n\t}\n\n\t/**\n\t * Latin word context checkers\n\t */\n\n\tfunction latinWordStartCheck(contextParams) {\n\t    var char = contextParams.current;\n\t    var prevChar = contextParams.get(-1);\n\t    return (\n\t        // ? latin first char\n\t        (prevChar === null && isLatinChar(char)) ||\n\t        // ? latin char preceded with a non latin char\n\t        (!isLatinChar(prevChar) && isLatinChar(char))\n\t    );\n\t}\n\n\tfunction latinWordEndCheck(contextParams) {\n\t    var nextChar = contextParams.get(1);\n\t    return (\n\t        // ? last latin char\n\t        (nextChar === null) ||\n\t        // ? next char is not latin\n\t        (!isLatinChar(nextChar))\n\t    );\n\t}\n\n\tvar latinWordCheck = {\n\t    startCheck: latinWordStartCheck,\n\t    endCheck: latinWordEndCheck\n\t};\n\n\t/**\n\t * Apply Latin ligature feature to a range of tokens\n\t */\n\n\t/**\n\t * Update context params\n\t * @param {any} tokens a list of tokens\n\t * @param {number} index current item index\n\t */\n\tfunction getContextParams$1(tokens, index) {\n\t    var context = tokens.map(function (token) { return token.activeState.value; });\n\t    return new ContextParams(context, index || 0);\n\t}\n\n\t/**\n\t * Apply Arabic required ligatures to a context range\n\t * @param {ContextRange} range a range of tokens\n\t */\n\tfunction latinLigature(range) {\n\t    var this$1 = this;\n\n\t    var script = 'latn';\n\t    var tokens = this.tokenizer.getRangeTokens(range);\n\t    var contextParams = getContextParams$1(tokens);\n\t    contextParams.context.forEach(function (glyphIndex, index) {\n\t        contextParams.setCurrentIndex(index);\n\t        var substitutions = this$1.query.lookupFeature({\n\t            tag: 'liga', script: script, contextParams: contextParams\n\t        });\n\t        if (substitutions.length) {\n\t            substitutions.forEach(\n\t                function (action) { return applySubstitution(action, tokens, index); }\n\t            );\n\t            contextParams = getContextParams$1(tokens);\n\t        }\n\t    });\n\t}\n\n\t/**\n\t * Infer bidirectional properties for a given text and apply\n\t * the corresponding layout rules.\n\t */\n\n\t/**\n\t * Create Bidi. features\n\t * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n\t */\n\tfunction Bidi(baseDir) {\n\t    this.baseDir = baseDir || 'ltr';\n\t    this.tokenizer = new Tokenizer();\n\t    this.featuresTags = {};\n\t}\n\n\t/**\n\t * Sets Bidi text\n\t * @param {string} text a text input\n\t */\n\tBidi.prototype.setText = function (text) {\n\t    this.text = text;\n\t};\n\n\t/**\n\t * Store essential context checks:\n\t * arabic word check for applying gsub features\n\t * arabic sentence check for adjusting arabic layout\n\t */\n\tBidi.prototype.contextChecks = ({\n\t    latinWordCheck: latinWordCheck,\n\t    arabicWordCheck: arabicWordCheck,\n\t    arabicSentenceCheck: arabicSentenceCheck\n\t});\n\n\t/**\n\t * Register arabic word check\n\t */\n\tfunction registerContextChecker(checkId) {\n\t    var check = this.contextChecks[(checkId + \"Check\")];\n\t    return this.tokenizer.registerContextChecker(\n\t        checkId, check.startCheck, check.endCheck\n\t    );\n\t}\n\n\t/**\n\t * Perform pre tokenization procedure then\n\t * tokenize text input\n\t */\n\tfunction tokenizeText() {\n\t    registerContextChecker.call(this, 'latinWord');\n\t    registerContextChecker.call(this, 'arabicWord');\n\t    registerContextChecker.call(this, 'arabicSentence');\n\t    return this.tokenizer.tokenize(this.text);\n\t}\n\n\t/**\n\t * Reverse arabic sentence layout\n\t * TODO: check base dir before applying adjustments - priority low\n\t */\n\tfunction reverseArabicSentences() {\n\t    var this$1 = this;\n\n\t    var ranges = this.tokenizer.getContextRanges('arabicSentence');\n\t    ranges.forEach(function (range) {\n\t        var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n\t        this$1.tokenizer.replaceRange(\n\t            range.startIndex,\n\t            range.endOffset,\n\t            rangeTokens.reverse()\n\t        );\n\t    });\n\t}\n\n\t/**\n\t * Register supported features tags\n\t * @param {script} script script tag\n\t * @param {Array} tags features tags list\n\t */\n\tBidi.prototype.registerFeatures = function (script, tags) {\n\t    var this$1 = this;\n\n\t    var supportedTags = tags.filter(\n\t        function (tag) { return this$1.query.supports({script: script, tag: tag}); }\n\t    );\n\t    if (!this.featuresTags.hasOwnProperty(script)) {\n\t        this.featuresTags[script] = supportedTags;\n\t    } else {\n\t        this.featuresTags[script] =\n\t        this.featuresTags[script].concat(supportedTags);\n\t    }\n\t};\n\n\t/**\n\t * Apply GSUB features\n\t * @param {Array} tagsList a list of features tags\n\t * @param {string} script a script tag\n\t * @param {Font} font opentype font instance\n\t */\n\tBidi.prototype.applyFeatures = function (font, features) {\n\t    if (!font) { throw new Error(\n\t        'No valid font was provided to apply features'\n\t    ); }\n\t    if (!this.query) { this.query = new FeatureQuery(font); }\n\t    for (var f = 0; f < features.length; f++) {\n\t        var feature = features[f];\n\t        if (!this.query.supports({script: feature.script})) { continue; }\n\t        this.registerFeatures(feature.script, feature.tags);\n\t    }\n\t};\n\n\t/**\n\t * Register a state modifier\n\t * @param {string} modifierId state modifier id\n\t * @param {function} condition a predicate function that returns true or false\n\t * @param {function} modifier a modifier function to set token state\n\t */\n\tBidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n\t    this.tokenizer.registerModifier(modifierId, condition, modifier);\n\t};\n\n\t/**\n\t * Check if 'glyphIndex' is registered\n\t */\n\tfunction checkGlyphIndexStatus() {\n\t    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n\t        throw new Error(\n\t            'glyphIndex modifier is required to apply ' +\n\t            'arabic presentation features.'\n\t        );\n\t    }\n\t}\n\n\t/**\n\t * Apply arabic presentation forms features\n\t */\n\tfunction applyArabicPresentationForms() {\n\t    var this$1 = this;\n\n\t    var script = 'arab';\n\t    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n\t    checkGlyphIndexStatus.call(this);\n\t    var ranges = this.tokenizer.getContextRanges('arabicWord');\n\t    ranges.forEach(function (range) {\n\t        arabicPresentationForms.call(this$1, range);\n\t    });\n\t}\n\n\t/**\n\t * Apply required arabic ligatures\n\t */\n\tfunction applyArabicRequireLigatures() {\n\t    var this$1 = this;\n\n\t    var script = 'arab';\n\t    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n\t    var tags = this.featuresTags[script];\n\t    if (tags.indexOf('rlig') === -1) { return; }\n\t    checkGlyphIndexStatus.call(this);\n\t    var ranges = this.tokenizer.getContextRanges('arabicWord');\n\t    ranges.forEach(function (range) {\n\t        arabicRequiredLigatures.call(this$1, range);\n\t    });\n\t}\n\n\t/**\n\t * Apply required arabic ligatures\n\t */\n\tfunction applyLatinLigatures() {\n\t    var this$1 = this;\n\n\t    var script = 'latn';\n\t    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n\t    var tags = this.featuresTags[script];\n\t    if (tags.indexOf('liga') === -1) { return; }\n\t    checkGlyphIndexStatus.call(this);\n\t    var ranges = this.tokenizer.getContextRanges('latinWord');\n\t    ranges.forEach(function (range) {\n\t        latinLigature.call(this$1, range);\n\t    });\n\t}\n\n\t/**\n\t * Check if a context is registered\n\t * @param {string} contextId context id\n\t */\n\tBidi.prototype.checkContextReady = function (contextId) {\n\t    return !!this.tokenizer.getContext(contextId);\n\t};\n\n\t/**\n\t * Apply features to registered contexts\n\t */\n\tBidi.prototype.applyFeaturesToContexts = function () {\n\t    if (this.checkContextReady('arabicWord')) {\n\t        applyArabicPresentationForms.call(this);\n\t        applyArabicRequireLigatures.call(this);\n\t    }\n\t    if (this.checkContextReady('latinWord')) {\n\t        applyLatinLigatures.call(this);\n\t    }\n\t    if (this.checkContextReady('arabicSentence')) {\n\t        reverseArabicSentences.call(this);\n\t    }\n\t};\n\n\t/**\n\t * process text input\n\t * @param {string} text an input text\n\t */\n\tBidi.prototype.processText = function(text) {\n\t    if (!this.text || this.text !== text) {\n\t        this.setText(text);\n\t        tokenizeText.call(this);\n\t        this.applyFeaturesToContexts();\n\t    }\n\t};\n\n\t/**\n\t * Process a string of text to identify and adjust\n\t * bidirectional text entities.\n\t * @param {string} text input text\n\t */\n\tBidi.prototype.getBidiText = function (text) {\n\t    this.processText(text);\n\t    return this.tokenizer.getText();\n\t};\n\n\t/**\n\t * Get the current state index of each token\n\t * @param {text} text an input text\n\t */\n\tBidi.prototype.getTextGlyphs = function (text) {\n\t    this.processText(text);\n\t    var indexes = [];\n\t    for (var i = 0; i < this.tokenizer.tokens.length; i++) {\n\t        var token = this.tokenizer.tokens[i];\n\t        if (token.state.deleted) { continue; }\n\t        var index = token.activeState.value;\n\t        indexes.push(Array.isArray(index) ? index[0] : index);\n\t    }\n\t    return indexes;\n\t};\n\n\t// The Font object\n\n\t/**\n\t * @typedef FontOptions\n\t * @type Object\n\t * @property {Boolean} empty - whether to create a new empty font\n\t * @property {string} familyName\n\t * @property {string} styleName\n\t * @property {string=} fullName\n\t * @property {string=} postScriptName\n\t * @property {string=} designer\n\t * @property {string=} designerURL\n\t * @property {string=} manufacturer\n\t * @property {string=} manufacturerURL\n\t * @property {string=} license\n\t * @property {string=} licenseURL\n\t * @property {string=} version\n\t * @property {string=} description\n\t * @property {string=} copyright\n\t * @property {string=} trademark\n\t * @property {Number} unitsPerEm\n\t * @property {Number} ascender\n\t * @property {Number} descender\n\t * @property {Number} createdTimestamp\n\t * @property {string=} weightClass\n\t * @property {string=} widthClass\n\t * @property {string=} fsSelection\n\t */\n\n\t/**\n\t * A Font represents a loaded OpenType font file.\n\t * It contains a set of glyphs and methods to draw text on a drawing context,\n\t * or to get a path representing the text.\n\t * @exports opentype.Font\n\t * @class\n\t * @param {FontOptions}\n\t * @constructor\n\t */\n\tfunction Font(options) {\n\t    options = options || {};\n\t    options.tables = options.tables || {};\n\n\t    if (!options.empty) {\n\t        // Check that we've provided the minimum set of names.\n\t        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n\t        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n\t        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n\t        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n\t        checkArgument(options.descender <= 0, 'When creating a new Font object, negative descender value is required.');\n\n\t        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n\t        this.names = {\n\t            fontFamily: {en: options.familyName || ' '},\n\t            fontSubfamily: {en: options.styleName || ' '},\n\t            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n\t            // postScriptName may not contain any whitespace\n\t            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\\s/g, '')},\n\t            designer: {en: options.designer || ' '},\n\t            designerURL: {en: options.designerURL || ' '},\n\t            manufacturer: {en: options.manufacturer || ' '},\n\t            manufacturerURL: {en: options.manufacturerURL || ' '},\n\t            license: {en: options.license || ' '},\n\t            licenseURL: {en: options.licenseURL || ' '},\n\t            version: {en: options.version || 'Version 0.1'},\n\t            description: {en: options.description || ' '},\n\t            copyright: {en: options.copyright || ' '},\n\t            trademark: {en: options.trademark || ' '}\n\t        };\n\t        this.unitsPerEm = options.unitsPerEm || 1000;\n\t        this.ascender = options.ascender;\n\t        this.descender = options.descender;\n\t        this.createdTimestamp = options.createdTimestamp;\n\t        this.tables = Object.assign(options.tables, {\n\t            os2: Object.assign({\n\t                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n\t                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n\t                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR,\n\t            }, options.tables.os2)\n\t        });\n\t    }\n\n\t    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n\t    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n\t    this.encoding = new DefaultEncoding(this);\n\t    this.position = new Position(this);\n\t    this.substitution = new Substitution(this);\n\t    this.tables = this.tables || {};\n\n\t    // needed for low memory mode only.\n\t    this._push = null;\n\t    this._hmtxTableData = {};\n\n\t    Object.defineProperty(this, 'hinting', {\n\t        get: function() {\n\t            if (this._hinting) { return this._hinting; }\n\t            if (this.outlinesFormat === 'truetype') {\n\t                return (this._hinting = new Hinting(this));\n\t            }\n\t        }\n\t    });\n\t}\n\n\t/**\n\t * Check if the font has a glyph for the given character.\n\t * @param  {string}\n\t * @return {Boolean}\n\t */\n\tFont.prototype.hasChar = function(c) {\n\t    return this.encoding.charToGlyphIndex(c) !== null;\n\t};\n\n\t/**\n\t * Convert the given character to a single glyph index.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.charToGlyphIndex = function(s) {\n\t    return this.encoding.charToGlyphIndex(s);\n\t};\n\n\t/**\n\t * Convert the given character to a single Glyph object.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.charToGlyph = function(c) {\n\t    var glyphIndex = this.charToGlyphIndex(c);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\n\t    return glyph;\n\t};\n\n\t/**\n\t * Update features\n\t * @param {any} options features options\n\t */\n\tFont.prototype.updateFeatures = function (options) {\n\t    // TODO: update all features options not only 'latn'.\n\t    return this.defaultRenderOptions.features.map(function (feature) {\n\t        if (feature.script === 'latn') {\n\t            return {\n\t                script: 'latn',\n\t                tags: feature.tags.filter(function (tag) { return options[tag]; })\n\t            };\n\t        } else {\n\t            return feature;\n\t        }\n\t    });\n\t};\n\n\t/**\n\t * Convert the given text to a list of Glyph objects.\n\t * Note that there is no strict one-to-one mapping between characters and\n\t * glyphs, so the list of returned glyphs can be larger or smaller than the\n\t * length of the given string.\n\t * @param  {string}\n\t * @param  {GlyphRenderOptions} [options]\n\t * @return {opentype.Glyph[]}\n\t */\n\tFont.prototype.stringToGlyphs = function(s, options) {\n\t    var this$1 = this;\n\n\n\t    var bidi = new Bidi();\n\n\t    // Create and register 'glyphIndex' state modifier\n\t    var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };\n\t    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n\t    // roll-back to default features\n\t    var features = options ?\n\t    this.updateFeatures(options.features) :\n\t    this.defaultRenderOptions.features;\n\n\t    bidi.applyFeatures(this, features);\n\n\t    var indexes = bidi.getTextGlyphs(s);\n\n\t    var length = indexes.length;\n\n\t    // convert glyph indexes to glyph objects\n\t    var glyphs = new Array(length);\n\t    var notdef = this.glyphs.get(0);\n\t    for (var i = 0; i < length; i += 1) {\n\t        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n\t    }\n\t    return glyphs;\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.nameToGlyphIndex = function(name) {\n\t    return this.glyphNames.nameToGlyphIndex(name);\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.nameToGlyph = function(name) {\n\t    var glyphIndex = this.nameToGlyphIndex(name);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\n\t    return glyph;\n\t};\n\n\t/**\n\t * @param  {Number}\n\t * @return {String}\n\t */\n\tFont.prototype.glyphIndexToName = function(gid) {\n\t    if (!this.glyphNames.glyphIndexToName) {\n\t        return '';\n\t    }\n\n\t    return this.glyphNames.glyphIndexToName(gid);\n\t};\n\n\t/**\n\t * Retrieve the value of the kerning pair between the left glyph (or its index)\n\t * and the right glyph (or its index). If no kerning pair is found, return 0.\n\t * The kerning value gets added to the advance width when calculating the spacing\n\t * between glyphs.\n\t * For GPOS kerning, this method uses the default script and language, which covers\n\t * most use cases. To have greater control, use font.position.getKerningValue .\n\t * @param  {opentype.Glyph} leftGlyph\n\t * @param  {opentype.Glyph} rightGlyph\n\t * @return {Number}\n\t */\n\tFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n\t    leftGlyph = leftGlyph.index || leftGlyph;\n\t    rightGlyph = rightGlyph.index || rightGlyph;\n\t    var gposKerning = this.position.defaultKerningTables;\n\t    if (gposKerning) {\n\t        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n\t    }\n\t    // \"kern\" table\n\t    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n\t};\n\n\t/**\n\t * @typedef GlyphRenderOptions\n\t * @type Object\n\t * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n\t *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n\t * @property {string} [language='dflt'] - language system used to determine which features to apply.\n\t *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n\t * @property {boolean} [kerning=true] - whether to include kerning values\n\t * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n\t *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n\t */\n\tFont.prototype.defaultRenderOptions = {\n\t    kerning: true,\n\t    features: [\n\t        /**\n\t         * these 4 features are required to render Arabic text properly\n\t         * and shouldn't be turned off when rendering arabic text.\n\t         */\n\t        { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },\n\t        { script: 'latn', tags: ['liga', 'rlig'] }\n\t    ]\n\t};\n\n\t/**\n\t * Helper function that invokes the given callback for each glyph in the given text.\n\t * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n\t * @param {string} text - The text to apply.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @param  {Function} callback\n\t */\n\tFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    options = Object.assign({}, this.defaultRenderOptions, options);\n\t    var fontScale = 1 / this.unitsPerEm * fontSize;\n\t    var glyphs = this.stringToGlyphs(text, options);\n\t    var kerningLookups;\n\t    if (options.kerning) {\n\t        var script = options.script || this.position.getDefaultScriptName();\n\t        kerningLookups = this.position.getKerningTables(script, options.language);\n\t    }\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs[i];\n\t        callback.call(this, glyph, x, y, fontSize, options);\n\t        if (glyph.advanceWidth) {\n\t            x += glyph.advanceWidth * fontScale;\n\t        }\n\n\t        if (options.kerning && i < glyphs.length - 1) {\n\t            // We should apply position adjustment lookups in a more generic way.\n\t            // Here we only use the xAdvance value.\n\t            var kerningValue = kerningLookups ?\n\t                  this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :\n\t                  this.getKerningValue(glyph, glyphs[i + 1]);\n\t            x += kerningValue * fontScale;\n\t        }\n\n\t        if (options.letterSpacing) {\n\t            x += options.letterSpacing * fontSize;\n\t        } else if (options.tracking) {\n\t            x += (options.tracking / 1000) * fontSize;\n\t        }\n\t    }\n\t    return x;\n\t};\n\n\t/**\n\t * Create a Path object that represents the given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path}\n\t */\n\tFont.prototype.getPath = function(text, x, y, fontSize, options) {\n\t    var fullPath = new Path();\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n\t        fullPath.extend(glyphPath);\n\t    });\n\t    return fullPath;\n\t};\n\n\t/**\n\t * Create an array of Path objects that represent the glyphs of a given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path[]}\n\t */\n\tFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n\t    var glyphPaths = [];\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n\t        glyphPaths.push(glyphPath);\n\t    });\n\n\t    return glyphPaths;\n\t};\n\n\t/**\n\t * Returns the advance width of a text.\n\t *\n\t * This is something different than Path.getBoundingBox() as for example a\n\t * suffixed whitespace increases the advanceWidth but not the bounding box\n\t * or an overhanging letter like a calligraphic 'f' might have a quite larger\n\t * bounding box than its advance width.\n\t *\n\t * This corresponds to canvas2dContext.measureText(text).width\n\t *\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return advance width\n\t */\n\tFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n\t    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n\t};\n\n\t/**\n\t * Draw the text on the given drawing context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n\t    this.getPath(text, x, y, fontSize, options).draw(ctx);\n\t};\n\n\t/**\n\t * Draw the points of all glyphs in the text.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawPoints(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\n\t/**\n\t * Draw lines indicating important font measurements for all glyphs in the text.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {string}\n\t */\n\tFont.prototype.getEnglishName = function(name) {\n\t    var translations = this.names[name];\n\t    if (translations) {\n\t        return translations.en;\n\t    }\n\t};\n\n\t/**\n\t * Validate\n\t */\n\tFont.prototype.validate = function() {\n\t    var _this = this;\n\n\t    function assert(predicate, message) {\n\t    }\n\n\t    function assertNamePresent(name) {\n\t        var englishName = _this.getEnglishName(name);\n\t        assert(englishName && englishName.trim().length > 0);\n\t    }\n\n\t    // Identification information\n\t    assertNamePresent('fontFamily');\n\t    assertNamePresent('weightName');\n\t    assertNamePresent('manufacturer');\n\t    assertNamePresent('copyright');\n\t    assertNamePresent('version');\n\n\t    // Dimension information\n\t    assert(this.unitsPerEm > 0);\n\t};\n\n\t/**\n\t * Convert the font object to a SFNT data structure.\n\t * This structure contains all the necessary tables and metadata to create a binary OTF file.\n\t * @return {opentype.Table}\n\t */\n\tFont.prototype.toTables = function() {\n\t    return sfnt.fontToTable(this);\n\t};\n\t/**\n\t * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n\t */\n\tFont.prototype.toBuffer = function() {\n\t    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n\t    return this.toArrayBuffer();\n\t};\n\t/**\n\t * Converts a `opentype.Font` into an `ArrayBuffer`\n\t * @return {ArrayBuffer}\n\t */\n\tFont.prototype.toArrayBuffer = function() {\n\t    var sfntTable = this.toTables();\n\t    var bytes = sfntTable.encode();\n\t    var buffer = new ArrayBuffer(bytes.length);\n\t    var intArray = new Uint8Array(buffer);\n\t    for (var i = 0; i < bytes.length; i++) {\n\t        intArray[i] = bytes[i];\n\t    }\n\n\t    return buffer;\n\t};\n\n\t/**\n\t * Initiate a download of the OpenType font.\n\t */\n\tFont.prototype.download = function(fileName) {\n\t    var familyName = this.getEnglishName('fontFamily');\n\t    var styleName = this.getEnglishName('fontSubfamily');\n\t    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n\t    var arrayBuffer = this.toArrayBuffer();\n\n\t    if (isBrowser()) {\n\t        window.URL = window.URL || window.webkitURL;\n\n\t        if (window.URL) {\n\t            var dataView = new DataView(arrayBuffer);\n\t            var blob = new Blob([dataView], {type: 'font/opentype'});\n\n\t            var link = document.createElement('a');\n\t            link.href = window.URL.createObjectURL(blob);\n\t            link.download = fileName;\n\n\t            var event = document.createEvent('MouseEvents');\n\t            event.initEvent('click', true, false);\n\t            link.dispatchEvent(event);\n\t        } else {\n\t            console.warn('Font file could not be downloaded. Try using a different browser.');\n\t        }\n\t    } else {\n\t        var fs = __webpack_require__(/*! fs */ \"fs\");\n\t        var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n\t        fs.writeFileSync(fileName, buffer);\n\t    }\n\t};\n\t/**\n\t * @private\n\t */\n\tFont.prototype.fsSelectionValues = {\n\t    ITALIC:              0x001, //1\n\t    UNDERSCORE:          0x002, //2\n\t    NEGATIVE:            0x004, //4\n\t    OUTLINED:            0x008, //8\n\t    STRIKEOUT:           0x010, //16\n\t    BOLD:                0x020, //32\n\t    REGULAR:             0x040, //64\n\t    USER_TYPO_METRICS:   0x080, //128\n\t    WWS:                 0x100, //256\n\t    OBLIQUE:             0x200  //512\n\t};\n\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWidthClasses = {\n\t    ULTRA_CONDENSED: 1,\n\t    EXTRA_CONDENSED: 2,\n\t    CONDENSED: 3,\n\t    SEMI_CONDENSED: 4,\n\t    MEDIUM: 5,\n\t    SEMI_EXPANDED: 6,\n\t    EXPANDED: 7,\n\t    EXTRA_EXPANDED: 8,\n\t    ULTRA_EXPANDED: 9\n\t};\n\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWeightClasses = {\n\t    THIN: 100,\n\t    EXTRA_LIGHT: 200,\n\t    LIGHT: 300,\n\t    NORMAL: 400,\n\t    MEDIUM: 500,\n\t    SEMI_BOLD: 600,\n\t    BOLD: 700,\n\t    EXTRA_BOLD: 800,\n\t    BLACK:    900\n\t};\n\n\t// The `fvar` table stores font variation axes and instances.\n\n\tfunction addName(name, names) {\n\t    var nameString = JSON.stringify(name);\n\t    var nameID = 256;\n\t    for (var nameKey in names) {\n\t        var n = parseInt(nameKey);\n\t        if (!n || n < 256) {\n\t            continue;\n\t        }\n\n\t        if (JSON.stringify(names[nameKey]) === nameString) {\n\t            return n;\n\t        }\n\n\t        if (nameID <= n) {\n\t            nameID = n + 1;\n\t        }\n\t    }\n\n\t    names[nameID] = name;\n\t    return nameID;\n\t}\n\n\tfunction makeFvarAxis(n, axis, names) {\n\t    var nameID = addName(axis.name, names);\n\t    return [\n\t        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n\t        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n\t        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n\t        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0},\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n\t    ];\n\t}\n\n\tfunction parseFvarAxis(data, start, names) {\n\t    var axis = {};\n\t    var p = new parse.Parser(data, start);\n\t    axis.tag = p.parseTag();\n\t    axis.minValue = p.parseFixed();\n\t    axis.defaultValue = p.parseFixed();\n\t    axis.maxValue = p.parseFixed();\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\t    axis.name = names[p.parseUShort()] || {};\n\t    return axis;\n\t}\n\n\tfunction makeFvarInstance(n, inst, axes, names) {\n\t    var nameID = addName(inst.name, names);\n\t    var fields = [\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0}\n\t    ];\n\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        var axisTag = axes[i].tag;\n\t        fields.push({\n\t            name: 'axis_' + n + ' ' + axisTag,\n\t            type: 'FIXED',\n\t            value: inst.coordinates[axisTag] << 16\n\t        });\n\t    }\n\n\t    return fields;\n\t}\n\n\tfunction parseFvarInstance(data, start, axes, names) {\n\t    var inst = {};\n\t    var p = new parse.Parser(data, start);\n\t    inst.name = names[p.parseUShort()] || {};\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\n\t    inst.coordinates = {};\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        inst.coordinates[axes[i].tag] = p.parseFixed();\n\t    }\n\n\t    return inst;\n\t}\n\n\tfunction makeFvarTable(fvar, names) {\n\t    var result = new table.Table('fvar', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'offsetToData', type: 'USHORT', value: 0},\n\t        {name: 'countSizePairs', type: 'USHORT', value: 2},\n\t        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n\t        {name: 'axisSize', type: 'USHORT', value: 20},\n\t        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n\t        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n\t    ]);\n\t    result.offsetToData = result.sizeOf();\n\n\t    for (var i = 0; i < fvar.axes.length; i++) {\n\t        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n\t    }\n\n\t    for (var j = 0; j < fvar.instances.length; j++) {\n\t        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction parseFvarTable(data, start, names) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n\t    var offsetToData = p.parseOffset16();\n\t    // Skip countSizePairs.\n\t    p.skip('uShort', 1);\n\t    var axisCount = p.parseUShort();\n\t    var axisSize = p.parseUShort();\n\t    var instanceCount = p.parseUShort();\n\t    var instanceSize = p.parseUShort();\n\n\t    var axes = [];\n\t    for (var i = 0; i < axisCount; i++) {\n\t        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n\t    }\n\n\t    var instances = [];\n\t    var instanceStart = start + offsetToData + axisCount * axisSize;\n\t    for (var j = 0; j < instanceCount; j++) {\n\t        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n\t    }\n\n\t    return {axes: axes, instances: instances};\n\t}\n\n\tvar fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n\t// The `GDEF` table contains various glyph properties\n\n\tvar attachList = function() {\n\t    return {\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n\t    };\n\t};\n\n\tvar caretValue = function() {\n\t    var format = this.parseUShort();\n\t    check.argument(format === 1 || format === 2 || format === 3,\n\t        'Unsupported CaretValue table version.');\n\t    if (format === 1) {\n\t        return { coordinate: this.parseShort() };\n\t    } else if (format === 2) {\n\t        return { pointindex: this.parseShort() };\n\t    } else if (format === 3) {\n\t        // Device / Variation Index tables unsupported\n\t        return { coordinate: this.parseShort() };\n\t    }\n\t};\n\n\tvar ligGlyph = function() {\n\t    return this.parseList(Parser.pointer(caretValue));\n\t};\n\n\tvar ligCaretList = function() {\n\t    return {\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n\t    };\n\t};\n\n\tvar markGlyphSets = function() {\n\t    this.parseUShort(); // Version\n\t    return this.parseList(Parser.pointer(Parser.coverage));\n\t};\n\n\tfunction parseGDEFTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion(1);\n\t    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3,\n\t        'Unsupported GDEF table version.');\n\t    var gdef = {\n\t        version: tableVersion,\n\t        classDef: p.parsePointer(Parser.classDef),\n\t        attachList: p.parsePointer(attachList),\n\t        ligCaretList: p.parsePointer(ligCaretList),\n\t        markAttachClassDef: p.parsePointer(Parser.classDef)\n\t    };\n\t    if (tableVersion >= 1.2) {\n\t        gdef.markGlyphSets = p.parsePointer(markGlyphSets);\n\t    }\n\t    return gdef;\n\t}\n\tvar gdef = { parse: parseGDEFTable };\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\n\tvar subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n\t// this = Parser instance\n\tsubtableParsers$1[1] = function parseLookup1() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var posformat = this.parseUShort();\n\t    if (posformat === 1) {\n\t        return {\n\t            posFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            value: this.parseValueRecord()\n\t        };\n\t    } else if (posformat === 2) {\n\t        return {\n\t            posFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            values: this.parseValueRecordList()\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');\n\t};\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\n\tsubtableParsers$1[2] = function parseLookup2() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var posFormat = this.parseUShort();\n\t    check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');\n\t    var coverage = this.parsePointer(Parser.coverage);\n\t    var valueFormat1 = this.parseUShort();\n\t    var valueFormat2 = this.parseUShort();\n\t    if (posFormat === 1) {\n\t        // Adjustments for Glyph Pairs\n\t        return {\n\t            posFormat: posFormat,\n\t            coverage: coverage,\n\t            valueFormat1: valueFormat1,\n\t            valueFormat2: valueFormat2,\n\t            pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n\t                return {        // pairValueRecord\n\t                    secondGlyph: this.parseUShort(),\n\t                    value1: this.parseValueRecord(valueFormat1),\n\t                    value2: this.parseValueRecord(valueFormat2)\n\t                };\n\t            })))\n\t        };\n\t    } else if (posFormat === 2) {\n\t        var classDef1 = this.parsePointer(Parser.classDef);\n\t        var classDef2 = this.parsePointer(Parser.classDef);\n\t        var class1Count = this.parseUShort();\n\t        var class2Count = this.parseUShort();\n\t        return {\n\t            // Class Pair Adjustment\n\t            posFormat: posFormat,\n\t            coverage: coverage,\n\t            valueFormat1: valueFormat1,\n\t            valueFormat2: valueFormat2,\n\t            classDef1: classDef1,\n\t            classDef2: classDef2,\n\t            class1Count: class1Count,\n\t            class2Count: class2Count,\n\t            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n\t                return {\n\t                    value1: this.parseValueRecord(valueFormat1),\n\t                    value2: this.parseValueRecord(valueFormat2)\n\t                };\n\t            }))\n\t        };\n\t    }\n\t};\n\n\tsubtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };\n\tsubtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };\n\tsubtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };\n\tsubtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };\n\tsubtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };\n\tsubtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };\n\tsubtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n\tfunction parseGposTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion(1);\n\t    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);\n\n\t    if (tableVersion === 1) {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers$1)\n\t        };\n\t    } else {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers$1),\n\t            variations: p.parseFeatureVariationsList()\n\t        };\n\t    }\n\n\t}\n\n\t// GPOS Writing //////////////////////////////////////////////\n\t// NOT SUPPORTED\n\tvar subtableMakers$1 = new Array(10);\n\n\tfunction makeGposTable(gpos) {\n\t    return new table.Table('GPOS', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},\n\t        {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},\n\t        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}\n\t    ]);\n\t}\n\n\tvar gpos = { parse: parseGposTable, make: makeGposTable };\n\n\t// The `kern` table contains kerning pairs.\n\n\tfunction parseWindowsKernTable(p) {\n\t    var pairs = {};\n\t    // Skip nTables.\n\t    p.skip('uShort');\n\t    var subtableVersion = p.parseUShort();\n\t    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n\t    // Skip subtableLength, subtableCoverage\n\t    p.skip('uShort', 2);\n\t    var nPairs = p.parseUShort();\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\t    for (var i = 0; i < nPairs; i += 1) {\n\t        var leftIndex = p.parseUShort();\n\t        var rightIndex = p.parseUShort();\n\t        var value = p.parseShort();\n\t        pairs[leftIndex + ',' + rightIndex] = value;\n\t    }\n\t    return pairs;\n\t}\n\n\tfunction parseMacKernTable(p) {\n\t    var pairs = {};\n\t    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n\t    // Skip the rest.\n\t    p.skip('uShort');\n\t    var nTables = p.parseULong();\n\t    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n\t    if (nTables > 1) {\n\t        console.warn('Only the first kern subtable is supported.');\n\t    }\n\t    p.skip('uLong');\n\t    var coverage = p.parseUShort();\n\t    var subtableVersion = coverage & 0xFF;\n\t    p.skip('uShort');\n\t    if (subtableVersion === 0) {\n\t        var nPairs = p.parseUShort();\n\t        // Skip searchRange, entrySelector, rangeShift.\n\t        p.skip('uShort', 3);\n\t        for (var i = 0; i < nPairs; i += 1) {\n\t            var leftIndex = p.parseUShort();\n\t            var rightIndex = p.parseUShort();\n\t            var value = p.parseShort();\n\t            pairs[leftIndex + ',' + rightIndex] = value;\n\t        }\n\t    }\n\t    return pairs;\n\t}\n\n\t// Parse the `kern` table which contains kerning pairs.\n\tfunction parseKernTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseUShort();\n\t    if (tableVersion === 0) {\n\t        return parseWindowsKernTable(p);\n\t    } else if (tableVersion === 1) {\n\t        return parseMacKernTable(p);\n\t    } else {\n\t        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n\t    }\n\t}\n\n\tvar kern = { parse: parseKernTable };\n\n\t// The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n\t// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n\t// relative to the beginning of the glyphData table.\n\t// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n\t// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n\t// version where offsets are stored as uLongs. The `head` table specifies which version to use\n\t// (under indexToLocFormat).\n\tfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n\t    var p = new parse.Parser(data, start);\n\t    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n\t    // There is an extra entry after the last index element to compute the length of the last glyph.\n\t    // That's why we use numGlyphs + 1.\n\t    var glyphOffsets = [];\n\t    for (var i = 0; i < numGlyphs + 1; i += 1) {\n\t        var glyphOffset = parseFn.call(p);\n\t        if (shortVersion) {\n\t            // The short table version stores the actual offset divided by 2.\n\t            glyphOffset *= 2;\n\t        }\n\n\t        glyphOffsets.push(glyphOffset);\n\t    }\n\n\t    return glyphOffsets;\n\t}\n\n\tvar loca = { parse: parseLocaTable };\n\n\t// opentype.js\n\n\t/**\n\t * The opentype library.\n\t * @namespace opentype\n\t */\n\n\t// File loaders /////////////////////////////////////////////////////////\n\t/**\n\t * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} path - The path of the file\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromFile(path, callback) {\n\t    var fs = __webpack_require__(/*! fs */ \"fs\");\n\t    fs.readFile(path, function(err, buffer) {\n\t        if (err) {\n\t            return callback(err.message);\n\t        }\n\n\t        callback(null, nodeBufferToArrayBuffer(buffer));\n\t    });\n\t}\n\t/**\n\t * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} url - The URL of the font file.\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromUrl(url, callback) {\n\t    var request = new XMLHttpRequest();\n\t    request.open('get', url, true);\n\t    request.responseType = 'arraybuffer';\n\t    request.onload = function() {\n\t        if (request.response) {\n\t            return callback(null, request.response);\n\t        } else {\n\t            return callback('Font could not be loaded: ' + request.statusText);\n\t        }\n\t    };\n\n\t    request.onerror = function () {\n\t        callback('Font could not be loaded');\n\t    };\n\n\t    request.send();\n\t}\n\n\t// Table Directory Entries //////////////////////////////////////////////\n\t/**\n\t * Parses OpenType table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseOpenTypeTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 12;\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var checksum = parse.getULong(data, p + 4);\n\t        var offset = parse.getULong(data, p + 8);\n\t        var length = parse.getULong(data, p + 12);\n\t        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n\t        p += 16;\n\t    }\n\n\t    return tableEntries;\n\t}\n\n\t/**\n\t * Parses WOFF table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseWOFFTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 44; // offset to the first table directory entry.\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var offset = parse.getULong(data, p + 4);\n\t        var compLength = parse.getULong(data, p + 8);\n\t        var origLength = parse.getULong(data, p + 12);\n\t        var compression = (void 0);\n\t        if (compLength < origLength) {\n\t            compression = 'WOFF';\n\t        } else {\n\t            compression = false;\n\t        }\n\n\t        tableEntries.push({tag: tag, offset: offset, compression: compression,\n\t            compressedLength: compLength, length: origLength});\n\t        p += 20;\n\t    }\n\n\t    return tableEntries;\n\t}\n\n\t/**\n\t * @typedef TableData\n\t * @type Object\n\t * @property {DataView} data - The DataView\n\t * @property {number} offset - The data offset.\n\t */\n\n\t/**\n\t * @param  {DataView}\n\t * @param  {Object}\n\t * @return {TableData}\n\t */\n\tfunction uncompressTable(data, tableEntry) {\n\t    if (tableEntry.compression === 'WOFF') {\n\t        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n\t        var outBuffer = new Uint8Array(tableEntry.length);\n\t        tinyInflate(inBuffer, outBuffer);\n\t        if (outBuffer.byteLength !== tableEntry.length) {\n\t            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n\t        }\n\n\t        var view = new DataView(outBuffer.buffer, 0);\n\t        return {data: view, offset: 0};\n\t    } else {\n\t        return {data: data, offset: tableEntry.offset};\n\t    }\n\t}\n\n\t// Public API ///////////////////////////////////////////////////////////\n\n\t/**\n\t * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n\t * Throws an error if the font could not be parsed.\n\t * @param  {ArrayBuffer}\n\t * @param  {Object} opt - options for parsing\n\t * @return {opentype.Font}\n\t */\n\tfunction parseBuffer(buffer, opt) {\n\t    opt = (opt === undefined || opt === null) ?  {} : opt;\n\n\t    var indexToLocFormat;\n\t    var ltagTable;\n\n\t    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n\t    // should be an empty font that we'll fill with our own data.\n\t    var font = new Font({empty: true});\n\n\t    // OpenType fonts use big endian byte ordering.\n\t    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n\t    // Instead we use DataViews where we can specify endianness.\n\t    var data = new DataView(buffer, 0);\n\t    var numTables;\n\t    var tableEntries = [];\n\t    var signature = parse.getTag(data, 0);\n\t    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n\t        font.outlinesFormat = 'truetype';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'OTTO') {\n\t        font.outlinesFormat = 'cff';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'wOFF') {\n\t        var flavor = parse.getTag(data, 4);\n\t        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n\t            font.outlinesFormat = 'truetype';\n\t        } else if (flavor === 'OTTO') {\n\t            font.outlinesFormat = 'cff';\n\t        } else {\n\t            throw new Error('Unsupported OpenType flavor ' + signature);\n\t        }\n\n\t        numTables = parse.getUShort(data, 12);\n\t        tableEntries = parseWOFFTableEntries(data, numTables);\n\t    } else {\n\t        throw new Error('Unsupported OpenType signature ' + signature);\n\t    }\n\n\t    var cffTableEntry;\n\t    var fvarTableEntry;\n\t    var glyfTableEntry;\n\t    var gdefTableEntry;\n\t    var gposTableEntry;\n\t    var gsubTableEntry;\n\t    var hmtxTableEntry;\n\t    var kernTableEntry;\n\t    var locaTableEntry;\n\t    var nameTableEntry;\n\t    var metaTableEntry;\n\t    var p;\n\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tableEntry = tableEntries[i];\n\t        var table = (void 0);\n\t        switch (tableEntry.tag) {\n\t            case 'cmap':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.cmap = cmap.parse(table.data, table.offset);\n\t                font.encoding = new CmapEncoding(font.tables.cmap);\n\t                break;\n\t            case 'cvt ' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n\t                break;\n\t            case 'fvar':\n\t                fvarTableEntry = tableEntry;\n\t                break;\n\t            case 'fpgm' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.fpgm = p.parseByteList(tableEntry.length);\n\t                break;\n\t            case 'head':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.head = head.parse(table.data, table.offset);\n\t                font.unitsPerEm = font.tables.head.unitsPerEm;\n\t                indexToLocFormat = font.tables.head.indexToLocFormat;\n\t                break;\n\t            case 'hhea':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.hhea = hhea.parse(table.data, table.offset);\n\t                font.ascender = font.tables.hhea.ascender;\n\t                font.descender = font.tables.hhea.descender;\n\t                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n\t                break;\n\t            case 'hmtx':\n\t                hmtxTableEntry = tableEntry;\n\t                break;\n\t            case 'ltag':\n\t                table = uncompressTable(data, tableEntry);\n\t                ltagTable = ltag.parse(table.data, table.offset);\n\t                break;\n\t            case 'maxp':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.maxp = maxp.parse(table.data, table.offset);\n\t                font.numGlyphs = font.tables.maxp.numGlyphs;\n\t                break;\n\t            case 'name':\n\t                nameTableEntry = tableEntry;\n\t                break;\n\t            case 'OS/2':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.os2 = os2.parse(table.data, table.offset);\n\t                break;\n\t            case 'post':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.post = post.parse(table.data, table.offset);\n\t                font.glyphNames = new GlyphNames(font.tables.post);\n\t                break;\n\t            case 'prep' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.prep = p.parseByteList(tableEntry.length);\n\t                break;\n\t            case 'glyf':\n\t                glyfTableEntry = tableEntry;\n\t                break;\n\t            case 'loca':\n\t                locaTableEntry = tableEntry;\n\t                break;\n\t            case 'CFF ':\n\t                cffTableEntry = tableEntry;\n\t                break;\n\t            case 'kern':\n\t                kernTableEntry = tableEntry;\n\t                break;\n\t            case 'GDEF':\n\t                gdefTableEntry = tableEntry;\n\t                break;\n\t            case 'GPOS':\n\t                gposTableEntry = tableEntry;\n\t                break;\n\t            case 'GSUB':\n\t                gsubTableEntry = tableEntry;\n\t                break;\n\t            case 'meta':\n\t                metaTableEntry = tableEntry;\n\t                break;\n\t        }\n\t    }\n\n\t    var nameTable = uncompressTable(data, nameTableEntry);\n\t    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n\t    font.names = font.tables.name;\n\n\t    if (glyfTableEntry && locaTableEntry) {\n\t        var shortVersion = indexToLocFormat === 0;\n\t        var locaTable = uncompressTable(data, locaTableEntry);\n\t        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n\t        var glyfTable = uncompressTable(data, glyfTableEntry);\n\t        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);\n\t    } else if (cffTableEntry) {\n\t        var cffTable = uncompressTable(data, cffTableEntry);\n\t        cff.parse(cffTable.data, cffTable.offset, font, opt);\n\t    } else {\n\t        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n\t    }\n\n\t    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n\t    hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);\n\t    addGlyphNames(font, opt);\n\n\t    if (kernTableEntry) {\n\t        var kernTable = uncompressTable(data, kernTableEntry);\n\t        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n\t    } else {\n\t        font.kerningPairs = {};\n\t    }\n\n\t    if (gdefTableEntry) {\n\t        var gdefTable = uncompressTable(data, gdefTableEntry);\n\t        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n\t    }\n\n\t    if (gposTableEntry) {\n\t        var gposTable = uncompressTable(data, gposTableEntry);\n\t        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n\t        font.position.init();\n\t    }\n\n\t    if (gsubTableEntry) {\n\t        var gsubTable = uncompressTable(data, gsubTableEntry);\n\t        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n\t    }\n\n\t    if (fvarTableEntry) {\n\t        var fvarTable = uncompressTable(data, fvarTableEntry);\n\t        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n\t    }\n\n\t    if (metaTableEntry) {\n\t        var metaTable = uncompressTable(data, metaTableEntry);\n\t        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n\t        font.metas = font.tables.meta;\n\t    }\n\n\t    return font;\n\t}\n\n\t/**\n\t * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n\t * with two arguments `(err, font)`. The `err` will be null on success,\n\t * the `font` is a Font object.\n\t * We use the node.js callback convention so that\n\t * opentype.js can integrate with frameworks like async.js.\n\t * @alias opentype.load\n\t * @param  {string} url - The URL of the font to load.\n\t * @param  {Function} callback - The callback.\n\t */\n\tfunction load(url, callback, opt) {\n\t    opt = (opt === undefined || opt === null) ?  {} : opt;\n\t    var isNode = typeof window === 'undefined';\n\t    var loadFn = isNode && !opt.isUrl ? loadFromFile : loadFromUrl;\n\n\t    return new Promise(function (resolve, reject) {\n\t        loadFn(url, function(err, arrayBuffer) {\n\t            if (err) {\n\t                if (callback) {\n\t                    return callback(err);\n\t                } else {\n\t                    reject(err);\n\t                }\n\t            }\n\t            var font;\n\t            try {\n\t                font = parseBuffer(arrayBuffer, opt);\n\t            } catch (e) {\n\t                if (callback) {\n\t                    return callback(e, null);\n\t                } else {\n\t                    reject(e);\n\t                }\n\t            }\n\t            if (callback) {\n\t                return callback(null, font);\n\t            } else {\n\t                resolve(font);\n\t            }\n\t        });\n\t    });\n\t}\n\n\t/**\n\t * Synchronously load the font from a URL or file.\n\t * When done, returns the font object or throws an error.\n\t * @alias opentype.loadSync\n\t * @param  {string} url - The URL of the font to load.\n\t * @param  {Object} opt - opt.lowMemory\n\t * @return {opentype.Font}\n\t */\n\tfunction loadSync(url, opt) {\n\t    var fs = __webpack_require__(/*! fs */ \"fs\");\n\t    var buffer = fs.readFileSync(url);\n\t    return parseBuffer(nodeBufferToArrayBuffer(buffer), opt);\n\t}\n\n\tvar opentype = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tFont: Font,\n\t\tGlyph: Glyph,\n\t\tPath: Path,\n\t\tBoundingBox: BoundingBox,\n\t\t_parse: parse,\n\t\tparse: parseBuffer,\n\t\tload: load,\n\t\tloadSync: loadSync\n\t});\n\n\texports.BoundingBox = BoundingBox;\n\texports.Font = Font;\n\texports.Glyph = Glyph;\n\texports.Path = Path;\n\texports._parse = parse;\n\texports.default = opentype;\n\texports.load = load;\n\texports.loadSync = loadSync;\n\texports.parse = parseBuffer;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=opentype.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/opentype.js/dist/opentype.js\n");

/***/ })

};
;