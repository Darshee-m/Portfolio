"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/meshline";
exports.ids = ["vendor-chunks/meshline"];
exports.modules = {

/***/ "(ssr)/./node_modules/meshline/dist/index.cjs":
/*!**********************************************!*\
  !*** ./node_modules/meshline/dist/index.cjs ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nObject.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: \"Module\" } });\nconst THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\");\nfunction _interopNamespace(e) {\n  if (e && e.__esModule)\n    return e;\n  const n = Object.create(null, { [Symbol.toStringTag]: { value: \"Module\" } });\n  if (e) {\n    for (const k in e) {\n      if (k !== \"default\") {\n        const d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: () => e[k]\n        });\n      }\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\nconst THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++)\n      dst[i + dstOffset] = src[i];\n  }\n  return dst;\n}\nfunction convertPoints(points) {\n  if (points instanceof Float32Array)\n    return points;\n  if (points instanceof THREE__namespace.BufferGeometry)\n    return points.getAttribute(\"position\").array;\n  return points.map((p) => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE__namespace.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE__namespace.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\nclass MeshLineGeometry extends THREE__namespace.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"type\", \"MeshLine\");\n    __publicField(this, \"isMeshLine\", true);\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"previous\", []);\n    __publicField(this, \"next\", []);\n    __publicField(this, \"side\", []);\n    __publicField(this, \"width\", []);\n    __publicField(this, \"indices_array\", []);\n    __publicField(this, \"uvs\", []);\n    __publicField(this, \"counters\", []);\n    __publicField(this, \"widthCallback\", null);\n    __publicField(this, \"_attributes\");\n    __publicField(this, \"_points\", []);\n    __publicField(this, \"points\");\n    __publicField(this, \"matrixWorld\", new THREE__namespace.Matrix4());\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE__namespace.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback)\n        w = this.widthCallback(j / (l - 1));\n      else\n        w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE__namespace.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE__namespace.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE__namespace.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE__namespace.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE__namespace.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE__namespace.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE__namespace.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE__namespace.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n  }\n`;\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`;\nclass MeshLineMaterial extends THREE__namespace.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE__namespace.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE__namespace.Color(16777215) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE__namespace.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE__namespace.Vector2(1, 1) }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    __publicField(this, \"lineWidth\");\n    __publicField(this, \"map\");\n    __publicField(this, \"useMap\");\n    __publicField(this, \"alphaMap\");\n    __publicField(this, \"useAlphaMap\");\n    __publicField(this, \"color\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"sizeAttenuation\");\n    __publicField(this, \"dashArray\");\n    __publicField(this, \"dashOffset\");\n    __publicField(this, \"dashRatio\");\n    __publicField(this, \"useDash\");\n    __publicField(this, \"visibility\");\n    __publicField(this, \"repeat\");\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n}\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE__namespace.Matrix4();\n  const ray = new THREE__namespace.Ray();\n  const sphere = new THREE__namespace.Sphere();\n  const interRay = new THREE__namespace.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\n    return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE__namespace.Vector3();\n  const vEnd = new THREE__namespace.Vector3();\n  const interSegment = new THREE__namespace.Vector3();\n  const step = this instanceof THREE__namespace.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq)\n        continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far)\n        continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\nexports.MeshLineGeometry = MeshLineGeometry;\nexports.MeshLineMaterial = MeshLineMaterial;\nexports.raycast = raycast;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVzaGxpbmUvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhFQUE4RSw2REFBNkQ7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsY0FBYyxhQUFhLDBCQUEwQixtQkFBbUI7QUFDM0csY0FBYyxtQkFBTyxDQUFDLHlEQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0IsbUJBQW1CO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHNCQUFzQixtQkFBbUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQixlQUFlLGFBQWE7QUFDNUIsa0JBQWtCLFVBQVU7QUFDNUIsb0JBQW9CLGFBQWE7QUFDakMsdUJBQXVCLFVBQVU7QUFDakMsaUJBQWlCLDZDQUE2QztBQUM5RCxtQkFBbUIsVUFBVTtBQUM3QixzQkFBc0IsMkNBQTJDO0FBQ2pFLDJCQUEyQixVQUFVO0FBQ3JDLHFCQUFxQixVQUFVO0FBQy9CLHNCQUFzQixVQUFVO0FBQ2hDLHFCQUFxQixZQUFZO0FBQ2pDLG1CQUFtQixVQUFVO0FBQzdCLHNCQUFzQixVQUFVO0FBQ2hDLHFCQUFxQixVQUFVO0FBQy9CLGtCQUFrQjtBQUNsQixPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLE9BQU87QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QixlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWwtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9tZXNobGluZS9kaXN0L2luZGV4LmNqcz82MTkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZXhwb3J0cywgeyBfX2VzTW9kdWxlOiB7IHZhbHVlOiB0cnVlIH0sIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7IHZhbHVlOiBcIk1vZHVsZVwiIH0gfSk7XG5jb25zdCBUSFJFRSA9IHJlcXVpcmUoXCJ0aHJlZVwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlKGUpIHtcbiAgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgIHJldHVybiBlO1xuICBjb25zdCBuID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7IFtTeW1ib2wudG9TdHJpbmdUYWddOiB7IHZhbHVlOiBcIk1vZHVsZVwiIH0gfSk7XG4gIGlmIChlKSB7XG4gICAgZm9yIChjb25zdCBrIGluIGUpIHtcbiAgICAgIGlmIChrICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgICBjb25zdCBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBrKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogKCkgPT4gZVtrXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbi5kZWZhdWx0ID0gZTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobik7XG59XG5jb25zdCBUSFJFRV9fbmFtZXNwYWNlID0gLyogQF9fUFVSRV9fICovIF9pbnRlcm9wTmFtZXNwYWNlKFRIUkVFKTtcbmZ1bmN0aW9uIG1lbWNweShzcmMsIHNyY09mZnNldCwgZHN0LCBkc3RPZmZzZXQsIGxlbmd0aCkge1xuICBsZXQgaTtcbiAgc3JjID0gc3JjLnN1YmFycmF5IHx8IHNyYy5zbGljZSA/IHNyYyA6IHNyYy5idWZmZXI7XG4gIGRzdCA9IGRzdC5zdWJhcnJheSB8fCBkc3Quc2xpY2UgPyBkc3QgOiBkc3QuYnVmZmVyO1xuICBzcmMgPSBzcmNPZmZzZXQgPyBzcmMuc3ViYXJyYXkgPyBzcmMuc3ViYXJyYXkoc3JjT2Zmc2V0LCBsZW5ndGggJiYgc3JjT2Zmc2V0ICsgbGVuZ3RoKSA6IHNyYy5zbGljZShzcmNPZmZzZXQsIGxlbmd0aCAmJiBzcmNPZmZzZXQgKyBsZW5ndGgpIDogc3JjO1xuICBpZiAoZHN0LnNldCkge1xuICAgIGRzdC5zZXQoc3JjLCBkc3RPZmZzZXQpO1xuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBzcmMubGVuZ3RoOyBpKyspXG4gICAgICBkc3RbaSArIGRzdE9mZnNldF0gPSBzcmNbaV07XG4gIH1cbiAgcmV0dXJuIGRzdDtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRQb2ludHMocG9pbnRzKSB7XG4gIGlmIChwb2ludHMgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpXG4gICAgcmV0dXJuIHBvaW50cztcbiAgaWYgKHBvaW50cyBpbnN0YW5jZW9mIFRIUkVFX19uYW1lc3BhY2UuQnVmZmVyR2VvbWV0cnkpXG4gICAgcmV0dXJuIHBvaW50cy5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKS5hcnJheTtcbiAgcmV0dXJuIHBvaW50cy5tYXAoKHApID0+IHtcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShwKTtcbiAgICByZXR1cm4gcCBpbnN0YW5jZW9mIFRIUkVFX19uYW1lc3BhY2UuVmVjdG9yMyA/IFtwLngsIHAueSwgcC56XSA6IHAgaW5zdGFuY2VvZiBUSFJFRV9fbmFtZXNwYWNlLlZlY3RvcjIgPyBbcC54LCBwLnksIDBdIDogaXNBcnJheSAmJiBwLmxlbmd0aCA9PT0gMyA/IFtwWzBdLCBwWzFdLCBwWzJdXSA6IGlzQXJyYXkgJiYgcC5sZW5ndGggPT09IDIgPyBbcFswXSwgcFsxXSwgMF0gOiBwO1xuICB9KS5mbGF0KCk7XG59XG5jbGFzcyBNZXNoTGluZUdlb21ldHJ5IGV4dGVuZHMgVEhSRUVfX25hbWVzcGFjZS5CdWZmZXJHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInR5cGVcIiwgXCJNZXNoTGluZVwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaXNNZXNoTGluZVwiLCB0cnVlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicG9zaXRpb25zXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicHJldmlvdXNcIiwgW10pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJuZXh0XCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic2lkZVwiLCBbXSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIndpZHRoXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaW5kaWNlc19hcnJheVwiLCBbXSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInV2c1wiLCBbXSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImNvdW50ZXJzXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwid2lkdGhDYWxsYmFja1wiLCBudWxsKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2F0dHJpYnV0ZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9wb2ludHNcIiwgW10pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwb2ludHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm1hdHJpeFdvcmxkXCIsIG5ldyBUSFJFRV9fbmFtZXNwYWNlLk1hdHJpeDQoKSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgcG9pbnRzOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnNldFBvaW50cyh2YWx1ZSwgdGhpcy53aWR0aENhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHNldE1hdHJpeFdvcmxkKG1hdHJpeFdvcmxkKSB7XG4gICAgdGhpcy5tYXRyaXhXb3JsZCA9IG1hdHJpeFdvcmxkO1xuICB9XG4gIHNldFBvaW50cyhwb2ludHMsIHdjYikge1xuICAgIHBvaW50cyA9IGNvbnZlcnRQb2ludHMocG9pbnRzKTtcbiAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgdGhpcy53aWR0aENhbGxiYWNrID0gd2NiICE9IG51bGwgPyB3Y2IgOiBudWxsO1xuICAgIHRoaXMucG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVycyA9IFtdO1xuICAgIGlmIChwb2ludHMubGVuZ3RoICYmIHBvaW50c1swXSBpbnN0YW5jZW9mIFRIUkVFX19uYW1lc3BhY2UuVmVjdG9yMykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgcCA9IHBvaW50c1tqXTtcbiAgICAgICAgY29uc3QgYyA9IGogLyAocG9pbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucy5wdXNoKHAueCwgcC55LCBwLnopO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucy5wdXNoKHAueCwgcC55LCBwLnopO1xuICAgICAgICB0aGlzLmNvdW50ZXJzLnB1c2goYyk7XG4gICAgICAgIHRoaXMuY291bnRlcnMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb2ludHMubGVuZ3RoOyBqICs9IDMpIHtcbiAgICAgICAgY29uc3QgYyA9IGogLyAocG9pbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucy5wdXNoKHBvaW50c1tqXSwgcG9pbnRzW2ogKyAxXSwgcG9pbnRzW2ogKyAyXSk7XG4gICAgICAgIHRoaXMucG9zaXRpb25zLnB1c2gocG9pbnRzW2pdLCBwb2ludHNbaiArIDFdLCBwb2ludHNbaiArIDJdKTtcbiAgICAgICAgdGhpcy5jb3VudGVycy5wdXNoKGMpO1xuICAgICAgICB0aGlzLmNvdW50ZXJzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucHJvY2VzcygpO1xuICB9XG4gIGNvbXBhcmVWMyhhLCBiKSB7XG4gICAgY29uc3QgYWEgPSBhICogNjtcbiAgICBjb25zdCBhYiA9IGIgKiA2O1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uc1thYV0gPT09IHRoaXMucG9zaXRpb25zW2FiXSAmJiB0aGlzLnBvc2l0aW9uc1thYSArIDFdID09PSB0aGlzLnBvc2l0aW9uc1thYiArIDFdICYmIHRoaXMucG9zaXRpb25zW2FhICsgMl0gPT09IHRoaXMucG9zaXRpb25zW2FiICsgMl07XG4gIH1cbiAgY29weVYzKGEpIHtcbiAgICBjb25zdCBhYSA9IGEgKiA2O1xuICAgIHJldHVybiBbdGhpcy5wb3NpdGlvbnNbYWFdLCB0aGlzLnBvc2l0aW9uc1thYSArIDFdLCB0aGlzLnBvc2l0aW9uc1thYSArIDJdXTtcbiAgfVxuICBwcm9jZXNzKCkge1xuICAgIGNvbnN0IGwgPSB0aGlzLnBvc2l0aW9ucy5sZW5ndGggLyA2O1xuICAgIHRoaXMucHJldmlvdXMgPSBbXTtcbiAgICB0aGlzLm5leHQgPSBbXTtcbiAgICB0aGlzLnNpZGUgPSBbXTtcbiAgICB0aGlzLndpZHRoID0gW107XG4gICAgdGhpcy5pbmRpY2VzX2FycmF5ID0gW107XG4gICAgdGhpcy51dnMgPSBbXTtcbiAgICBsZXQgdztcbiAgICBsZXQgdjtcbiAgICBpZiAodGhpcy5jb21wYXJlVjMoMCwgbCAtIDEpKSB7XG4gICAgICB2ID0gdGhpcy5jb3B5VjMobCAtIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ID0gdGhpcy5jb3B5VjMoMCk7XG4gICAgfVxuICAgIHRoaXMucHJldmlvdXMucHVzaCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICB0aGlzLnByZXZpb3VzLnB1c2godlswXSwgdlsxXSwgdlsyXSk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgIHRoaXMuc2lkZS5wdXNoKDEpO1xuICAgICAgdGhpcy5zaWRlLnB1c2goLTEpO1xuICAgICAgaWYgKHRoaXMud2lkdGhDYWxsYmFjaylcbiAgICAgICAgdyA9IHRoaXMud2lkdGhDYWxsYmFjayhqIC8gKGwgLSAxKSk7XG4gICAgICBlbHNlXG4gICAgICAgIHcgPSAxO1xuICAgICAgdGhpcy53aWR0aC5wdXNoKHcpO1xuICAgICAgdGhpcy53aWR0aC5wdXNoKHcpO1xuICAgICAgdGhpcy51dnMucHVzaChqIC8gKGwgLSAxKSwgMCk7XG4gICAgICB0aGlzLnV2cy5wdXNoKGogLyAobCAtIDEpLCAxKTtcbiAgICAgIGlmIChqIDwgbCAtIDEpIHtcbiAgICAgICAgdiA9IHRoaXMuY29weVYzKGopO1xuICAgICAgICB0aGlzLnByZXZpb3VzLnB1c2godlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIHRoaXMucHJldmlvdXMucHVzaCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgY29uc3QgbiA9IGogKiAyO1xuICAgICAgICB0aGlzLmluZGljZXNfYXJyYXkucHVzaChuLCBuICsgMSwgbiArIDIpO1xuICAgICAgICB0aGlzLmluZGljZXNfYXJyYXkucHVzaChuICsgMiwgbiArIDEsIG4gKyAzKTtcbiAgICAgIH1cbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB2ID0gdGhpcy5jb3B5VjMoaik7XG4gICAgICAgIHRoaXMubmV4dC5wdXNoKHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB0aGlzLm5leHQucHVzaCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuY29tcGFyZVYzKGwgLSAxLCAwKSkge1xuICAgICAgdiA9IHRoaXMuY29weVYzKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ID0gdGhpcy5jb3B5VjMobCAtIDEpO1xuICAgIH1cbiAgICB0aGlzLm5leHQucHVzaCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICB0aGlzLm5leHQucHVzaCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICBpZiAoIXRoaXMuX2F0dHJpYnV0ZXMgfHwgdGhpcy5fYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCAhPT0gdGhpcy5wb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzID0ge1xuICAgICAgICBwb3NpdGlvbjogbmV3IFRIUkVFX19uYW1lc3BhY2UuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wb3NpdGlvbnMpLCAzKSxcbiAgICAgICAgcHJldmlvdXM6IG5ldyBUSFJFRV9fbmFtZXNwYWNlLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHRoaXMucHJldmlvdXMpLCAzKSxcbiAgICAgICAgbmV4dDogbmV3IFRIUkVFX19uYW1lc3BhY2UuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkodGhpcy5uZXh0KSwgMyksXG4gICAgICAgIHNpZGU6IG5ldyBUSFJFRV9fbmFtZXNwYWNlLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHRoaXMuc2lkZSksIDEpLFxuICAgICAgICB3aWR0aDogbmV3IFRIUkVFX19uYW1lc3BhY2UuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkodGhpcy53aWR0aCksIDEpLFxuICAgICAgICB1djogbmV3IFRIUkVFX19uYW1lc3BhY2UuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkodGhpcy51dnMpLCAyKSxcbiAgICAgICAgaW5kZXg6IG5ldyBUSFJFRV9fbmFtZXNwYWNlLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDE2QXJyYXkodGhpcy5pbmRpY2VzX2FycmF5KSwgMSksXG4gICAgICAgIGNvdW50ZXJzOiBuZXcgVEhSRUVfX25hbWVzcGFjZS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSh0aGlzLmNvdW50ZXJzKSwgMSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMucG9zaXRpb24uY29weUFycmF5KG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wb3NpdGlvbnMpKTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5fYXR0cmlidXRlcy5wcmV2aW91cy5jb3B5QXJyYXkobmV3IEZsb2F0MzJBcnJheSh0aGlzLnByZXZpb3VzKSk7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzLnByZXZpb3VzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMubmV4dC5jb3B5QXJyYXkobmV3IEZsb2F0MzJBcnJheSh0aGlzLm5leHQpKTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMubmV4dC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzLnNpZGUuY29weUFycmF5KG5ldyBGbG9hdDMyQXJyYXkodGhpcy5zaWRlKSk7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzLnNpZGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5fYXR0cmlidXRlcy53aWR0aC5jb3B5QXJyYXkobmV3IEZsb2F0MzJBcnJheSh0aGlzLndpZHRoKSk7XG4gICAgICB0aGlzLl9hdHRyaWJ1dGVzLndpZHRoLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMudXYuY29weUFycmF5KG5ldyBGbG9hdDMyQXJyYXkodGhpcy51dnMpKTtcbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMudXYubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5fYXR0cmlidXRlcy5pbmRleC5jb3B5QXJyYXkobmV3IFVpbnQxNkFycmF5KHRoaXMuaW5kaWNlc19hcnJheSkpO1xuICAgICAgdGhpcy5fYXR0cmlidXRlcy5pbmRleC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgdGhpcy5fYXR0cmlidXRlcy5wb3NpdGlvbik7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJwcmV2aW91c1wiLCB0aGlzLl9hdHRyaWJ1dGVzLnByZXZpb3VzKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcIm5leHRcIiwgdGhpcy5fYXR0cmlidXRlcy5uZXh0KTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInNpZGVcIiwgdGhpcy5fYXR0cmlidXRlcy5zaWRlKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHRoaXMuX2F0dHJpYnV0ZXMud2lkdGgpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwidXZcIiwgdGhpcy5fYXR0cmlidXRlcy51dik7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJjb3VudGVyc1wiLCB0aGlzLl9hdHRyaWJ1dGVzLmNvdW50ZXJzKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIHRoaXMuX2F0dHJpYnV0ZXMucG9zaXRpb24pO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwicHJldmlvdXNcIiwgdGhpcy5fYXR0cmlidXRlcy5wcmV2aW91cyk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJuZXh0XCIsIHRoaXMuX2F0dHJpYnV0ZXMubmV4dCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJzaWRlXCIsIHRoaXMuX2F0dHJpYnV0ZXMuc2lkZSk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0aGlzLl9hdHRyaWJ1dGVzLndpZHRoKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShcInV2XCIsIHRoaXMuX2F0dHJpYnV0ZXMudXYpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKFwiY291bnRlcnNcIiwgdGhpcy5fYXR0cmlidXRlcy5jb3VudGVycyk7XG4gICAgdGhpcy5zZXRJbmRleCh0aGlzLl9hdHRyaWJ1dGVzLmluZGV4KTtcbiAgICB0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuICAgIHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG4gIH1cbiAgYWR2YW5jZSh7IHgsIHksIHogfSkge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMuX2F0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG4gICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLl9hdHRyaWJ1dGVzLnByZXZpb3VzLmFycmF5O1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLl9hdHRyaWJ1dGVzLm5leHQuYXJyYXk7XG4gICAgY29uc3QgbCA9IHBvc2l0aW9ucy5sZW5ndGg7XG4gICAgbWVtY3B5KHBvc2l0aW9ucywgMCwgcHJldmlvdXMsIDAsIGwpO1xuICAgIG1lbWNweShwb3NpdGlvbnMsIDYsIHBvc2l0aW9ucywgMCwgbCAtIDYpO1xuICAgIHBvc2l0aW9uc1tsIC0gNl0gPSB4O1xuICAgIHBvc2l0aW9uc1tsIC0gNV0gPSB5O1xuICAgIHBvc2l0aW9uc1tsIC0gNF0gPSB6O1xuICAgIHBvc2l0aW9uc1tsIC0gM10gPSB4O1xuICAgIHBvc2l0aW9uc1tsIC0gMl0gPSB5O1xuICAgIHBvc2l0aW9uc1tsIC0gMV0gPSB6O1xuICAgIG1lbWNweShwb3NpdGlvbnMsIDYsIG5leHQsIDAsIGwgLSA2KTtcbiAgICBuZXh0W2wgLSA2XSA9IHg7XG4gICAgbmV4dFtsIC0gNV0gPSB5O1xuICAgIG5leHRbbCAtIDRdID0gejtcbiAgICBuZXh0W2wgLSAzXSA9IHg7XG4gICAgbmV4dFtsIC0gMl0gPSB5O1xuICAgIG5leHRbbCAtIDFdID0gejtcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLnByZXZpb3VzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9hdHRyaWJ1dGVzLm5leHQubmVlZHNVcGRhdGUgPSB0cnVlO1xuICB9XG59XG5jb25zdCB2ZXJ0ZXhTaGFkZXIgPSBgXG4gICNpbmNsdWRlIDxjb21tb24+XG4gICNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiAgI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cblxuICBhdHRyaWJ1dGUgdmVjMyBwcmV2aW91cztcbiAgYXR0cmlidXRlIHZlYzMgbmV4dDtcbiAgYXR0cmlidXRlIGZsb2F0IHNpZGU7XG4gIGF0dHJpYnV0ZSBmbG9hdCB3aWR0aDtcbiAgYXR0cmlidXRlIGZsb2F0IGNvdW50ZXJzO1xuICBcbiAgdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XG4gIHVuaWZvcm0gZmxvYXQgbGluZVdpZHRoO1xuICB1bmlmb3JtIHZlYzMgY29sb3I7XG4gIHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiAgdW5pZm9ybSBmbG9hdCBzaXplQXR0ZW51YXRpb247XG4gIFxuICB2YXJ5aW5nIHZlYzIgdlVWO1xuICB2YXJ5aW5nIHZlYzQgdkNvbG9yO1xuICB2YXJ5aW5nIGZsb2F0IHZDb3VudGVycztcbiAgXG4gIHZlYzIgZml4KHZlYzQgaSwgZmxvYXQgYXNwZWN0KSB7XG4gICAgdmVjMiByZXMgPSBpLnh5IC8gaS53O1xuICAgIHJlcy54ICo9IGFzcGVjdDtcbiAgXHR2Q291bnRlcnMgPSBjb3VudGVycztcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIFxuICB2b2lkIG1haW4oKSB7XG4gICAgZmxvYXQgYXNwZWN0ID0gcmVzb2x1dGlvbi54IC8gcmVzb2x1dGlvbi55O1xuICAgIHZDb2xvciA9IHZlYzQoY29sb3IsIG9wYWNpdHkpO1xuICAgIHZVViA9IHV2O1xuICBcbiAgICBtYXQ0IG0gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4O1xuICAgIHZlYzQgZmluYWxQb3NpdGlvbiA9IG0gKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICAgIHZlYzQgcHJldlBvcyA9IG0gKiB2ZWM0KHByZXZpb3VzLCAxLjApO1xuICAgIHZlYzQgbmV4dFBvcyA9IG0gKiB2ZWM0KG5leHQsIDEuMCk7XG4gIFxuICAgIHZlYzIgY3VycmVudFAgPSBmaXgoZmluYWxQb3NpdGlvbiwgYXNwZWN0KTtcbiAgICB2ZWMyIHByZXZQID0gZml4KHByZXZQb3MsIGFzcGVjdCk7XG4gICAgdmVjMiBuZXh0UCA9IGZpeChuZXh0UG9zLCBhc3BlY3QpO1xuICBcbiAgICBmbG9hdCB3ID0gbGluZVdpZHRoICogd2lkdGg7XG4gIFxuICAgIHZlYzIgZGlyO1xuICAgIGlmIChuZXh0UCA9PSBjdXJyZW50UCkgZGlyID0gbm9ybWFsaXplKGN1cnJlbnRQIC0gcHJldlApO1xuICAgIGVsc2UgaWYgKHByZXZQID09IGN1cnJlbnRQKSBkaXIgPSBub3JtYWxpemUobmV4dFAgLSBjdXJyZW50UCk7XG4gICAgZWxzZSB7XG4gICAgICB2ZWMyIGRpcjEgPSBub3JtYWxpemUoY3VycmVudFAgLSBwcmV2UCk7XG4gICAgICB2ZWMyIGRpcjIgPSBub3JtYWxpemUobmV4dFAgLSBjdXJyZW50UCk7XG4gICAgICBkaXIgPSBub3JtYWxpemUoZGlyMSArIGRpcjIpO1xuICBcbiAgICAgIHZlYzIgcGVycCA9IHZlYzIoLWRpcjEueSwgZGlyMS54KTtcbiAgICAgIHZlYzIgbWl0ZXIgPSB2ZWMyKC1kaXIueSwgZGlyLngpO1xuICAgICAgLy93ID0gY2xhbXAodyAvIGRvdChtaXRlciwgcGVycCksIDAuLCA0LiAqIGxpbmVXaWR0aCAqIHdpZHRoKTtcbiAgICB9XG4gIFxuICAgIC8vdmVjMiBub3JtYWwgPSAoY3Jvc3ModmVjMyhkaXIsIDAuKSwgdmVjMygwLiwgMC4sIDEuKSkpLnh5O1xuICAgIHZlYzQgbm9ybWFsID0gdmVjNCgtZGlyLnksIGRpci54LCAwLiwgMS4pO1xuICAgIG5vcm1hbC54eSAqPSAuNSAqIHc7XG4gICAgLy9ub3JtYWwgKj0gcHJvamVjdGlvbk1hdHJpeDtcbiAgICBpZiAoc2l6ZUF0dGVudWF0aW9uID09IDAuKSB7XG4gICAgICBub3JtYWwueHkgKj0gZmluYWxQb3NpdGlvbi53O1xuICAgICAgbm9ybWFsLnh5IC89ICh2ZWM0KHJlc29sdXRpb24sIDAuLCAxLikgKiBwcm9qZWN0aW9uTWF0cml4KS54eTtcbiAgICB9XG4gIFxuICAgIGZpbmFsUG9zaXRpb24ueHkgKz0gbm9ybWFsLnh5ICogc2lkZTtcbiAgICBnbF9Qb3NpdGlvbiA9IGZpbmFsUG9zaXRpb247XG4gICAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICAgICNpbmNsdWRlIDxmb2dfdmVydGV4PlxuICB9XG5gO1xuY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBgXG4gICNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4gIFxuICB1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XG4gIHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xuICB1bmlmb3JtIGZsb2F0IHVzZU1hcDtcbiAgdW5pZm9ybSBmbG9hdCB1c2VBbHBoYU1hcDtcbiAgdW5pZm9ybSBmbG9hdCB1c2VEYXNoO1xuICB1bmlmb3JtIGZsb2F0IGRhc2hBcnJheTtcbiAgdW5pZm9ybSBmbG9hdCBkYXNoT2Zmc2V0O1xuICB1bmlmb3JtIGZsb2F0IGRhc2hSYXRpbztcbiAgdW5pZm9ybSBmbG9hdCB2aXNpYmlsaXR5O1xuICB1bmlmb3JtIGZsb2F0IGFscGhhVGVzdDtcbiAgdW5pZm9ybSB2ZWMyIHJlcGVhdDtcbiAgXG4gIHZhcnlpbmcgdmVjMiB2VVY7XG4gIHZhcnlpbmcgdmVjNCB2Q29sb3I7XG4gIHZhcnlpbmcgZmxvYXQgdkNvdW50ZXJzO1xuICBcbiAgdm9pZCBtYWluKCkge1xuICAgICNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cbiAgICB2ZWM0IGMgPSB2Q29sb3I7XG4gICAgaWYgKHVzZU1hcCA9PSAxLikgYyAqPSB0ZXh0dXJlMkQobWFwLCB2VVYgKiByZXBlYXQpO1xuICAgIGlmICh1c2VBbHBoYU1hcCA9PSAxLikgYy5hICo9IHRleHR1cmUyRChhbHBoYU1hcCwgdlVWICogcmVwZWF0KS5hO1xuICAgIGlmIChjLmEgPCBhbHBoYVRlc3QpIGRpc2NhcmQ7XG4gICAgaWYgKHVzZURhc2ggPT0gMS4pIHtcbiAgICAgIGMuYSAqPSBjZWlsKG1vZCh2Q291bnRlcnMgKyBkYXNoT2Zmc2V0LCBkYXNoQXJyYXkpIC0gKGRhc2hBcnJheSAqIGRhc2hSYXRpbykpO1xuICAgIH1cbiAgICBnbF9GcmFnQ29sb3IgPSBjO1xuICAgIGdsX0ZyYWdDb2xvci5hICo9IHN0ZXAodkNvdW50ZXJzLCB2aXNpYmlsaXR5KTtcbiAgICAjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxuICB9XG5gO1xuY2xhc3MgTWVzaExpbmVNYXRlcmlhbCBleHRlbmRzIFRIUkVFX19uYW1lc3BhY2UuU2hhZGVyTWF0ZXJpYWwge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgdW5pZm9ybXM6IHtcbiAgICAgICAgLi4uVEhSRUVfX25hbWVzcGFjZS5Vbmlmb3Jtc0xpYi5mb2csXG4gICAgICAgIGxpbmVXaWR0aDogeyB2YWx1ZTogMSB9LFxuICAgICAgICBtYXA6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgdXNlTWFwOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgIGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgIHVzZUFscGhhTWFwOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgIGNvbG9yOiB7IHZhbHVlOiBuZXcgVEhSRUVfX25hbWVzcGFjZS5Db2xvcigxNjc3NzIxNSkgfSxcbiAgICAgICAgb3BhY2l0eTogeyB2YWx1ZTogMSB9LFxuICAgICAgICByZXNvbHV0aW9uOiB7IHZhbHVlOiBuZXcgVEhSRUVfX25hbWVzcGFjZS5WZWN0b3IyKDEsIDEpIH0sXG4gICAgICAgIHNpemVBdHRlbnVhdGlvbjogeyB2YWx1ZTogMSB9LFxuICAgICAgICBkYXNoQXJyYXk6IHsgdmFsdWU6IDAgfSxcbiAgICAgICAgZGFzaE9mZnNldDogeyB2YWx1ZTogMCB9LFxuICAgICAgICBkYXNoUmF0aW86IHsgdmFsdWU6IDAuNSB9LFxuICAgICAgICB1c2VEYXNoOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgIHZpc2liaWxpdHk6IHsgdmFsdWU6IDEgfSxcbiAgICAgICAgYWxwaGFUZXN0OiB7IHZhbHVlOiAwIH0sXG4gICAgICAgIHJlcGVhdDogeyB2YWx1ZTogbmV3IFRIUkVFX19uYW1lc3BhY2UuVmVjdG9yMigxLCAxKSB9XG4gICAgICB9LFxuICAgICAgdmVydGV4U2hhZGVyLFxuICAgICAgZnJhZ21lbnRTaGFkZXJcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibGluZVdpZHRoXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtYXBcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInVzZU1hcFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiYWxwaGFNYXBcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInVzZUFscGhhTWFwXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb2xvclwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVzb2x1dGlvblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic2l6ZUF0dGVudWF0aW9uXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkYXNoQXJyYXlcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRhc2hPZmZzZXRcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRhc2hSYXRpb1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwidXNlRGFzaFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwidmlzaWJpbGl0eVwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVwZWF0XCIpO1xuICAgIHRoaXMudHlwZSA9IFwiTWVzaExpbmVNYXRlcmlhbFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIGxpbmVXaWR0aDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubGluZVdpZHRoLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLmxpbmVXaWR0aC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWFwOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5tYXAudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMubWFwLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1c2VNYXA6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnVzZU1hcC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy51c2VNYXAudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFscGhhTWFwOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXNlQWxwaGFNYXA6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnVzZUFscGhhTWFwLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnVzZUFscGhhTWFwLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb2xvcjoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuY29sb3IudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuY29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm9wYWNpdHkudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzb2x1dGlvbjoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlLmNvcHkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2l6ZUF0dGVudWF0aW9uOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zaXplQXR0ZW51YXRpb24udmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMuc2l6ZUF0dGVudWF0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXNoQXJyYXk6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRhc2hBcnJheS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5kYXNoQXJyYXkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLnVzZURhc2ggPSB2YWx1ZSAhPT0gMCA/IDEgOiAwO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGFzaE9mZnNldDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZGFzaE9mZnNldC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5kYXNoT2Zmc2V0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXNoUmF0aW86IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRhc2hSYXRpby52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5kYXNoUmF0aW8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVzZURhc2g6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnVzZURhc2gudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXMudW5pZm9ybXMudXNlRGFzaC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdmlzaWJpbGl0eToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMudmlzaWJpbGl0eS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy52aXNpYmlsaXR5LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhbHBoYVRlc3Q6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy51bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlcGVhdDoge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmVwZWF0LnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnVuaWZvcm1zLnJlcGVhdC52YWx1ZS5jb3B5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xuICB9XG4gIGNvcHkoc291cmNlKSB7XG4gICAgc3VwZXIuY29weShzb3VyY2UpO1xuICAgIHRoaXMubGluZVdpZHRoID0gc291cmNlLmxpbmVXaWR0aDtcbiAgICB0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG4gICAgdGhpcy51c2VNYXAgPSBzb3VyY2UudXNlTWFwO1xuICAgIHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG4gICAgdGhpcy51c2VBbHBoYU1hcCA9IHNvdXJjZS51c2VBbHBoYU1hcDtcbiAgICB0aGlzLmNvbG9yLmNvcHkoc291cmNlLmNvbG9yKTtcbiAgICB0aGlzLm9wYWNpdHkgPSBzb3VyY2Uub3BhY2l0eTtcbiAgICB0aGlzLnJlc29sdXRpb24uY29weShzb3VyY2UucmVzb2x1dGlvbik7XG4gICAgdGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuICAgIHRoaXMuZGFzaEFycmF5ID0gc291cmNlLmRhc2hBcnJheTtcbiAgICB0aGlzLmRhc2hPZmZzZXQgPSBzb3VyY2UuZGFzaE9mZnNldDtcbiAgICB0aGlzLmRhc2hSYXRpbyA9IHNvdXJjZS5kYXNoUmF0aW87XG4gICAgdGhpcy51c2VEYXNoID0gc291cmNlLnVzZURhc2g7XG4gICAgdGhpcy52aXNpYmlsaXR5ID0gc291cmNlLnZpc2liaWxpdHk7XG4gICAgdGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuICAgIHRoaXMucmVwZWF0LmNvcHkoc291cmNlLnJlcGVhdCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbmZ1bmN0aW9uIHJheWNhc3QocmF5Y2FzdGVyLCBpbnRlcnNlY3RzKSB7XG4gIGNvbnN0IGludmVyc2VNYXRyaXggPSBuZXcgVEhSRUVfX25hbWVzcGFjZS5NYXRyaXg0KCk7XG4gIGNvbnN0IHJheSA9IG5ldyBUSFJFRV9fbmFtZXNwYWNlLlJheSgpO1xuICBjb25zdCBzcGhlcmUgPSBuZXcgVEhSRUVfX25hbWVzcGFjZS5TcGhlcmUoKTtcbiAgY29uc3QgaW50ZXJSYXkgPSBuZXcgVEhSRUVfX25hbWVzcGFjZS5WZWN0b3IzKCk7XG4gIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcbiAgc3BoZXJlLmNvcHkoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpO1xuICBzcGhlcmUuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpO1xuICBpZiAoIXJheWNhc3Rlci5yYXkuaW50ZXJzZWN0U3BoZXJlKHNwaGVyZSwgaW50ZXJSYXkpKVxuICAgIHJldHVybjtcbiAgaW52ZXJzZU1hdHJpeC5jb3B5KHRoaXMubWF0cml4V29ybGQpLmludmVydCgpO1xuICByYXkuY29weShyYXljYXN0ZXIucmF5KS5hcHBseU1hdHJpeDQoaW52ZXJzZU1hdHJpeCk7XG4gIGNvbnN0IHZTdGFydCA9IG5ldyBUSFJFRV9fbmFtZXNwYWNlLlZlY3RvcjMoKTtcbiAgY29uc3QgdkVuZCA9IG5ldyBUSFJFRV9fbmFtZXNwYWNlLlZlY3RvcjMoKTtcbiAgY29uc3QgaW50ZXJTZWdtZW50ID0gbmV3IFRIUkVFX19uYW1lc3BhY2UuVmVjdG9yMygpO1xuICBjb25zdCBzdGVwID0gdGhpcyBpbnN0YW5jZW9mIFRIUkVFX19uYW1lc3BhY2UuTGluZVNlZ21lbnRzID8gMiA6IDE7XG4gIGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICBpZiAoaW5kZXggIT09IG51bGwpIHtcbiAgICBjb25zdCBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG4gICAgY29uc3QgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcbiAgICBjb25zdCB3aWR0aHMgPSBhdHRyaWJ1dGVzLndpZHRoLmFycmF5O1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGggLSAxOyBpIDwgbDsgaSArPSBzdGVwKSB7XG4gICAgICBjb25zdCBhID0gaW5kaWNlc1tpXTtcbiAgICAgIGNvbnN0IGIgPSBpbmRpY2VzW2kgKyAxXTtcbiAgICAgIHZTdGFydC5mcm9tQXJyYXkocG9zaXRpb25zLCBhICogMyk7XG4gICAgICB2RW5kLmZyb21BcnJheShwb3NpdGlvbnMsIGIgKiAzKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gd2lkdGhzW01hdGguZmxvb3IoaSAvIDMpXSAhPSB2b2lkIDAgPyB3aWR0aHNbTWF0aC5mbG9vcihpIC8gMyldIDogMTtcbiAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHJheWNhc3Rlci5wYXJhbXMuTGluZS50aHJlc2hvbGQgKyB0aGlzLm1hdGVyaWFsLmxpbmVXaWR0aCAqIHdpZHRoIC8gMjtcbiAgICAgIGNvbnN0IHByZWNpc2lvblNxID0gcHJlY2lzaW9uICogcHJlY2lzaW9uO1xuICAgICAgY29uc3QgZGlzdFNxID0gcmF5LmRpc3RhbmNlU3FUb1NlZ21lbnQodlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50KTtcbiAgICAgIGlmIChkaXN0U3EgPiBwcmVjaXNpb25TcSlcbiAgICAgICAgY29udGludWU7XG4gICAgICBpbnRlclJheS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oaW50ZXJSYXkpO1xuICAgICAgaWYgKGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGludGVyc2VjdHMucHVzaCh7XG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICBwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgZmFjZTogbnVsbCxcbiAgICAgICAgZmFjZUluZGV4OiB2b2lkIDAsXG4gICAgICAgIG9iamVjdDogdGhpc1xuICAgICAgfSk7XG4gICAgICBpID0gbDtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydHMuTWVzaExpbmVHZW9tZXRyeSA9IE1lc2hMaW5lR2VvbWV0cnk7XG5leHBvcnRzLk1lc2hMaW5lTWF0ZXJpYWwgPSBNZXNoTGluZU1hdGVyaWFsO1xuZXhwb3J0cy5yYXljYXN0ID0gcmF5Y2FzdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/meshline/dist/index.cjs\n");

/***/ })

};
;